{"title": "极客前端开发者劳卜精彩解读：通过微信小程序看前端利弊 ", "author": "admin", "push_time": "2016-10-12 18:26", "content": "前言虽然内测名额十分稀少，但依赖中国广大开发者的破解和分享精神，在网络上很快出现了开发工具的破解版本和API文档。然而可能是微信的妥协或者早已预料，9月24日微信官方发布了不需要破解就可以使用的微信小程序开发者工具和文档，对于费劲心思破解完的开发者来说应该瞬间整个人都不好了。以下便是微信提供的开发工具和文档地址：https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1474644087418作为一名具有极客精神的前端开发者，我也马上在这股热潮中试了下水，下载了小程序开发工具。下面是登陆后的界面：从整个结构布局来看这款IDE工具可以分为三个部分，首先左侧为导航操作区域，中间是目录或展示区域，右侧为调试区域（很像Chrome的调试工具）。下面我就以前端的角度分别从代码角度和宏观角度介绍下自己对于微信小程序的看法。代码角度纵观整个开发文档，微信小程序的前端技术主要可以分为“框架”、“组件”和“API接口”。1.框架微信提供了一套自己的用于开发小程序的前端框架，和目前主流的前端框架相比，其既有类似的地方，也有特殊的地方。特殊的地方在于其只能在微信小程序开发工具内使用，并做了相对严格的使用和配置限制，开发者必须按照其规定的用法来使用。一些外部的框架和插件在小程序里都是无法使用的，同时由于框架并非运行在浏览器中，所以 JavaScript 在 web 中一些能力都无法使用，如document，window等。而相似的地方在于其包含了和其他框架一样的“逻辑层”和“视图层”，以数据驱动为主，不操作DOM元素等。下面以代码为例子来介绍：（1）数据绑定<view> {{message}} // page.js\r\nPage({\r\n    data: {\r\n      message: 'Hello MINA!'\r\n    }\r\n})Page() 方法用来注册一个页面。接受一个 OBJECT 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。这乍一看怎么和目前流行的Vue框架语法十分类似呢，Vue代码如下： {{message}} // page.js\r\nnew Vue({\r\n  data: {\r\n    message: 'Hello MINA!'\r\n  }\r\n})都是双括号插值语法，连数据初始化和双向绑定的格式都一样，好吧，就当纯属巧合吧。这里需要注意的是，微信小程序提供了WXML后缀的文件类型，其实就是类似XML的标签语言文件。（2）列表渲染 {{item}} // page.js\r\nPage({\r\n    data: {\r\n      array: [1, 2, 3, 4, 5]\r\n    }\r\n})这样的列表渲染语法相信学过Angular和Vue的同学都比较容易掌握，都是非常的类似，当然还有条件渲染等。（3）事件绑定 {{count}} Page({\r\n    data: {\r\n      count: 1\r\n    },\r\n    add: function(e) {\r\n        this.setData({\r\n            data: this.data.count + 1\r\n        })\r\n    }\r\n})如果你学过React，那么其里面有一个setState的方法可以用来改变状态的值，这里的setDate也是一样的，通过绑定的add方法来改变视图中count的值。（4）样式导入/** common.wxss **/\r\n.small-p {\r\n    padding:5px;\r\n}/** app.wxss **/@import \"common.wxss\";\r\n\r\n.middle-p {\r\n    padding:15px;\r\n}这里小程序提供了又一种新的文件后缀类型WXSS，用于描述WXML的组件样式，其与CSS文件相比还提供了像SASS和LESS这样的预编译语言的样式导入功能，同时还提供了rpx及rem的单位尺寸功能。（5）模块化// common.js\r\nfunction sayHello(name) {\r\n    console.log('Hello ' + name + '!')\r\n}\r\nmodule.exports = {\r\n    sayHello: sayHello\r\n}var common = require('common.js')\r\nPage({\r\n    helloMINA: function() {\r\n      common.sayHello('MINA')\r\n    }\r\n})微信小程序秉承了JS模块化的机制，熟悉Require.js或者Sea.js的同学应该很熟悉，这里通过module.exports暴露对象，通过require来获取对象。2.组件小程序的组件其实也是框架的一部分，主要负责UI的呈现，也自带了一些功能与微信风格的样式。基本上移动端常用的组件都包含在内，比如表单组件、导航组件、媒体组件等。下面便是小程序提供的八类组件：对于小程序的组件使用其实不是非常复杂，按照文档的使用示例便可以轻松搞定，详细地址：https://mp.weixin.qq.com/debug/wxadoc/dev/component/?t=14746440856983.API接口相比微信公众号的开发，微信小程序向开发者提供了更多的API接口，可以方便的调起微信提供的能力，比如监听重力感应和罗盘数据、WebSocket连接、支付功能等。下面以一个发起网络请求的API为例：wx.request({\r\n    url: 'test.php',\r\n    data: {\r\n        name: 'luozh' ,\r\n        age: 18\r\n    },\r\n    header: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    success: function(res) {\r\n        console.log(\"请求成功\")\r\n    },\r\n    fail: function() {\r\n        console.log(\"请求失败\")\r\n    }\r\n})wx.request发起的是https请求。一个微信小程序，同时只能有5个网络请求连接。关于更多API接口的介绍请查阅官方文档。以上便是关于微信小程序前端代码部分的简单介绍，相信有一点前端框架使用经验的同学上手都是相对容易的，下面将从宏观角度讲解下我个人认为微信小程序给前端领域的带来影响。宏观角度微信小程序一出来的时候，网上关于其对于前端界的影响层出不穷，更多的文章和评论认为前端又要火了，前端的第二春来了，Javascript和HTML5的新时代来了等。当然微信小程序的出现确实会给前端带来一定的推波助澜的效果，但是任何一件事物的诞生都是利弊并存的，微信小程序也不例外。以下便简单阐述下我个人的看法：1.利（1）提高开发兼容性：微信小程序可以说是重新定义了APP，使得一款应用能够在android、iphone及windows phone中都能运行，对于前端来说实现了“一次编译，到处运行”的理念。（2）推动前端技术的发展：微信小程序以其简单的开发环境，使以Javascript和HTML5为主的前端技术在庞大的微信社交群体内传播，越来越多的人开始接触前端，参与到前端编码和设计中来，为前端技术贡献力量。（3）其他...2.弊（1）增加前端工作量及学习成本：原本一名前端工程师负责的平台就很广泛，包括PC端、移动端、APP应用等，微信小程序的出现会要求前端涉及微信应用的开发，一定程度增加了学习和工作成本。同时企业也会增加这方面的开发和投入成本。（2）前端竞争日趋明显：微信小程序的诞生可能又会吸引一批后台、APP开发等其他领域的人员转向前端开发，而这些本来就具备较强逻辑思维或者较强感性思维的人将挤掉那些处于前端边缘的新手，可能使得大部分低水平前端开发者面临失业或者找不到工作的危险。（3）其他...这里大概介绍了几点微信小程序给前端带来的影响，更多的大家可以补充。总结本文从代码角度和宏观角度简单阐述了微信小程序在前端领域的一些内容和影响，希望能够帮助那些不了解微信小程序的开发者很快入门并认识这一新的技术领域。至于小程序对于前端的影响，反过来我们也可以这样认为：技术的发展不是基于一个平台去改变，而是通过技术去驱动一个平台改变，正是因为前端的发展才催生了“小程序”的这种可能性…"}
{"title": "多案例解析小程序的全场景跨端运营 ", "author": "Rolan", "push_time": "2020-5-13 00:01", "content": "本文根据友盟+资深数据分析师、数据传承官@相峥，友盟+产品专家@范芊芸在起点学院公开课的分享整理而成，直播回放链接： http://996.pm/7dRLE ；添加小助手哒哒微信：da22133，可领取学习资料。友盟+资深数据分析师、数据传承官@相峥，友盟+产品专家@范芊芸演讲实录，由人人都是产品经理团队依据嘉宾分享内容整理，编辑有修改：大家好，我是友盟+的相峥，很高兴能来到起点学院直播间做这次的分享。我今天给大家带来的分享主题《小程序跨端运营全效洞察》。本次分享我会给大家介绍前半部分，后半部分是由我们负责小程序的一位产品专家来给大家继续分享。小程序爆发式的增长今年的疫情让整个Q1变得很魔幻，大家各自的工作业务上可能也面临了不同的机遇和挑战。这期间，我们也见证了小程序爆发式的增长。从去年12月到今年2月，小程序的活跃用户数增长了37%，小程序的数量也增长了19%。最新一份来自阿拉丁的微信小程序公布榜单中，月度top100小程序有53%的替换率，说明上榜的名单里有一半都和上个月不一样，而以往这个比例只有20%左右。这些数字变化的背后，我们能看到疫情对于不同行业产生的影响是不一样的。对于一些新兴的互联网风口行业，像大健康、工具，在线教育、政务类这些小程序都有一个爆发式的增长；另一部分是传统行业，像餐饮、线下零售、生活服务这些属于被疫情倒逼拥抱新技术，希望用小程序的方式连接新的消费者、维系老用户。我举三个例子让大家感受下传统品牌是怎样借助小程序转型成功的。传统行业借助小程序转型的三个案例案例1：家乐福家乐福在疫情期间通过小程序上线到家服务，在线上把握住了小程序这个入口，线下联动社区，上线一周环比增长356%。并通过门店数字化改造以及与苏宁生态的加速融合，不断触达更广泛的人群，让家乐福“社区生活服务中心”的定位更加深入人心。案例2：眉州东坡眉州东坡本来是在店门口销售囤积食材的平价菜站，结果催生了上线卖囤积菜小程序的想法。小程序相比app轻量很多并且能快速开发上线，所以他们就立马通过公众号推送、内部员工转发，朋友圈转发等各种手段推广小程序，现在每天销售新鲜蔬菜超过10万元。案例3：君太百货他通过小程序直播，用图文的方式种草，再用图文里面链接的小程序到商城里面割草，发动百货的员工、导购在朋友圈做私域的推广。百货原本只是线下用来连接人和货的场子，但现在挪到线上用小程序的方式也可以很好地连接人和货，并促进商场内租户品牌的曝光和转化。我们能感觉到各行各业都已经开始涌向小程序赛道，小程序的商业化竞争也会变得越来越激烈， 你的小程序该怎么面对这种竞争呢？在我看来，可以通过以下这三个点好好把握。第一点是结合业务特点来确定小程序的定位和运营方式。小程序玩法很多，但那些都是手段，不是目的。你要看清楚自己的业务情况，小程序可以怎样为自身业务所用，而不是被小程序的玩法牵着鼻子走。第二点是结合各巨头生态特点和扶持计划，根据特点多生态布局。大家都知道微信小程序的第一宿主，但它绝对不是唯一的宿主，有流量的地方就有小程序，所以现在阿里、百度、字节跳动等各巨头的生态也都在大力发展小程序、扶持开发者。如果你没有经历过微信小程序刚开始爆发的那波红利，那现在也不要错过即将到来的其他平台的红利。第三点是做好全域运营，包括私域和公域的运营。app、小程序、小程序矩阵、微博、公众号这些都属于私域的各个端口，想要做好私域的运营，其中私域之间数据的流动和沉淀打通很重要。现在市面上有些过分强调私域运营，会让大家容易忽略公域，但想要做好全域运营，还需要发挥私域和公域的联动作用。下面我就围绕着这三点继续展开分享。一、小程序业务场景的归纳首先是小程序业务场景的定位，我从两个维度拆分了小程序的业务场景。1. 小程序业务场景的2个划分维度第一个是involvements（参与度），根据业务场景是满足用户比较重的需求还是轻的需求来划分。轻的需求是用户不用过多思考就可以完成的动作，比如打卡或扫码；重的需求是决策路径相对长一些的动作，比如买车买房。这是图中纵轴所代表的含义。如果你的业务偏向满足用户的轻度需求，那你的业务就非常契合小程序的轻量化特点，你可以在各个平台上用小程序来开采流量。如果你的业务偏向满足用户的重度需求，那你不能希望小程序帮助你直接实现最终的转化。小程序承担的作用是，在整个比较长的决策链路当中推进其中某些环节的转化。举个例子，如下图，对于电商而言，完整消费者决策链路可以划分成AIPL四大阶段。淘宝直播最近为什么这么火呢？因为它以一种沉浸式、更直观的方式，把你直接带到了购买之前的最后一步，你可能在直播现场一激动就直接下单，极大地缩短了你要从注意到产生兴趣到购买这样的链路。同理，我们在小程序上也有非常多的方式帮助你缩短用户的决策路径，现在很多平台也都有非常多这种能力的开放。以微信举例，虽然微信比较封闭，不太能把小程序和微信分享到外面，但他在微信内部之间以及外部app的分享是非常方便的。这种方式就便于大家在社群里面做小程序的曝光和裂变引导，引导并缩短从注意到产生兴趣到购买的一系列环节。微信本来是以公众号图文营销为主，变现时需要链接到电商平台转化。但现在小程序都可以被挂载在文章下面，这极大的推动了从内容种草到内容的直接转化。另外，与大宗消费品类相比，快消品或者是客单价低一点的品类更容易促进转化，这一类小程序可以更多地加入一些促销活动，像我们常见的拼团秒杀抽奖积分等。第二个维度是根据需求是高频还是低频的来划分。对于低频小众的需求，开发推广app有点不划算，小程序的诞生就很好地帮助了开发者解决这样的问题，可以用小程序替代app满足一些低频需求的场景。对于高频的需求，企业会有更强的动力开发独立的app。这时我们不能认为小程序是抢app的流量、参与度、留存裂变等，更多的是让小程序发挥长处，让小程序来裂变导流，并在微信生态内帮助搭建一个完整的商业模式，这种方式可以很好地与app产生互补。后面我会列举具体案例。2. 小程序业务场景分类“四象限”根据刚才提到的两个维度，我们把它交叉起来形成了四象限。左上角是重度低频需求，其实是业务加小程序的组合，业务还是你的核心，小程序是帮助你在业务的触点上进行数字化。左下角是低频轻度需求，这一类业务场景中小程序是主阵地，可以围绕小程序来做业务的展开，像小程序+社群、小程序+服务号、小程序+公众号等方式。右上角是高频高度需求，这类需求的小程序和APP、公众号、多生态各端之间是相辅相成的，一起推动加速转化。右下角是高频轻度需求，这类需求的小程序可以很好地拥抱生态本身的特点，把小程序作为一个便捷入口，我会在后面举例。3. 案例介绍关于这四象限，接下来我就分别举例，和大家一起看看针对不同需求的场景、不同的小程序是怎么玩的。3.1 重度+低频对于重度+低频的需求，我直接列举2个案例说明。案例1：大宗消费品“威马汽车”威马汽车属于新品类新品牌，它有一个市场教育的过程。关于买车用户体验的整个流程是从一开始被曝光，产生兴趣，有所了解，试驾，售前，售中，售后这些环节。威马在整个流程中布局了非常多小程序可以触达的地方。我之前看到过很多次威马在朋友圈投的广告，点开是一个小程序，整个小程序矩阵里面包括了从预约试驾、试驾、试驾完以后的报告、购买时注册会员、积分商城等，这些都是能被小程序所覆盖的，这就很好的帮助威马连接他与消费者之间的关系、推动整个链路上的转化。案例2：装修行业小程序“住范儿”装修是属于纯粹线下、非常重的一种生意。那这家企业是如何借助小程序将业务延伸的呢？首先他的公众号里面有非常丰富的装修案例，可以通过内容获客，并且每个内容的底部都会挂载小程序。所以不管用户是通过自家的公众号，或者其他的公众号看到内容，都可以帮助他用小程序获客。他的小程序矩阵非常完备，有报价相关的小程序，评测、留资小程序，装修过程管理等各种各样的小程序，他们是通过这些触点将业务做到数字化和小程序化。通过这两个例子想告诉大家，像这种重度低频的需求在小程序上有非常多的玩法，能够帮助你跟用户增加接触面积。3.2 轻度+轻频关于轻度低频的需求，我也列举2个例子说明。案例1：论文查重小程序他是在毕业季上线小程序获取一波新用户，过程中借助社群引导大家进行社交裂变，比如用户转发2个群后可解锁免费查重机会。这个小程序当时是以学生社团微信群为种子，一个小时之内就迅速地在当地的各种学生群里刷屏。案例2：海澜之家小程序海澜之家是小程序加公众号的运营。如果希望用户在用完小程序后还能将流量沉淀下来持续运营，那可以在小程序里用一些领红包、领资料的利益点引导大家关注公众号，把小程序的流量和用户沉淀在公众号，弥补了小程序本身触达能力有限的缺点。公众号就能以更高频、更丰富的内容触达这些你获取的新用户，达到持续运营的效果。3.3 重度+高频关于重度高频的需求，我先以携程举例。案例1：携程携程app和网站的功能是很丰富的，甚至可能有点臃肿，所以他们把app当中的场景拆分形成多个独立的小程序，让每一个场景对应一个轻量级的决策，比如把规划行程、抢火车票、找导游、外币兑换等场景都拆成一个单独的小程序，每一个都非常轻量级，大大提升了用户使用小程序的体验。案例2：知买上图知买小程序这种是微信不怎么鼓励的做法。但大家如果想做一个能够为app引流的小程序，那可以考虑做一个网站类的小程序，你可以在小程序里面增加积累虚拟金币或金豆的功能。当积累到一定的数量可以提现的时候，他就会告诉用户，请下载app来提现。3.4 轻度+高频关于轻度高频的需求，小程序的作用更多偏向工具类属性强，我也举2个例子。案例1：连咖啡它跟竞品瑞幸咖啡不太一样，瑞幸侧重将流量入口都收在app，为了做好用户留存和品牌认同。连咖啡是基于微信服务号和小程序搭建了促销、订购和运营的体系，强调咖啡基于人际关系的分享和流转。他们还打造了“口袋咖啡馆”这款游戏化小程序，借用小程序打入微信并建立商业模式。案例2：墨迹天气墨迹天气，这类纯工具属性app，面临的问题是想要做内容，想要延长用户的使用时间以及增强用户粘性，但是会让用户体验变得很乱。但是他们设计的清爽实用的小程序却很受欢迎。并且你搜天气的时候，他是微信的默认选项，很好地抱住了微信入口的大腿，彻底融入了微信生态。对于工具类app来说，通过小程序融于生态也是一个比较好的寻找流量增长点的方式。我还想强调一点是微信在今年的公开课上所透露的即将上线的新能力：会更加开放搜索的能力；把连接实体的扫一扫的功能提升成扫一物一码了；关于订阅，因为小程序的触达能力相对比较弱，也在考虑更多的方式助力大家留存。还有像直播、公众号短内容、广告能力、中界线能力都会有所提升。我们可以思考一下，未来新上线的能力跟自己的业务有没有比较好的契合点。过去有人口红利或流量红利，现在这两种红利都不太好挖掘的时候，我们就需要向新的技术、新的能力争取红利。后半部分就交给我们的产品专家。二、多生态小程序特点大家好，我是友盟+的产品经理@范芊芸，现在主要负责友盟家的小程序，很高兴能在起点学院公开课上为大家带来分享。下面我会继续为大家分享不同生态小程序的特点以及小程序+私域+公域的整体布局。现在非常多的生态都在布局小程序，他们都有自己的平台特点，也有很多不同的使用场景和优势。大家在做小程序的时候，需要考虑这些平台开放的小程序生态的产品特色、和他们的平台结合有哪些能提供给大家的优势。你如果打算开展小程序业务，考虑的重点应该是需要布局某一个小程序生态还是可以利用多个小程序生态赋予不同的能力组合出不同的玩法。我们先一起看看不同平台的优势和典型特点。1. 不用平台优势和典型特点1.1 微信微信，提供了微信小程序、qq小程序，都是建立在社交关系上的。所以只要是跟人或者其他群体产生联系的业务，不管是购物，社交，引导大家互相pk、交流的小程序的场景和业务，都非常适合微信生态的场景和平台。1.2 阿里阿里，目前开放了支付宝，天猫精灵，和钉钉小程序，后续会开放更多。那他们分别对应的场景都是什么呢？支付宝更多的是消费金融的场景。我们可以考虑在这种信用场景、金融场景、支付场景上，我们的小程序可以怎样融入；淘宝轻店铺就直接与卖货相关；还有天猫精灵小程序，它是一个非常适合做内容的小程序，你做的如果是跟幼儿儿童甚至跟母婴有关的小程序，都可以考虑通过音箱开发智能助手等功能。1.3 百度百度平台的特点是精准度高、搜索能力强，它其实是整个小程序平台里为数不多的目前开源的一个小程序场景。基于百度小程序，我们可以考虑它怎样赋能其它的app，怎么和爱奇艺、小红书、b站等开展合作。我们可以利用小程序在一些其它有明显生态特点及人群分布特点的平台上去更好的获客。1.4 头条头条和抖音小程序最强的是推荐和信息流。你如果了解自己目标人群的特点，比如喜欢看的内容、欢搜索的东西等，你可以考虑布局头条和抖音小程序，去获得平台的流量和支持。每一个平台的特点都不太一样，后面我会跟大家列举几个巨头布局多平台的案例，可以看看他们布局的思考点。目前除了微信生态比较拥挤以外，其他的生态像头条小程序、抖音小程序还没那么拥挤，那我们是不是可以考虑先多了解其他平台的玩法并快速布局呢？我继续举例介绍让大家更加清晰地了解不同平台小程序的特点。2. 不同平台小程序特点和举例介绍2.1 微信小程序微信小程序一直坚持去中心化，和社交绑定的很好，所以对于留存场景的支持比较好。2.2 支付宝阿里有非常多的联盟生态，像优酷，淘宝，支付宝这些都是属于流量的入口。可以考虑布局“阿里联盟小程序”，打通阿里体系所有生态。2.3 百度智能小程序百度平台可以发力“搜索+信息流+AI+开源联盟”，并做到全场景覆盖。2.3 字节跳动小程序字节跳动平台的小程序特点是，内容与工具可以互相导流。3. 案例介绍网络上已经能搜索到很多有关微信小程序的例子，我在这就不重点展开了。我重点跟大家聊聊支付宝小程序，目前支付宝也在做数字化生活的转型，小程序在这么大的生活服务、金融服务的平台上面应该怎么玩？我给大家举例介绍3个小程序。3.1 支付宝小程序案例介绍支付宝小程序1：好食期这个小程序很简单，主要是在支付宝上让大家以比较优惠的价格买小零食。他每天会在小程序里推荐不同零食的优惠，刺激用户购买。他们引用了支付宝小程序目前提供得一些比较好的能力。第一个是无资金商户的优惠券，相应场景是如果用户完成支付，那可以在页面直接领取商户的优惠券，并注明商户不用预存资金，给用户提供了更多的方便。第二个是支付宝上生活号的推送，目前生活号比较开放并具备一定的触达用户的能力，像银行、航空公司也经常会在生活号上推送一些积分优惠活动，我们也可以考虑和生活号关联起来做一些运营动作。第三个是引用了轻会员的能力。对于小程序开发者来说，不用开发一个整体的会员系统，也不用做一个非常复杂的会员体系的设计，直接引用轻会员的能力是非常快捷方便的。这个小程序目前已经做到152万的收藏量，优惠券的回收率非常高，也就意味着转化率很高，粉丝和购买转化率也一直在提升，这是一个比较有意思的玩法和设计。支付宝小程序2：娃哈哈到家娃哈哈到家小程序主要采用了一些像支付宝卡包、先享后付、根据运动数据领取优惠券、或者和小区里的送水厂商合作等方式，很好地引导了用户经常使用他们的小程序。他们也有一些小游戏的场景，比如7日喝水挑战赛，每天提醒你定时补水等等。在小游戏场景中给用户发放优惠券。一段时间内，他们每张优惠券的核销率会增长，并能稳定增加一定数量的新用户，小程序的收藏量也有所提高。这是把支付宝小程序和小区支付的场景结合起来做得不错的一个case。支付宝小程序3：边走边吃边走边吃小程序是通过计算用户运动数据、获得步数积、然后提现，再通过其他生态的小程序跳转到支付宝小程序引导变现。这依赖于支付宝提供了步行计数、现金红包、运动数据相互跳转的功能。通过小程序他们已经获得了20倍+的用户增长，85万+的日活用户峰值，次留峰值提升了80%+，小程序收藏率也提升了10%+。这其中，友盟也有在帮他们做一些推广链接的部分，比如帮他们和其他小程序换量，用他们的生活号引流等等，提升了一定的获客效率，他们家也算是友盟+小程序的种子用户。3.2 头条和抖音小程序头条和抖音的特点主要是头条搜索，信息流和偏好推送。如果想做好头条和抖音小程序的运营，最重要的是能够找到相应的精准人群和用户画像。可以去看自己运营的抖音号、短视频帐号上的用户评论，或者根据头条和抖音提供的用户画像数据，去看粉丝在关注什么内容，一定程度上可以做好精准人群的投放。3.3 多平台布局小程序案例介绍我们也引用了市场上的一个开源报告，数据显示月活过亿的APP当中，2/3涉猎小程序，21%更是同时布局2个以上平台。我这里给大家介绍2个多平台布局小程序的例子。举例1-科大讯飞科大讯飞在很早的时候就开始了多平台小程序的布局。他们在微信小程序上主推个性化语音祝福的功能，通过祝福内容产生裂变，获取了大量的种子用户。在头条上，他们做了文字转音频的工具，帮助用户从视听两个方面接收内容。在百度平台上，结合Free-hand场景，考虑车载和智能家居这些方向的工具。在支付宝上，他们主要做了租赁讯飞的翻译设备的小程序，属于信用授权场景，比较契合支付宝的生活金融属性。科大讯飞小程序的布局结合了不同平台的特点，引用了自己声音翻译的核心产品能力，打造多个场景，最终获得了不错的结果。举例2-携程第2个例子是携程。我们在微信中能看到很多的助力抢票小程序，有时在支付宝上买机票或者订酒店的时候也会看到相应的推广。今日头条在搜索的信息流上也做了很多类似的功能，如果你经常搜索旅游目的地，你就会收到相关的推送。携程最近在小红书上也做了小程序，小红书本身是一个比较有趣的打卡种草平台，携程和小红书合作做官方酒店、旅游的推荐也是比较切合的，这就变成了一种可以很好地引流并引导购买的场景。下面一部分好想和大家分享怎么利用小游戏来助力小程序业务。4. 小游戏这里举一个偏零售化场景的case，绫致时装。他们在小程序做了两次颜值pk大赛，结合排行榜、超越对战、pk这些社交玩法来推广，并在页面下方曝光他们当季要上的新品衣服，在试穿服装以后，就引导你分享。如果你pk赢了，你可以领取优惠券，可以在全国所有的门店核销和使用。小游戏的模式偏向碎片化休闲化，更多的是面向泛游戏用户，泛游戏用户和我们平时使用小程序的用户群结合是非常多的，所以受众面很广。如果能考虑把小游戏和你的业务相结合，可能也会带来一些更好的效果。我很认可之前微信公开课上提到的：“小游戏不止小游戏，更是文化的传递者。”如果是一个有关业务的小程序，小游戏整体的体验环节，不仅是文化的传递者，也是企业营销、品牌的传递者，并同时是效果的承接者。你的业务需要怎样的品牌营销效果，你也可以考虑是否要从小程序入手获得更多这种受众面的用户。三、小程序+私域+公域这部分想和大家聊一下私域要怎么做，公众号和小程序要怎么定位和布局。我从友盟+服务了众多客户的角度来分享我们看到的一些东西。以前大家都不关注私域，只投广告，也不考虑用户运营或者用户留存；但这两年广告越来越贵，大家都不买广告，开始转向私域，大家都开始考虑搭建私域业务设施，比如小程序，h5，微商城，微店等。很多也在搭建小程序的私域营销设施，小程序、小游戏、销售导购、导购员都可以作为所谓的私域营销设施；或者经常给用户发通知，结合CRM数据去分群、发券儿，构建比较完整的私域业务场。那我们就不需要公域了嘛？当然不是！公域里面也会提供这些东西，公域有相关的营销设施、业务设施，公域也会有公域的触点和用户数据，尤其是公域的用户数据和触点其实是私域没有办法做到的。所以每个业务在做公域的同时里面也会有一个公域的业务场。对于本身在你企业的用户来说，用户是在公域和私域中流转的，我们应该多关注私域运营和公域营销。1. 如何通过小程序来做好私域运营和公域营销？第一是数据联通，用户的体验都取决于整体的数据，透过数据我们才能了解用户的个性特点、个人喜好等，我们可以通过小程序做好公域和私域数据的连接，结合公域和私域的用户洞察全面了解用户。第二是营销联通，前面提到私域和公域都有各自的触点和营销设施，所以我们可以做好营销通道、内容的链接。第三是体验的提升，公域和私域的服务和产品相对用户来说应该是互补的，可以提供不同的用户价值，也可以做好不同的营销。从企业的业务来讲，公域和私域都要做，小程序目前是中间的一颗明珠。我们可以在公域的场里面去建立自己的私域，同时我们也要想怎么用好公域提供给我们的营销设施，像广告、流量推荐、feeds流等。2. 友盟+可提供的服务：全域用户数据的打通小程序有很多种形态，不同形态意味着有不同的平台框架，不同平台的数据，不同模式、形式等，想能够快速的把所有的数据打通，还是需要一些时间。友盟+目前可提供一个 整体的小程序解决方案 ，能支持多平台的小程序快速集成和一站式的接入。比如友盟+目前支持微信、支付宝，和刚提到的天猫精灵的这种iot设备的接入，后续也会支持钉钉、头条系的小程序。从数据的角度来讲，友盟还可以做到 获客、转化、裂变、留存、变现这5大环节所有数据链路的打通 ；比如获客，可以帮助你看到流量池的来源，可以快速的建立推广链接，也能清晰地知道推广所带来的新用户数量，活跃用户的数量，用户感兴趣的内容，可以用来大量获客的内容形态等；也可以知道激活、转化和留存链路中比如用户活跃度，核心转化路径，转化率以及不同用户的留存情况，这些都是常见的需要关注的数据。友盟除了能支持微信中的业务以外，也会进一步在阿里系应用这块做更多的探索，更好地支持大家在相应的生态里面做好自己的小程序业务。友盟+现在也有数据银行这样一款产品，可以通过友盟的全域数据，支持程序端和其他端用户的打通，以及沉淀私域数据去帮助刻画私域用户画像。因为有全域的用户数据，所以我们也可以给大家提供在公域上的一些用户洞察。如果你只是打算开发一个简单的小程序，不需要去和app以及其它私域矩阵打通，那你也可以关注友盟+的小程序系统，可以免费注册使用，也是从获客、转化、裂变、留存、变现这5个环节全力支持小程序开发者的数据运营。下图是关于我们的创建工具，比如你创建一个推广活动，我们也会帮助做一些推广，引导到小程序，或生成二维码做地推。关于全链路的数据，很多公司可能有自己的bi系统，想把数据拿回公司沉淀自己的数据资产，友盟+也会提供相应返还的能力。友盟+目前有一个 整体的产品矩阵 ，不仅支持多平台小程序各种各样的包括运营基础统计、高级洞察，问卷分析的能力，同时在app端和外部端也都提供相应的能力，并且在开发者工具箱里面，我们提供的是push产品，你可以通过产品分享的链路做一些追踪，包括人群的智能认证，AB测试这样的开发者工具箱，后续我们也会开发稳定性监测，实时埋码验证，小程序可视化埋码、数据返还、数据授权等功能。可能有同学好奇我们是怎么打通数据的？友盟+的互联网企业数据银行会基于云基础设施，如MaxComput等，不断帮助企业采集各种场景、触点的数据，做相应的数据治理、提纯、模型加工、形成各种应用服务，基于UMID打通能力，多账号归一，多端归一，支持不同的终端数据打通（移动客户端、服务端、客户端不同的平台），帮助企业完成全场景、全触点的数据资产沉淀及应用的管理。如果你是新零售行业，需要投放线下广告，友盟+的户外投放平台也可以做到。友盟+还会提供很多像 行业解决方案和客户成功以及咨询的服务 ，可以去对接在阿里巴巴、支付宝营销平台的广告投放，帮助你进一步监测像头条微信微吼等平台数据的能力。从公域的消费数据里面，你还可以结合阿里指数、生意参谋整体助力你公域和私域的全域数据方案。我们还有一期公开课内容是友盟+产品专家@杨成蹊老师给我们分享更多关于私域具体是怎么运营的，大家可以进一步学习小程序的运营。本文根据友盟+资深数据分析师、数据传承官@相峥，友盟+产品专家@范芊芸在起点学院公开课的分享整理而成，直播回放链接： http://996.pm/7dRLE ；添加小助手哒哒微信：da22133，可领取学习资料。题图来自Unsplash，基于CC0协议"}
{"title": "小程序成微信带动就业核心引擎，2019年带动就业岗位达536万个 ... ", "author": "Rolan", "push_time": "2020-5-15 00:01", "content": "[ 摘要 ]2019年微信带动就业机会2963万个，其中直接带动就业机会达2601万个，同比增长16%，2014年以来年均增长22%，间接带动就业机会362万个。腾讯科技讯 今天，腾讯微信与中国信通院共同发布了《2019-2020微信就业影响力报告》。报告显示，由公众号、小程序、微信支付、企业微信等共同构成的微信生态，具有连接超过12亿微信用户的天然优势，通过创造新型就业岗位、提高劳动者数字技能、促进人才供需精准对接，为国家稳就业提供了重要支撑。2019年微信带动就业机会2963万个，其中直接带动就业机会达2601万个，同比增长16%。2020年以来，面对新冠肺炎疫情的冲击，微信作为新生产工具，以丰富、完善的生态能力和数字化工具在稳企业、稳就业上发挥了积极作用。全民数字化就业时代来临，小程序日活超4亿成带动就业“最强动力”微信作为数字化经济的代表，随着其生态的蓬勃发展，推动了经济的快速发展，并创造和稳定了大量就业，据测算，2019年微信带动就业机会2963万个，其中直接带动就业机会达2601万个，同比增长16%，2014年以来年均增长22%，间接带动就业机会362万个。微信就业生态总体呈现出三个新趋势：就业生态从数字化岗位向岗位数字化转变——微信生态不仅催生了专门负责微信公众平台、小程序、企业微信、微信支付的服务运营、开发、设计和维护等新型行业岗位，同时也不断促进传统行业线上线下的融合，增添了大量数字化运营岗位，推动了各行业从“数字化岗位”到“岗位数字化”的转变，全民数字化就业时代已然来临。从稳定的雇佣关系向按需结合、灵活发散的就业方式逐步普及——微信小程序、公众号让劳动者能快速对接供需，微信支付让人们能够便捷的获取劳动报酬，促进了微信就业从“公司+雇员”的雇佣形式转移到“平台+自由职业者”的按需结合形式。此外，灵活的就业模式、丰富的就业渠道、较低的从业门槛也是微信平台就业的特点，微信在求职端为务工人员提供多样的工作选择，增加就业机会。微信作为新生产工具将成为数字化就业的标配——随着微信全平台生态能力的开放，微信小程序、微信支付、企业微信等也将继续深耕产业转型互联的核心需求，为行业用户及合作伙伴提供更有价值的微信产品“工具箱”。其中，小程序更是成为微信带动就业的核心引擎，2019年，小程序日常活跃账户数超过4亿，加速渗透生活场景，更直接带动就业机会536万个，相比2018年增长195%。微信生态打出“组合拳”，助力疫情期间“稳就业”2020年以来，新冠疫情的爆发对经济发展带来了巨大冲击，而数字经济是恢复经济运行常态、保障就业稳定的重要手段。在此次疫情中，微信生态的数字化能力为抗击疫情、稳定就业提供了强有力的支持。在疫情初期，企业微信就免费开放远程协作办公服务，推出了健康报备、内容协作、文件共享等新功能，优化企业复工后的数字化办公环境。据测算，69.3%的生态主体表示六成以上岗位可通过微信、企业微信远程办公。餐饮、服务、物业等行业的头部企业也借助企业微信和微信互通实现对外高效服务，线上营收得到大幅增长。餐饮企业西贝通过企业微信，1月份在线上添加了3万多名客户，全国每天200多家门店客户经理连接着9万多名顾客，并提供线上送餐和食材订购，线上营收占到了总营收的80%以上；知名服装品牌歌莉娅利用企业微信和顾客进行连接等措施，进行线上销售。10天内，每天的GMV都超过120万，最高一天将近300万。疫情期间，线上业务的爆发性增长，也让开发、运营需求，小程序直播带货、远程导购、公众号内容编辑、小程序开发运营等岗位需求大幅增加。据测算，11.1%的小程序开发者，14.5%的微信服务商在疫情期间增加了工作岗位，岗位总数增加59.7万个，有效地带动就业增量。中国就业培训技术指导中心5月11日发布《关于对拟发布新职业信息进行公示的公告》，拟新增10个新职业，包括区块链工程技术人员、社区网格员、互联网营销师、信息安全测试员、区块链应用操作员、核酸检测员、在线学习服务师、社群健康助理员、老年健康评估师、增材制造（3D打印）设备操作员。其中，在“互联网营销师”职业下增设“直播销售员”工种。在疫情期间，各地纷纷借助小程序轻量、便捷的特点，为广大求职人员和复工企业“牵线搭桥”。 西安航空基地与腾讯云联手打造了WE智造小程序，短短4天时间，帮助西安航空基地辖区60多家企业解决160多个复工过程中的棘手问题。在全国范围内，WE智造微信小程序已经被11个地区的企业用来开工复工，覆盖的员工数量超50万。微信生态还在求职端为务工人员提供多样的工作选择，增加就业机会，截至2020年4月，微信平台上就业、招聘相关的小程序有15430个，日活跃用户150万。其中2019年新增3710个，增幅达到34%。微信不断催生新职业、新工种，高效带动线下及重点人群就业微信通过多年来的生态建设，让就业门槛不断降低，整体就业生态呈现出年轻化、产业链条延长、线上价值带动线下就业等特点，并打破时空限制、解放体力劳动，促进了应届大学生、退役军人、农民工、家庭主妇、残障人士等重点群体的就业，同时加快了数字化就业岗位在三四线城市的普及。数据显示，微信就业人群中，年轻人、大学本科生是主力。55.8%的生态主体超过一半员工年龄在16-29岁之间。从学历分布看，55.0%的生态主体超过一半员工是普通本科学历。2018年，华南师范大学化学专业的研究生孔源丰独立开发了一款小程序——Lab管家，为广大科研人提供一个透明的实验室仪器信息平台，提高实验室仪器预约管理效率。上线6个多月，Lab管家小程序便获得4000多个高校用户，大大超出孔源丰的预期。微信就业门槛的不断降低，让以退伍军人、农民工、家庭妇女、残障人士等为代表的重点人群，也能通过快速学习掌握数字化技能，投身新经济领域。此外，以智力劳动为主的微信就业生态也催生了一批优秀的女性创业者，生态内女性就业比例达到47.5%。陕西镇坪县推出“协会+微信平台+残疾人”模式，利用微信带动35名重度残疾人累计发送便民、服务、广告及商业等信息20余万条，累计收入60余万元，月人均收入达3000余元，帮助残疾人增收脱贫。服务商作为微信生态的重要一环，也是新型岗位的“孵化器”，通过为用户等提供开发、运营、设计等多种服务，延长产业链，带动更多就业机会。微信也不断通过推出各类针对服务商的扶持计划，帮助服务商更好成长。据调查显示，2019年微信生态内小程序服务商、企业微信服务商、微信支付服务商总共带动就业292万人。服务全国70万家线下商户的武汉利楚扫呗，疫情期间累计为4000多家商户上线小程序。其中一家做生鲜超市通过利楚扫呗接入了到家小程序，上线后日均交易额达到了3万，比之前高出40%。此外，线上线下融合运营的智慧零售模式也为零售行业注入了全新活力，而小程序则成为商家落地并推进智慧零售的重要手段，带动了大量线下交易环节。随着新就业形态的不断涌现，就业方式也在向更灵活的方向发展。2019年微信带动的直接就业机会中有1519万个是兼职就业，占总直接就业机会近6成。来自广东的吴武泽通过自己的绘画知识，创造了一系列表情包，目前已上架了40套表情包，最热门的一套已经被下载了1.27亿次，发送量超过70亿。随着微信数字化工具的持续开放，微信生态中大量岗位可通过线上办公等形式分布在全国各地，有效带动各地就业，实现就业生态快速下沉。2019年，微信公众平台就业岗位在中西部和东北省份比例达到43.6%，小程序则为29.8%。来自河南南乐县的申志刚通过其创建的“依禾拼购”小程序，解决了古寺郎村胡萝卜“怎样卖出去”的难题。2019年11月9日，古寺郎胡萝卜首次在微信小程序后台上线，仅1分39秒，100份古寺郎胡萝卜售罄，上线三天内，累计销售额超过了20万元。随着产业互联网的发展被按下快进键，微信生态内数字化能力的开放也必将提速。以公众号、小程序、微信支付、企业微信为核心的各项新生产工具的应用也将更加普及，同时也将给数字经济注入更强劲的发展势能。"}
{"title": "直播的未来会在小程序吗？ ", "author": "Rolan", "push_time": "2020-5-15 00:11", "content": "图片来源@视觉中国文丨时趣企业CEO直播带货颇为吸金，董小姐从成交额20万到3亿打了一个漂亮的翻身仗，携程CEO梁建章直播七场，带货总额也突破了2亿。两者除了同样为CEO直播带货外，还值得注意的就是，董小姐两次直播分别在抖音、快手，携程则是选择了抖音、快手、小程序等平台。越来越多不同类型的品牌愿意试水直播营销，甚至会开始尝试不同的直播平台，做品牌直播矩阵。像抖音、快手都是现在大众耳熟能详的直播平台了，是品牌直播会优先考虑试水的平台。反观，微信小程序直播还处于公测阶段，直播流量和直播热度还是相对弱一些。与此同时，对于品牌而言，小程序直播还是存在许多“门槛”的。目前只有拥有自身小程序商城的品牌获得了直播邀请，才能直播；小程序直播间需要从后台进行组建开发，虽然官方称比较简单，但还是需要具备基础的技术能力；另外，小程序直播目前相对“简陋”，仅有评论、点赞和转发，且只开放了18个品类。不过，早先试水小程序直播的品牌们取得了不错的成绩，比如完美日记在2月份的小程序直播中，其场均观看人数环比增长3-10倍；茵曼微店在2月21日的首场直播中，即有超过100万人观看，收获了26万人点赞，直播评论超11万条,以及近期携程直播也有超过百万人观看。而且，结合腾讯刚发布的2020年Q1财报，微信及WeChat的合并月活跃帐户数达 12.025亿 ，小程序日活账户数超过 4亿 。不难看出，小程序还是具备一定的用户流量基础的。作为微信生态下的小程序直播，是否会占据后发优势，未来是否是直播的下一个红利风口，也未可知。通过体验对比各大直播平台，时有趣发现，小程序直播和其他直播平台存在以下几点不同：流量来源不同像在头部直播平台展开的直播，如果是网红主播的直播，用户可以通过直播结束后预告、微博或者直播平台的广告推流等获取直播动态信息；品牌自身直播的话，基本是以品牌自有发声渠道为主，比如微博、微信、抖音账号等。而小程序直播的动态信息，会相对窄众，目前 只有定向关注品牌的，比如公众号推文内链、社群、朋友圈或是主动搜索行为的，才会收到品牌小程序直播的信息。值得一提的是，小程序直播具有开播提醒功能，用户可以预约观看。直播开始时，系统会直接在微信对话框中提醒预约过观看的用户，让用户能够“循路”返回直播间，相对于其他平台，很大程度上降低了用户流失率。直播策略不同或许由于小程序本身是依附于微信的环境下，其流量来源更多是品牌自身流量，主动关注品牌的消费者为主，所以小程序直播的直播带货属性较弱，对于品牌营销的帮助更多体现在三个层次：一是复用品牌官微和社群等用户流量。以直播、视频的方式，帮助品牌激活唤醒粉丝关注，来吸引、触发用户对品牌产生行为，比如进入品牌直播间，观看新品展示等；二是存量用户运营，维护和运营粉丝。品牌在小程序直播间也会以优惠券、限时福利等形式刺激用户，其实也是一种日常和消费者之间的互动沟通，是社群运营的一种直播玩法；三是基于微信的社交属性，进行直播裂变，吸引更多品牌粉丝，换取更高的曝光。但主要还是以一二为主。所以小程序直播对于主播依赖的程度不高，大多是为品牌而来的。转化目的不同小程序直播是品牌搭建私域流量池的一个天然阵地，所以小程序直播不同于其他直播平台以销量转化为目的，品牌更多的是希望沉淀消费者，成为品牌的私域流量。小程序直播如果全面开放后，品牌可以在微信这个公域流量池，导流到自己私域流量池，并且依靠微信强大的生态链， 从微信公众号推文、小程序再到朋友圈、社群，最后是投放的其他微信广告，比如大V公众号植入软文、朋友圈广告、公众号底部广告等，再到直播间， 品牌可以了解到真实的流量导入，再将直播间来的流量引流到品牌社群，直接为品牌直播导流，形成自身流量闭环。随着越来越多的消费者和品牌涌入到直播这个营销阵地，直播行业经过快速发展的几个月，已经度过了早期缺流量和关注度的时点。时有趣认为，接下来直播将会面临三个重要的挑战：一是流量的争夺，流量很大程度上可以决定直播的GMV。直播前的预热导流将会铺的更广，尤其是大型直播活动，将会渗透到各种场景中，比如植入到综艺或做线下推广等，当然现在也是一个互相导流的现象，直播推广节目，节目或许也会反哺直播；其次，是内容。流量争夺是靠什么，除了主播粉丝力固有的流量池，还需要靠内容，而支持内容的却包含多个因素。一是内容设计，这个需要专业团队来支撑，未来直播甚至会像栏目制作一样非常精细，从埋梗、情绪点、直播高潮到收尾等，环环相扣，带动消费者进入到提前设计好的直播场景中，以此留住消费者，消费者甚至成为直播的“忠实观众”，准时守候，就像以前电视机时代，大家都等着电视剧播出；二是主播个人能力，控场和主播语言风格以及和消费者之间的互动、主播和消费者之间的关系。直播已经不再是单纯的直播带货属性，直播的营销角色也在逐渐延伸，比如直播带品牌、消费者运营和管理等。流量争夺后就是如何留住受众，内容是留住受众的第一粘着点，所以会发现有的直播已经愈发节目化，具备综艺感，以内容来吸引消费者，沉淀消费者；最后是转化，除了效果转化，还需要关注的是品牌转化，就是消费者是否通过直播转化为品牌的忠诚粉丝，从而会追品牌。无论品牌用哪一种营销方式、渠道，品牌营销的目的除了带货以外，终极目的肯定都是希望成就品牌。而小程序直播具备先天流量优势和私域流量转化优势，如果再结合优质的直播内容，或许将成为直播的下一个风口，满足品牌长线的规划，从追逐流量走向运营私域流量。不过，最终能不能实现这个过程，或者这个私域流量过程要用多久，还得看微信的速度了。"}
{"title": "定级P7，分享四面阿里面经，我想你一定也需要（附答案） ", "author": "Rolan", "push_time": "2020-5-20 00:02", "content": "17 年从上家公司离职之后就尝试过去阿里面试，结果还没进入状态就被凉凉了，在扇贝呆了 2 年多的时间，赶上正好租的房子要到期了，就想着再次尝试一下吧，结果还蛮顺利的拿到了 p6 的 offer，趁着目前在家里呆着哪里也不让去的功夫整理一下面试的过程，希望能帮到大家~一面自我介绍此处就省略了，一般自我介绍的时间感觉不宜过长，简单说下就好~从浅到深咨询一个项目因为我在目前公司涉及小程序比较早，并且那个时候还没有比较成熟的线上监控方案，所以我们自己搞了一个线上错误监控系统，然后我就拿这个项目来说了，面试官会仔细的从设计思路，运行原理等等方面开始问，一直问到后端数据慢查询怎么解决，这个问题的时间大概占了面试时间的一半还多，然后得到的经验就是大家一定要自己实际去设计和实现一些项目，不能停留在眼高手低只看不落实的层面，如果这个项目不是我带头发起和亲身实现了里面的一些流程可能很容易就卡壳了，在做的过程中遇到的问题都是很宝贵的经验，当然也是成长的一部分~简单介绍前端模块化，amd，cmd，commonjs es6 的 module很尴尬，因为我们目前公司都是直接用esm，再加上自己确实没在前端项目中用过amd 和 cmd项目的类库，然后再加上异常的紧张(一面的时候紧张到说话都喘气，哈哈)，然后只聊到一个是同步加载，一个是异步加载，没说出来一个是前置依赖，一个是就近依赖，面试官也很耐斯，听到我有点紧张也没继续问了，说了一句安慰我的话-现在已经不怎么用了~，哈哈哈commonjs 和 es6 的 module 哪个支持异步紧接着问了这个问题，emmm.. 当时差点没缓过来，冷静分析了一波，然后想到我们最近的项目中在做react组件第一步加载，想到了 es10 版本添加了异步 import() 方式去载入一个模块，所以答案毫无疑问是 esm 目前支持异步，其实返回来想想，如果用排除法这个也很简单，因为 commonjs 规范主要是给 node 层用的，node 层对于 module 的加载无非就是文件的读写，所以它根本没有必要去支持异步加载，读写 io 本身就很快~async await 和 promise 的关系这个问题是当初我第一次面试阿里的时候回答的不好的一个问题，所以面试官专门提出来问了我一下，当然现在看这个问题就比较简单了，async await 是 promise 和 generator 函数组合的一个语法糖，这个没啥好说的~口述代码，实现 promise.all 的 polyfill可能还是担心我这块不是很熟悉，所以又问了一个相关的问题，这个比较简单，我直接写代码，当时是口述的，思路是一样的；Promise.myAll = function(...args){ const result = []; let isFail = false; let errInfo; let j = args.length; for (let i = 0; i < args.length; i++){ // 如果有错误就停止循环 if(isFail) { return Promise.reject(errInfo); }; // 挨个运行promise args[i].then(res => { // 处理结果 result.push(res); j--; if(j === 0){ return Promise.resolve(result); } }).catch(err => { // 设置停止循环的标志，存储错误信息 isFail = true; errInfo = err; }) } } // 以上都是未经运行未经测试的伪代码，可能有问题，大致思路就这样~flex 布局，固定高度，左边定宽，右边自适应？这个比较简单，flex 布局给父元素设置 display:flex，左边的子元素 flex:none，给个 width:100px，右边的子元素 flex:1 就可以了，当然可能有别的方式，这个应该是最简单的~如果子元素不能 100% 继承高度，怎么实现撑满？这个问题我当时没反应过来面试官的意思，我问了一下是不是要纵轴方向的 flex 布局？后来面试官说 嗯。。也可以，这个过了。我就愣了，回来之后想了一下，不知道是不是说如果子元素无法 100% 的继承高度，那是不是可以结合定位的方式，比如父元素 relative，子元素 absolute，然后四个位置都是 0？不知道是不是这个意思~无法考究了~对 ts 的理解ts 用的不是很多，因为我们的项目大部分都是基于 h5 的，首先逻辑不是很复杂，因为每个 part 最多就三四个页面而且跟别的 part 基本没关系，业务决定并不是很适合 ts，所以也没在团队中怎么推广，但是有在后台项目，就是管理端用了 ts，所以简单说了一下 ts 和 js 的优缺点~ts 的泛型是什么作用一下没反应过来怎么回答，因为本身 ts 用的不多，泛型用的更不多，但是后来我想了一下 java 中的泛型，再加上面试官的提示，我给的答案是泛型决定了一个类型在不同的场景下能够在每个场景下从始至终的保持类型一致，有点拗口，但是应该就是这么个意思~假如监控系统别的组需要用，并且没满足他们的需求，你会怎么处理瞬间没反应过来面试官想问啥，因此说了一大堆，比如说要看自己的团队是否有时间，要看这个需求是否合理，要看这个需求是一个定制化的需求还是一个比较通用的需求，等等各种情况下怎么处理都给了自己的方案，然后面试官打断我说我问的不是这个意思，是问你是你来做还是别的组来做？我说还是得分情况看事情和时间的安排，然后就过去了~基本到这里一面就结束了，emmm，刚挂了电话，正好面试的部门有一个之前从扇贝离职去了的同事，面的还是很巧的同一个部门，大哥就跟我说恭喜一面过了。。哈哈，2 面开始就没那么紧张了二面隔了好像就两天 2 面就来了，2 面因为是晚上 8 点多才开始的，所以面试官本来说准备聊半个小时，结果还是聊多了设计一个通过拖拽，然后交换位置的组件，给思路就可以。emmm，网上有很多，大体就是关于拖拽的一些 api，然后怎么携带数据这些，我就不展开了~假如有 2 个团队，一个团队想用另一个团队的一个类库，并且还是想在用到的时候才加进来，怎么办？emmm。。我先说答案，是用 webpack 中的 externals 去配置一个 cmd 第一步引入，这个是面试官的答案，但是我印象面试官开始的时候没提到说要用 webpack，我一直在想的就是怎么异步加依赖，我就说可以让他们发布到自己的私服 npm 上，然后另一个团队安装，用的时候用 import 做异步加载。。balabala 说了半天，直到最后面试官来了一句你知道 webpack 的 externals 吗？我才反应过来~emmmm，好吧~设计一个组件你会考虑哪些问题？不得不说这个是个好问题，组件天天写，但是确实没好好整理过，当时问完我的时候，我是有点懵逼的，我在想就是看需要啥样子的就怎么样的设计呗，主要就是考虑一下扩展性，其实这个我每次开发的时候都会注意到，但是一下子竟然不知道怎么说了，balabala 讲了一堆，看需求分析啊，确定输入输出啊，考虑扩展性啊，别人怎么用啊之类的，其实我觉得面试官想问的可能是如何设计一个通用的组件，可以参考这个回到一个我简历上的项目，这个项目的核心是让运营和产品能够自己替换线上活动页或者落地页的图片资源和文案一类的内容，同时还有定点替换的功能，这个面试的时候还没完全实现，不过现在已经上线了一个简单版本了，用着还可以，等待后续再迭代，这个项目问了一下简单的思路，我还准备描述我们在 node 做的缓存，结果面试官说我了解了，emmm，可能太晚了吧，哈哈二面就结束了，完了看下时间，超了半小时，主要卡在第 2 个题目上，从始至终都没去向 webpack，这个确实还是自己的思路一下被限制的太死了，再加上我们通过 webpack 的 externals 去做的配置很少，基本就是简单的 jquery 这样引入过，后来为了方便都直接走 npm 装依赖了，其实还是要看场景，有时候偷懒确实是问题~~三面隔了三天左右，三面的通知就下来了，三面是 p8 的大佬，从头到尾都没问基础知识相关的内容；自我介绍省略。。主要做的是哪些业务？简单聊了一下在公司做的业务。。。为什么感觉你们的产品会比别人家的业务要好？这个问题涉及到一些产品的核心业务的卖点，没多说，讲了一点点。。看你在带一个项目，你一般都是怎么协调资源的？讲了一大堆。。后面的几个问题不记得了，基本上都是和业务相关的，还有和产品、运营如何沟通协作等等的问题。。三面基本都是涉及到业务相关的，总结下来就是我觉得越到后面面试反而更注重业务多一些了，这些东西不是临时抱佛脚能 get 到的东西，如果你对所做的事情不做更多的理解，对业务不做一定的思考，可能在这个环节会凉凉，我之前也一直有说我们每个开发都要做一个有灵魂的开发，不要把自己真的就只定义为码农机器，我们要加入自己的思考，比如，对接到的需求要有自己的理解，怎么样帮助需求方更完美的去实现需求，哪些该做的没有，哪些需求是伪需求不合理，都应该是每个人要学会和掌握的，至少在熟悉的环节要理解透彻~四面大概也是三天左右，四面的通知也下来了，是一个 p9 的大佬，比我想象的要老一点哈哈，所以小伙伴们不用担心我们吃的是青春饭，加油奋斗吧~什么是 h5?是 html 历史上的一个版本，也是一个协议，规定 html5 支持哪些、不支持哪些特性；举几个 h5 的新特性很多，比如媒体啊，storage 相关的等等我看你做过小程序，你觉得小程序，webview 和 h5 的关系？开始有点懵，我在想这应该是完全不同的东西吧，后来简单说了一下小程序，webview 属于是容器一类，它们可以用来承载 html 的内容，但是小程序的又不同于标准的 webview，它承载的是自己独有类 html 语法等等。。。4.你们的业务主要用的是哪些方式？native + webview 还有小程序，浏览器端只有后台项目，不是很多后面的问题都不记得了，反而感觉四面的问题比较简单，时间也不久，就二十来分钟，可能是因为晚上快下班了吧~总结三面和四面都是视频面的，我都是提前十分钟就在线等了，说话的时候面试官都能看到你的一言一行，还是注意点，把周围的环境也弄整齐一些，给面试官留个好印象~经历了大概 2 周的时间，顺利面完，最后的 hr 是现场面的，也问了很多个人相关的问题，hr 面的内容还蛮多的，并且 hr 面会涉及到一些技术相关，当然不是基础内容~好了，面试至此结束，不知道大家看到我所经历的这些面试题有没有什么感触，或者有一个目标清楚下面该怎么准备，而当你明确了自己的目标之后，接下来就是认真努力的去奋斗了，关注公众号：Java架构师联盟，每日更新技术好文"}
{"title": "APP、小程序、H5，开发载体如何选择？ ", "author": "Rolan", "push_time": "2020-5-25 00:06", "content": "文章从APP、小程序、H5的概念出发，从可用性、优缺点、用户体验和成本等4个方面对这三个开发载体展开了对比分析，与大家分享。Q：阿境，我想做个小程序或者APP。A：为什么要做小程序跟APP？想做什么类型的小程序跟APP？产品定位想好了吗？…….Q：你怎么这么多问题？因为现在小程序跟APP热门呀，所以想做一个。A：这样子吧，小程序、APP跟H5先了解下，你再决定。本文将整体概述APP、小程序、H5的含义，再从可用性、优缺点、用户体验、成本等方面来全方位讲解如何选择开发载体，今后选择将不再迷惑。同时，场景的不同决定着开发载体的不同，理性对待，理性选择。一、APP、小程序、H5是什么一句话概括了APP、小程序、H5三者的特点，相信朋友们也印象深刻，那么阿境就以概念的形式来说说，APP、小程序、H5究竟是什么？1. APP是什么？APP是application的缩写，翻译为“应用”，通常专指手机上的应用软件，或称手机客户端。在移动互联网时代，APP的出现，便捷了每个人的生活，同时，APP开发开启了每个企业移动信息化的发展。可以说， APP开展了移动互联的时代 ，是最早我们所能够接触到的移动应用载体。讲讲发展，APP自2008年，苹果对外发布了针对iphone的应用开发包，供免费下载后，便催生了国内众多APP开发商的出现；2010年，Android平台的应用呈井喷式发展；一直到2012年底，APP开发已成为当时的红海市场。直到现在，跨入2020年， APP仍然是主导着移动应用的市场。讲讲意义，APP的出现，以及其创新性开发，引来众多网络大亨们的一致关注及赞许。而随着智能手机和iPad等移动终端设备的普及，人们逐渐习惯了使用APP客户端上网的方式，而国内各大电商，均拥有了自己的APP客户端，甚至于部分的个人用户，也拥有自己的APP（少数）， 这标志着，APP客户端的商业使用，已经逐渐普及 。2. 小程序是什么？小程序泛指 无需下载便可安装即可使用的应用 ，目前市面上的小程序包括了微信小程序、百度小程序、各大厂商的快应用（实质上也是小程序）、以及在去年刚上线的QQ小程序等，这些都属于小程序的一种，但日常被人们提及的小程序，大多为微信小程序，本文介绍的也仅以微信小程序做例子。讲讲原理，其实现原理是 以H5为基础，基于微信平台提供丰富系统与平台的接口的web应用，这种混合模式我们一般称为hybrid 。讲讲特点，小程序最主要的特点为 “无需下载，即用即走” 。但实际上，小程序也并非所谓的“无需下载”，而是由于它“小”的特点，在你打开的时候，就已在短时间内下载好了，确切的说，用“无感下载”来描述，更为贴切一些。讲讲核心价值，其作用在于【连接】—— 提供一对一、一对多和多对多的连接方式，从而实现人与人、人与智能终端、人与社交化娱乐、人与硬件设备的连接 ，同时连接服务、资讯、商业。3. H5是什么？H5的全称是HTML5，是 HTML的第五代标准 （虽然这解释太过性冷淡！）。要注意的是，H5通俗的说，是一项准则，而不是一项技术。要明白H5是什么，那么就需要先了解下什么是“HTML”。解释下，HTML是“超文本标记语言”的英文缩写（Hypertext Markup Language），我们网上看到的网页，大都由HTML写成。随着发展，一代代更新，直到2014年，HTML5标准规范最终指定完成并向全世界开放，而在那几年，H5也成为当时的互联网热词。讲讲特点，H5的跨平台性尤为特别，可同时兼容PC端、移动端、Windows、Linux、Android与ios，可轻易移植到不同的开放平台、应用平台上，打破如今各自为局的情况。讲讲功能，H5可无需第三方浏览器插件即可创建高级图形、版式、动画以及过渡效果，这也使得用户使用较少的流量就可看到较完美的视觉听觉效果。不管是对于用户还是企业，都是友好的。小结上述太过理论化，如果你不想看，那么，阿境用一句话给你简单概括： APP丰满，但复杂；小程序精简，且互联；H5跨平台，也友好。二、APP、小程序、H5的优缺点对比APP，小程序，H5这三者目前已有多年演变历史及发展，市面上对于这三者的优缺点的介绍也数不胜数。这边阿境就自己的认知，简单列举三者优缺点（不做过多分析），以供朋友们对这三者有个简要的理解。1. 三者优点【APP】（1）运行速度快，体验好。（2）可使用底层的设备功能，如摄像头、方向传感器、重力传感器、拨号、GPS、语音、短信、蓝牙等；（3）在界面设计、功能设计、操作逻辑等方面，更容易做到流畅性、用户体验好。且 留存率高 ，用户一旦下载，相较于其他两端，留存的可能性大。（4）精准，超强用户黏性。一旦主动下载了APP，便是基于本身APP的内容有兴趣，同时APP会一直待在用户手机里，APP端便有了不断向用户传播信息，达到唤醒沉睡用户的机会。【小程序】（1） 背靠微信十亿流量 ；使得小程序更易获客，降低获客成本（附近小程序功能），同时可借助微信的社交网络引发爆发性传播，“在巨人肩膀搭积木”。（2） 连接线上与线下 ；推动线下用户习惯的养成，小程序相比APP更容易达成线上线下场景的连接与互动。（3） 触手可及，无需下载，即用即走 ，体验度接近原生，用户体验好。该概念是小程序一上线就开始打的战略，可做APP的整体嫁接，也可做简洁版功能的承载体，这一特点使得能代替许多APP。（4） 开发成本低、体验接近原生、高效的流量召回、积累自由用户 成为可能等【H5】（1） 跨平台性 （同时兼容PC端、移动端、Windows、Linux、Android与ios）（2） 开发周期短，维护成本较低 ，可快速迭代。（3） 开发相对较容易 ，对浏览器适配简单，简单易发布，直接上传即可，无需审核。2. 三者缺点【APP】（1） 开发周期长，费用多 ，不同的操作系统（Android与ios）需要独立开发，且维护起来也比较麻烦。（2） 获客成本高 ，用户使用需要下载。在没有一定知名度的情况下，使得用户去主动下载一个APP的成本高昂。（3） 更新需要上架审核 ，Android需在各大应用市场，ios需在App store上进行上架审核，受制于各大应用商店的规范中，上架后用户需重新更新安装。【小程序】（1） 引流能力有限 ，传播有限（转发朋友圈等功能受限），且用户留存困难，在小程序中留存的概念弱。该缺点也正是由于“即用即走”的特点，导致留存困难—无绝对的优点与缺点。（2） 受制于微信管控 ，功能的开发取决于微信的赋能，从功能接口，甚至于类别内容等，以及部分敏感内容（也可能是wx的竞争对手）还容易遭受到封禁等措施。【H5】（1） 用户体验差 ，每次打开页面，需要重新加载；（2） 加载速度慢 ，若是在网络情况差的情况下，网页可能加载需要长久的时间；（3）仅能使用部分设备底层的功能，蓝牙、短信、摄像头、麦克风等功能无法使用，造成 开发功能局限 。3. 三者对比【系统权限方面】（1）H5 本身可以说几乎是没有什么系统权限的。虽然也有摄像头之类的接口，但是重度依赖浏览器能力，兼容性有限。（2）小程序，由于依赖微信客户端本身，所以微信小程序团队将客户端的很多能力开放给了小程序环境，前提是微信也授权了相关的能力，比如允许访问麦克风，允许访问相册等。（3）APP由于采用的是原生开发，可使用许多底层的空间及功能，系统权限也是这三者当中最高的。【管控方面】（1）H5 页面可以不用搞 HTTPS，有个网站就能玩。但是小程序，从后端开始就有限制，要求域名备案+HTTPS，一定程度上也是一点成本。（2）小程序依赖微信平台，因此微信平台要对内容安全等事项负责，比如想做有 UGC 的产品，小程序上线前期就需资质（3）APP则归属应用市场及App store的审核限定，同时也需要资质审核。【 分享方面】（1）小程序可分享到群，但不可分享到朋友圈，且只能在微信体系内运作；（2）H5可分享给好友，也可分享到朋友圈，同时可在浏览器上打开;（3）APP可分享到各大平台（受限制除外，例如淘宝在微信上的分享）【主动触达渠道方面】（1）H5 本身是没有用户触达能力的，如果用户关掉了页面，页面就再也没有办法主动触达该用户了。传统的营销方式都是采用邮件营销或短信营销等来触达用户。（2）小程序支持模板消息（现已改成订阅号消息），有一周的推送时间限制。只要用户使用小程序，就可通过某种操作收集 formid，即可在一周之内的任意时间触达用户。（3）APP可通过第三方推送（如极光推送等）推送信息给到目标用户，从而达到唤醒沉睡用户的目的。【其他】（1）留存率方面：APP＞小程序＞H5（2）流畅度方面：APP=小程序＞H5（3）简易功能成本：APP＞小程序=H5（4）迭代周期：APP＞小程序＞H5（5）追踪能力：APP=小程序＞H5由于篇幅有限，不再过多赘述，感兴趣的可以查看阿境整理的三者对比表。（如上图）三、如何选择开发载体？常常会遇到甲方大大或者部分老板的需求“我想做一款商城APP”，当彻底了解对方的公司情况及预算后，可能更适合他们的，是做一款商城小程序。那么， 如何选择开发载体 呢？该问题不能一概而论，这 三者没有绝对的好，也没有绝对的差 ，取决于开发方的 产品类型（行业）、产品定位（方向）、项目预算（金钱） 等多个维度综合考虑。那么，如何选择呢，阿境以自己与众多甲方大大的沟通经验，粗略分析下。1. 该开发APP还是小程序或者是H5？APP、小程序、H5说白了，都是一种前端的展示形式，选择哪种，取决于他们各自的特点及所携带的功能。首先需要了解的，是他们各自的优缺点，上文已经详细提到了。在了解优缺点之后，是公司的定位，以及做产品的定位。打个比方，工具类的小程序，会比工具类的APP更来得划算，工具类的软件，本身就是“低频多次”，那么，在小程序满足其功能的前提下，选择做小程序远比做APP的成本来得低。下面会从几个角度上来分析，如何选择开发载体。从成本预算上来看，有钱有人有模式，那么APP是最好选择；若想小成本是错，则H5或小程序更加合适。H5和小程序则更属于在业务探索阶段的项目。毕竟同等功能下的项目预算，一个APP的成本等于两到三个的H5/小程序，但其体验相对好，且从长远的发展来看，更容易留存。从时间周期上来看，开发H5/小程序，远比APP更加快速。毕竟在开发配置上，APP需要Android开发跟ios开发，而H5和小程序仅需一个前端开发工程师，自然在测试方面，测试单端跟两端的时间周期，也是不同的。从流畅性及反应速度来看，APP跟小程序都是不二选择，H5则相对逊色。APP由于其原生的特性，加载页面仅需加载变化的部分，而H5其本质是网页，换页面时，通常要加载整个页面，就像是浏览器打开一个新页面一样（不清楚的朋友可以打开京东APP，及京东H5来对比下，一目了然），速度相对较慢。从功能开发上来看，H5及小程序局限性较多，选择APP更为自由。在原生APP当中，可调用系统底层的硬件（例如摄像头，麦克风等等），支持的硬件更多，更容易扩展。相对而言，H5便望尘莫及了；而小程序是在于巨头的笼罩之下，局限于微信的管辖，功能都需要有微信的接口支持，所以，功能也相对局限（虽然，近年来微信不断地为小程序赋能）。……如何选择，就需要根据以上多个维度来综合分析并取舍，最终来得出选择。假若你的客户或者你的上司要求做出来的软件开发周期要短，预算要少，流畅要高，功能要全，内存占据少，同时兼容各版本…..那么，在你看完阿境的碎碎念之后，你告诉他：“梦里啥都有。”2. 已经2020年了，小程序还是这么火，是否有替代APP的可能性？大家往往在现在有个推理误区： “张小龙说过，小程序会替代80%的APP。”于是乎，许多人推理得出”小程序这么火，那么，今后一定会取代APP。”阿境认为，这完全是个悖论。在以上分析“APP能否被小程序替代”这个问题的时候，我们上面在清楚了小程序及APP的优缺点之后（其实是啰嗦了一堆），这个问题也就不难回答了。小程序的核心价值高低在于解决实际问题的能力和体验。从用户需求的角度讲，用户不会在意自己使用的是小程序还是APP，而是更多的关注哪种方式操作更简单，流程体验哪个更顺畅，不容易占用手机内存等。这就意味着开发者推出的小程序若非体验和服务优于APP一个量级，否则用户在操作习惯上依然倾向原有的APP。以及若非高频的场景触发，用户很难在已有app的基础上再选择一个新的操作方式。而小程序能够替代的APP，基本是一些工具性，功能简单，较不常用的APP的功能（如日常打卡，电影购票，点餐，乘车服务类等），都是 基于小程序其“无需下载即用即走”的特点；而APP的功能更加强大，如微信、淘宝等APP，是小程序无法替代的。要注意的一点，80%不等于100%，有时候往往那仅有的20%，才是市场的一片天。写在文末从2010年的“我要做一款xxAPP”，一直到2014年的“我要做一款xxH5”，再到现在的“我要做一款xx小程序”，我们可以很清晰地观察看到， 互联网载体的发展，影响到市场的声音 ，这是一种发展的趋势。但 就这三者而言，并无绝对的优劣 ，看完文章的朋友们应该也能大致明白，场景的不同决定着开发载体的不同，理性对待，理性选择。作者：阿境，热爱产品的凡夫俗子。野蛮生长，产品汪一枚，做过电商、医疗、教育行业项目，有百万级流水产品经验。公众号：梦想家阿境本文由@阿境 原创发布于人人都是产品经理，未经作者许可，禁止转载。题图来自Unsplash，基于CC0协议"}
{"title": "微信：4月份小程序直播下单用户数环比增长220% ", "author": "Rolan", "push_time": "2020-5-25 00:11", "content": "5月22日消息，微信发布的“小程序直播进展简报”指出，自2020年2月小程序直播公测以来，开播商户数增长迅速。据介绍，4月份开通小程序直播商家数环比提升了90%，商家日均直播时长环比翻两番；5月1日当日直播时长达近5000小时；单个直播间最高被分享了20万次。微信方面称,随着零售行业全面复工复产，目前已有数万个商户开通小程序直播。​4月小程序直播下单用户规模环比提升了220%；观看小程序直播的用户中，30-40岁的用户占比为29%，女性用户占73%；广东、江苏、北京地区的用户最爱看小程序直播。​据腾讯最新发布的2020年Q1财报显示，截至2020年3月31日，微信和WeChat的合并月活跃账户数为12.025亿，同比增加了8.2%。据《电商报》了解，其中,小程序日活跃帐户超过4亿。据悉，在一季度财报投资人会议中，腾讯总裁刘炽平表示：“越来越多的零售企业正在将门店和品牌与消费者的直连作为投资重点，而小程序正是实现这一目标的关键基础设施。”"}
{"title": "解析“微快递”小程序的交互流程 ", "author": "Rolan", "push_time": "2020-4-3 00:04", "content": "小程序凭借用完即走、无需独立下载等优点成为了饱受用户青睐的一种产品形式，而“微快递”更是人们在选择下单寄件的主要小程序之一。那么这个小程序在交互上有什么特点呢、它的流程又是怎样的呢？针对这些内容， 笔者将展开分析。一、使用人群分析目前主流快递都推出了微信端下单寄件的服务，关于上线微信端的原因，主要原因有：寄快递对于大多数人来说是不固定、非频发需求，因此下载app的需求较小微信为目前最活跃应用，功能板块基本涵盖了人们平时的衣食住行等方方面面，因此上线微信端的形式也是方便用户使用用户需要寄快递，不愿出门或没时间单独去服务点寄快递，包括：平时习惯宅的，学生党们，不愿出门上班一族，白领阶层，平时早出晚归，很少有时间去服务点家庭主妇，平时忙于家务，带小孩，没时间去服务点其他，比如老年人，行动不便，不方便去服务点用户类型总结：使用“微快递”进行线上寄件的用户具备一定的文化知识水平，对先进的互联网科技知识接受快速，且有足够的认知水平；这部分人群有一定的审美水平，愿意用科技改变生活，对美好生活有足够的向往。二、用户核心任务1. 寄快递“微快递”小程序的核心业务就是寄快递，用户进入页面的根据自身的位置、收件人的位置以及快件的属性邮寄快件，同时用户需要支付几件的邮费等核心路径。2. 查快递查快递是“微快递”的又一重要的业务，用户根据自己邮寄的快件订单号或“微快递”提供的寄件流程可快速查看邮件的到达地点业务。3. 赚赏金赚赏金是“微快递”附加业务，微快递通过这样的附加业务赚取一定的广告收入，同时用户可以根据该模块的广告赚取一定的赏金。4. 积分商城积分商城是“微快递”为了增加用户粘性的一项活跃用户的产品，“微快递”通过与中国移动的合作，使用移动积分可以换取寄件的抵用券，该抵用券可以为用户抵扣快件的费用。三、核心路径1. 页面任务流2. 其中主要的核心页面包括A.首页——B.寄快递页面——C.下单方式选择页面——D.收件地址页面——E.批量寄页面——F.提交订单——G.完成支付，支付成功页面-H.查快递页面-I我的页面。四、存在的体验问题1. 交互问题整体的交互方式不是很友好，图标放的位置和传达的信息内容存在一定的歧义，在交互的手势上使用的比较少，例如下单方式页面，设计师可在这个页面设计下拉的操作手势，让用户满屏查看。2. 视觉问题整体的色调比较单一，调和色只有黑色、白色，给用户感觉整体页面没有生机，同时图标的使用比较老旧，不是很新颖，色块的面积不合理，例如下单页面个人认为给的不合理，太窄了，因此需要给内容流留够足够的浏览空间。（目前很多用户依然使用小屏幕手机）3. 产品问题在内容上：在“微快递”的整体内容比较单一，用户极容易流失，希望在业务上增加强关联的业务内容，吸引用户。五、 具体页面分析1. 首页线上问题描述：页面首页层级不清晰，用户进入页面不能根据视觉和交互的引导快速找到目标。页面美感、体验感较弱，用户进入首页给人的感觉是页面没有信任感和安全感（毕竟用户要付款、要寄东西、且将贵重的东西送给快递员的）首页作为浏览的分发入口，功能性没有体现出来，“微快递”的核心功能是寄快递同时也具备，赚赏金、查快递、积分兑换等业务，功能分发较弱2. 寄快递线上页面问题描述：首页优化方案将寄件信息归类，线上的寄件信息比较凌乱，用户在使用过程中不宜读，在本次设计中，我将不明显的信息进行归类，让用户能够快捕捉到必要的信息整体页面给用户的感受是比较严谨，将信任感传达给用户3. 下单方式选择页面4. 我的页面5. 设置页面本文由 @DS.Geng 原创发布于人人都是产品经理，未经许可，禁止转载题图来自 Unsplash，基于 CC0 协议"}
{"title": "微信三年谋局，小程序展现“胜负欲” ", "author": "Rolan", "push_time": "2020-4-7 00:02", "content": "在腾讯的产业互联网全盘规划下，小程序已经成为了关键所在。这篇文章从小程序的成长过程入手，分析了小程序过去以及未来的谋局策略。微信如何谋局？小程序如何成为关键“胜负手”？感兴趣的话快来读看看这篇文章吧。在腾讯全面拥抱产业互联网的全盘规划上，小程序已成为关键战场的“胜负手”。3月18日晚，腾讯发布2019年Q4及全年财报：微信月活再增长至11.65亿，第四季度日均消息数增长15%。小程序日均交易笔数同比增长超过一倍，交易总额超过8000亿元。疫情期间，小程序生态大放异彩。今年1月20日至2月13日期间，政务行业小程序用户环比增长近60%；医疗类小程序用户环比增长347%，教育行业小程序活跃用户环比增长485%；除夕到初七，小程序生鲜果蔬业态交易笔数增长149%，社区电商业态交易笔数增长322%。不仅是小程序平台的繁荣，这个庞大生态体呈现出的商业价值正在给腾讯贡献新红利——智慧零售。疫情期间，腾讯通过助力40+家零售商跑通“导购运营+社群+直播”模式线上迅速回血，2月部分商家小程序日销售额环比12月提升1100%。其中，26家小程序日均销售过百万，7家小程序月销过亿。图 /腾讯官方模式跑通背后，小程序的商业潜力也被充分挖掘。而最新的财报中，与小程序生态息息相关的两个关键指标——腾讯社交及其他广告收入、金融支付收入都保持了超预期增长。如果将企业发展比作下棋，棋势好比战略，在势厚时可以大胆进“取”，在势薄时则需耐心锻“造”。腾讯转型这盘棋，目前恰好处于“造势”关键阶段：看全局整体，仁者见仁；但若细观局部战场，某些决定性扭转已开始。01 小程序造富之路：从跳一跳到电商帝国小程序是一手经历了张小龙“长期思考”的落子。2011年，微信的横空出世，最终让很多投资人松了口气。风水轮回，六年后小程序诞生时，一度重演微信当年的舆论冷眼，但经历三年多市场大考，小程序价值被充分论证，并成为被券商眼中腾讯下一个十年的重要支撑。比如国金证券就坚定给出结论：我们认为腾讯已经找到了下一个战略增长点——金融科技。微信是金融科技业务成功的立足点，也是云计算、智慧零售等创新业务的支点。微信小程序不但是腾讯进军电商、线下零售的王牌，还促使腾讯云在PaaS/SaaS业务上取得先手。而2016年9月开放内测到被券商们作为研报题眼，小程序用了三年多的时间，相比移动互联网轰轰烈烈的速度，小程序更显稳扎稳打，最终成就了腾讯今天这一厚实的棋形——“处处可活”。如果复盘小程序的成长，可以看出它经历了三个阶段，在每个阶段里面，都用与生俱来的“用完即走”产品哲学以及深厚累积的用户认知来破局的。第一阶段是探路普及，既有线下扫码触达的用户普及，也有线上社交传播的用户共鸣。在线下方面，从理念中的在小程序刚开始出现在大众视野时，互联网最火热的变量是共享单车，以摩拜单车为例，需要扫描车身二维码再导流到APP，用户为了骑车还得耗费流量下载庞大的应用程序。而这个痛点恰恰与微信团队设计小程序的初衷对上了：小程序的用完即走与轻量感，一个未来必然的趋势，因为APP还要下载安装，网页的体验又太糟糕。这让摩拜选择尝试小程序，成了最早的线下用小程序的商家，也顺利让小程序打通了这一路径。在线上方面，2017年12月28日微信上线小游戏，同时重点推荐了“跳一跳”，一款充分击中用户体验感、真正意义上让小程序红起来的游戏。公开数据显示，截至2018年1月，跳一跳已经积累了3.1亿玩家，有史以来单款游戏用户规模达到的最大水平。至此，第一阶段的用户普及已经目的达成，接下来的小程序就顺势而为走向了电商化的第二阶段。首先是拓展线下合作伙伴，与摩拜单车一样的逻辑，很多线下产业都因为“用完即走”的轻盈感而开始探索小程序，并将小程序视为自己的必选项。比如最早首先打开智慧零售场景的永辉超市，在面对如何解决用户排队和数字化问题时，选择小程序来破题，小程序开发、上线后，其会员增速是以前APP推广时期的2倍，留存率是60%；沃尔玛也选择了小程序中的“扫码购”，后来做到了每天30%的支付通过小程序完成。再者是与线上合作伙伴共成长，这就有赖于微信在C端的强大用户认知优势，敞开大门，让自身转变为新商业模式的“处女地”，蘑菇街便是这一思路的经典代表，其借价格优势贴近下沉市场，通过拼团等社交化形式在微信中裂变传播，而小程序也为蘑菇街创造出更多即时性购买场景，让更多对互联网不敏感的用户更便捷地购买商品。在刚刚过去的2019年，无疑是小程序完成第二阶段的大成之年，兴业证券明确指出，轻度+O2O等多个用户场景拓展驱动小程序GMV翻倍。2019年，小程序电商已经进一步成为继传统电商、直播电商、社交电商后的线上新形态。从数据层面来看，小程序的交易体量也表现强劲，2019年小程序累计创造了超过8000亿的交易额，同比去年的数额增长160%，其中增长最快是电商和零售行业。其GMV体量已经与拼多多十分接近，GMV增速为160%，明显高于三大主流电商平台阿里、京东及拼多多。02 盘活生态圈：被疫情改写的用户习惯可以说，小程序的电商化布局已经到了收官阶段，接下来要盘活的是形成小程序生态圈这一路棋。一年前，张小龙就对小程序的未来有了清晰注解——“让创造者体现价值和回报”。他强调，“很多人看不懂为什么小程序要去中心化。如果不去中心化的话，腾讯自己垄断了头部几个小程序，那就没有外部的开发者什么事了。看起来腾讯可以短期获利，但这个生态就没有了。”今年1月，微信开放平台副总经理杜嘉辉曾对外指明小程序年度路径——“助力商家打造商业闭环”。小程序计划推出大量用于“商业化”的功能：直播组件、搜索页运营、订阅消息、一物一码、扫一扫识物、封面广告、交易保障等。让用户保持高留存，商家更容易赚到钱，盘活一个交投活跃的电商生态。与之对应的是，春节以来，小程序前后发布了“直播”和“订单管理”两大商业化工具，打造电商生态的雄心壮志颇为明显。从数据表现来看，仅38女神节期间，2000个主播累计直播时长近900小时，每个用户平均点赞数达到了280次，分享次数最高的直播间达到2万次。通过小程序直播，部分品牌的订单量增长近12倍，部分品牌交易额增长5倍，还有品牌单日销售额突破2000万元大关。而订单管理功能则进一步完善了小程序电商的交易环节，帮助商家提供更全面服务。现在，已有当当购物、戴森Dyson、洽洽优选官方商城、蓝月亮优选官方商城等多个小程序商家接入了交易保障服务，用户可以探索更多商家，进行交易保障服务的完整体验。目前，小程序交易保障的商家和服务商接入在内测中，微信将根据商家申请情况逐步开放内测，为优质商家提供小程序卡片背书标识、交易保障官方组件，以及搜索等更多场景的流量倾斜，带来更多交易与转化，实现品牌生意增长。在券商们看来，小程序正在成为大而全的线上生活场景。由于小程序连接C-B的天然属性，决定了其商业价值在未来将主要从B端获取，其商业化的潜力取决于该生态创造的社会增量价值。这意味着，小程序的第三阶段是招“一子解双征”的胜负手，成功的话就能让微信成功扎根消费互联网，拥抱产业互联网。在稳住C端用户矩阵和时长以外，开拓小程序新生态，用企业微信等产品矩阵一并培养B端用户认知，最终实现变现共赢。而即将到来的2020年第一季度，这组数据或将更加抢眼，因为战“疫”期间的小程序已经全面爆发，根据阿拉丁小程序统计平台和阿拉丁指数的估算，全网小程序在2月份数量突破390万，日活达到4.5亿。阿拉丁数据显示，战“疫”的在线经济高光时刻，大大促进了传统行业大迁移以及互联网企业大进军小程序：在最近两个月新增的60多万小程序中，传统行业是最多的，包括但不限于餐饮、商场、品牌、渠道等。这些都是过去需要花巨大成本和时间去教育的行业。因为疫情，倒逼了商家快速拥抱新技术去连接新用户。仅仅在2月份，接到中国知名餐饮和线下品牌实体店要做小程序的咨询数量就超过了过去一年的。以往少见的工具类工具类在2月份TOP100榜单中占比达 10%，教育类占比达到了7%。一旦用户的认知被改写，习惯就会被固定下来，无论C端还是B端，这将成为微信小程序生态圈最大的推动力。03 腾讯的先发优势：C端护城河给予的底气从2019年开始，各大互联网巨头已经意识到了小程序的战略重要性，纷纷布局，虽然这盘棋对手频频下子，但腾讯下得并不急，甚至有些“佛系”。给予腾讯这种徐徐图之底气的是他的C端护城河。如同腾讯每次在新业务上的攻城略地一样，他开局之本就在于从PC到移动互联时代，始终稳坐基础通讯工具的王座，而且，几乎没有对手。东吴证券曾经对此做过系统的分析，他们将用户的获取比喻为互联网公司的护城河，并明确这一定义的要点在于“用户”而不是“流量”。由此出发来分析不同互联网公司所处的流量层级，可以发现腾讯拥有的微信和QQ被归纳入了基础通讯工具层级，东吴证券说这是“互联网皇冠明珠”，通讯是最底层、最基础的互联网使用需求，属于必须、高频、覆盖面广的应用场景，用户规模的天花板很高，用户需求同质化，因此网络效应最明显，用户的获取成本很低，用户自身的转换成本却非常高，导致公司留存用户的成本就很低，因此最容易形成强大壁垒。这条护城河让腾讯的整个生态体系以通信为基础，微信和 QQ是整个业务体系的根基和树干，腾讯生态金字塔的基石，通讯+社交具有强网络效应和高转移成本，使得公司的用户资产非常庞大且稳固，然后在这个基础上通过游戏、广告、其他增值服务和金融与云业务变现。这个被完美的复刻到了微信小程序身上，基于不可撼动的C端社交优势，超过10亿的大流量底盘保障用户触达，其自带腾讯的社交基因，在社交关系和分享裂变方面存在着天然优势。展望下一步，小程序配合企业微信、公众号及支付业务，完善的交易生态正在形成：小程序为商家搭建了交易场景，而企业微信、公众号和微信支付则为商家提供了经营工具，包括营销获客、企业资金与成员管理、客户关系与售后管理等增值服务，近期企业微信客户朋友圈功能也正式开放。对腾讯密切关注职业投资人李国飞就在他的投资框架分享中反复谈及这个词，他说：“我们投资的公司一定要有强大的竞争力，如何评估呢？我认为标准只有一个，就是是否拥有很宽的护城河。”“只有那些护城河很深的公司，才能持续在没完没了的激烈的竞争中取胜，最终成为市值很大的公司。”而在他看来，护城河的深度最强的几乎都是互联网公司，比如转移成本非常高的代表，微信和Facebook，朋友们都在那里，一个人转移没用。而他特别提出的一点是，护城河的宽度要经常检讨，无论看起来是何等坚不可摧，柯达被数码技术彻底打垮，IBM几十年在一些对可靠性要求极高的行业如金融业有如同上帝一般的地位，但最近十年在廉价云计算的冲击下狼狈不堪。而在这个意义上来说，腾讯或许是个好棋手，这一次，他或许已经再次找到了维护C端护城河的“妙手”。"}
{"title": "Cool社区站长经验之谈：微信小程序学习路线 ", "author": "admin", "push_time": "2016-10-12 18:43", "content": "一、入门其实非常简单，在http://www.hubwiz.com/course/54ee8d2de564e519b8f8dad3/将这个JavaScript基础课程学完即可，大概花费一到两天时间，交互式学习，非常容易理解。二、然后开始阅读微信官方文档：https://mp.weixin.qq.com/debug/wxadoc/dev/index.html大概一个多星期基本上开发微信小程序没有太大的问题了。 （这里需要注意的一个问题是，如果你的小程序涉及到后端开发，那么前面的知识不足让你开发应用的，学习后端知识太耗费时间了，不如找个合作伙伴一起做，如果非要学习后端开发，那么我建议学习nodejs，nodejs是后端开发学习成本最小的，nodejs学习路线我就不写了，网上很多，如果想快速做微信小程序，最好别先学后端开发。） 阅读流程如下：1、下载工具并安装https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=14746440893592、学习工具使用https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=14746440896043、根据简易教程步骤来做https://mp.weixin.qq.com/debug/wxadoc/dev/?t=14746440829124、体验demohttps://mp.weixin.qq.com/debug/wxadoc/dev/demo.html?t=14746440831325、学习框架原理https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=14746440829126、学习界面组件https://mp.weixin.qq.com/debug/wxadoc/dev/component/?t=14746440912867、学习API使用https://mp.weixin.qq.com/debug/wxadoc/dev/api/?t=1474644087418 OK，动手自己做项目。 注意，要看微信小程序设计指南喔  ：https://mp.weixin.qq.com/debug/wxadoc/design/index.html"}
{"title": "微信小程序插件开发相关整理 ", "author": "Rolan", "push_time": "2019-7-30 00:29", "content": "插件的开发和使用自小程序基础库版本 1.9.6 开始支持。（如果插件包含页面，则需要基础库版本 2.1.0插件是对一组 js 接口、自定义组件或页面的封装，用于嵌入到小程序中使用插件不能独立运行，必须嵌入在其他小程序中才能被用户使用第三方小程序在使用插件时，也无法看到插件的代码。因此，插件适合用来封装自己的功能或服务，提供给第三方小程序进行展示和使用。会受到一些限制，如一些 API 无法调用或功能受限。还有个别特殊的接口，虽然插件不能直接调用，但可以使用 插件功能页 来间接实现。框架会对小程序和小程序使用的每个插件进行数据安全保护，保证它们之间不能窃取其他任何一方的数据（除非数据被主动传递给另一方）。开放范围及服务类目及开发接入流程简单了解开发接入插件调用 API 的限制插件的请求域名列表与小程序相互独立；一些 API 不允许插件调用（这些函数不存在于 wx 对象下）。有些接口虽然在插件中不能使用，但可以通过插件功能页来达到目的，请参考插件功能页。插件使用组件的限制开放能力（open-type）为以下之一的 button： contact（打开客服会话） getPhoneNumber（获取用户手机号） getUserInfo（获取用户信息）open-dataweb-view 以下组件的使用对基础库版本有要求：navigator 需要基础库版本 2.1.0live-player 和 live-pusher 需要基础库版本 2.3.0插件功能页插件功能页从小程序基础库版本 2.1.0 开始支持。某些接口不能在插件中直接调用（如 wx.login），但插件开发者可以使用插件功能页的方式来实现功能。目前，插件功能页包括：获取用户信息，包括 openid 和昵称等（相当于 wx.login 和 wx.getUserInfo 的功能），详见用户信息功能页；支付（相当于 wx.requestPayment），详见支付功能页；获取收货地址（相当于 wx.chooseAddress），详见收货地址功能页。要使用插件功能页，需要先激活功能页特性，配置对应的功能页函数，再使用 functional-page-navigator 组件跳转到插件功能页，从而实现对应的功能。跳转到功能页功能页不能使用 wx.navigateTo 来进行跳转，而是需要一个名为 functional-page-navigator 的组件。以获取用户信息为例，可以在插件中放置如下的 functional-page-navigator：<functional-page-navigator name=\"loginAndGetUserInfo\" args=\"\" version=\"develop\" bind:success=\"loginSuccess\">\r\n  <button>登录到插件</button>\r\n</functional-page-navigator>\r\n复制代码用户在点击这个 navigator 时，会自动跳转到插件所有者小程序的对应功能页。功能页会提示用户进行登录或其他相应的操作。操作结果会以组件事件的方式返回。从小程序基础库版本 2.4.0 开始，支持插件所有者小程序跳转到自己的功能页。在基础库版本低于 2.4.0 时，点击跳转到自己的功能页的 functional-page-navigator 将没有任何反应。用户信息功能页用户信息功能页用于帮助插件获取用户信息，包括 openid 和昵称等，相当于 wx.login 和 wx.getUserInfo 的功能。此外，自基础库版本 2.3.1 起，用户在这个功能页中授权之后，插件就可以直接调用 wx.login 和 wx.getUserInfo 。无需再次进入功能页获取用户信息。自基础库版本 2.6.3 起，可以使用 wx.getSetting 来查询用户是否授权过。支付功能页支付功能页用于帮助插件完成支付，相当于 wx.requestPayment 的功能。需要注意的是：插件使用支付功能，需要进行额外的权限申请，申请位置位于管理后台的“小程序插件 -> 基本设置 -> 支付能力”设置项中。另外，无论是否通过申请，主体为个人小程序在使用插件时，都无法正常使用插件里的支付功能。收货地址功能页收货地址功能页用于展示用户的收货地址列表，用户可以选择其中的收货地址。自基础库版本 2.4.0 开始支持。"}
{"title": "微信小程序---{{}}插值和MVVM模式&数据双向绑定&指令&API ... ", "author": "Rolan", "push_time": "2019-8-14 00:52", "content": "一、双花括号{{}}插值和MVVM模式1.1 体会{{}}插值index.wxml的标签不是html的那些标签，这里的view就是div。{{}}这样的插值写法，叫做mustache语法。mustache是胡子的意思，因为{{}}像胡子。<view class=\"container\">\r\n<view class=\"title\">\r\n    我是首页 {{1 + 1}}\r\n        {{a}}年！\r\n    </view>\r\n</view> 要在同名js文件下的data属性中定义：Page({\r\n    data : {\r\n        a : 100\r\n    }\r\n});所有的框架：Angular、React、Vue、ReactNative、小程序都是这样的“强耦合”的。之前我们js操作html使用：document.getElementById()这样的“不耦合”的方式，但是反而编程麻烦。 不仅仅{{}}可以出现在文字的部分，还可以出现在属性值的双引号中： <view class=\"box\" style=\"width:{{a}}px;height:{{a}}px\">我是盒子</view>1.2 体会MVVM模式<button bindtap='add'>按我</button>监听直接写在标签上，bindtap表示绑定轻触事件。注意，是bindtap=\"add\"而不是：bindtap=\"add()\" 'add'是一个函数，要定义在js文件中。注意：改变数据不能直接改，如果这样写，a的确会变化，但是视图不会跟着变化！Page({\r\n    data : {\r\n        a : 100\r\n    },\r\n    add(){\r\n        this.data.a++;\r\n    }\r\n});必须使用this.setData()函数来改变data值，此时视图才能变化。Page({\r\n    data : {\r\n        a : 100\r\n    },\r\n    add(){\r\n        this.setData({\r\n            a : this.data.a + 1\r\n        });\r\n    }\r\n});数据变化了，视图会自动改变我们学习的所有框架都是MVVM模式的，只需要关心数据，不需要关心视图，视图会自动变化。二、数据双向绑定2.1 调色板先说一个知识点，用户的屏幕是750rpx。所以如果盒子750rpx宽度，一定撑满的，375rpx就是半屏。 slider组件： index.wxss 示例代码  index.wxml：style行内样式的插值，实现双向数据绑定，就是data中的数据能够成为组件的默认数据。添加一个bindchanging事件，这个事件从手册上查的。添加一个自定义属性，叫做data-ys来区分谁是谁。注意，自定义属性必须以data-开头<view class=\"container\">\r\n<view class=\"box\" style=\"background-color:rgb({{r}},{{g}},{{b}})\"></view>\r\n<slider value=\"{{r}}\" bindchanging=\"changeColor\" data-ys=\"r\" max=\"255\" show-value block-size=\"18\"/>\r\n<slider value=\"{{g}}\" bindchanging=\"changeColor\" data-ys=\"g\" max=\"255\" show-value block-size=\"18\"/>\r\n<slider value=\"{{b}}\" bindchanging=\"changeColor\" data-ys=\"b\" max=\"255\" show-value block-size=\"18\"/>\r\n</view> index.js 事件处理函数：Page({\r\n    data : {\r\n        r : 100,\r\n        g : 200,\r\n        b : 123\r\n    },\r\n    changeColor(event){\r\n        this.setData({\r\n            [event.target.dataset.ys] : event.detail.value\r\n        })\r\n    }\r\n});event.target.dataset.ys就是当前触发这个函数的组件身上的ys标识。event.detail.value就是当前触发这个函数的组件的值。 也就是说，微信小程序的事件处理函数，一律不能传参！<button bindtap=\"add(5)\"></button>只能是：<button bindtap=\"add\" data-n=\"5\"></button>2.2 微博发布框class的动态实现：{{}}中不能出现复杂语句，比如不能有for、if、while、var，最复杂就是三元了。<view class=\"container\">\r\n    <textarea value=\"{{content}}\" bindinput=\"inputHandler\" placeholder=\"默认\" auto-focus />\r\n    <view class=\"{{content.length > 40 ? 'danger' : ''}}\">当前：{{content.length}}字/40字</view>\r\n    \r\n<view class=\"row\">\r\n        <button disabled=\"{{content.length == 0 || content.length > 40}}\">发布</button>\r\n        <button bindtap=\"clear\" disabled=\"{{content.length == 0}}\">清空</button>\r\n    </view>\r\n</view>index.js 示例代码index.wxss.danger{color:red;font-weight: bold;}\r\n.row{display: flex;}三、指令3.1 wx:if指令判定一个元素是否上树，而不是是否显示。<view class=\"container\">\r\n    <button wx:if=\"{{isAgree}}\">注册</button>\r\n</view> 当这个变量是true按钮上树，否则下树。 3.2 wx:for循环指令命令一个标签进行循环，使用wx:for。 index.js数据：Page({\r\n    data : {\r\n        arr: [\"白板\",\"幺鸡\",\"二万\",\"三饼\",\"四条\"]\r\n    }\r\n}); index.wxml：<view class=\"container\">\r\n    <view wx:for=\"{{arr}}\" wx:key=\"{{index}}\">{{index}} - {{item}}</view>\r\n</view> wx:for的值必须是数组，不能是对象，此时会自动遍历这个数组。 wx:for必须添加wx:key，表示循环这一项的标识，这个标识有什么用？连上服务器就有用了。增加效率 {{index}}、{{item}}是循环结构天生就有的，表示下标和项。3.2.1 九九乘法表因为空间太小，做五五乘法表：<view class=\"row\" wx:for=\"{{[1,2,3,4,5]}}\" wx:key=\"{{index}}\" wx:for-item=\"a\">\r\n    <view class=\"col\" wx:for=\"{{[1,2,3,4,5]}}\" wx:key=\"{{index}}\" wx:for-item=\"b\">\r\n        {{a}} * {{b}} = {{a * b}}\r\n    </view>\r\n</view>index.wxss.row{ width:750rpx;display: flex;}\r\n.col{ flex:1; text-align: center; font-size: 12px;border:1px solid #3bb; }3.2.2循环信息流index.wxml<view class=\"container\">\r\n    <view class=\"mingxing\">\r\n        <view class=\"box\" wx:for=\"{{mingxing}}\" wx:key=\"{{index}}\">\r\n            <view class=\"left\">\r\n                <image src=\"{{item.picurl}}\"></image>\r\n                {{item.name}}\r\n            </view>\r\n            <view class=\"right\">\r\n                {{item.info}}\r\n            </view>\r\n        </view>\r\n    </view>\r\n</view>index.wxss 示例代码index.js 示例代码3.2.3复选框-循环数组<view class=\"container\">\r\n    你的爱好:\r\n    <checkbox-group bindchange=\"checkboxChange\">\r\n        <label wx:for=\"{{hobbys}}\" wx:key=\"{{index}}\">\r\n            <checkbox value=\"{{item}}\" checked=\"{{false}}\"/>\r\n            {{item}}\r\n        </label>\r\n    </checkbox-group>\r\n\r\n    <view>\r\n        你的爱好是：{{myhobbys}}\r\n    </view>\r\n</view> 示例代码3.2.4操作数组-增删改查<view class=\"container\">\r\n    <input placeholder=\"请填写学生名字\" auto-focus bindinput=\"inputHandler\"/>\r\n    <button bindtap=\"addstudent\">增加</button>\r\n\r\n    <view wx:for=\"{{student}}\" wx:key=\"{{item.id}}\" style=\"display:flex;\">\r\n        <view>{{item.name}}</view>\r\n        <button data-id=\"{{item.id}}\" bindtap=\"delstudent\">删除</button>\r\n    </view>\r\n</view> 示例代码四、小程序API4.1认识小程序的API微信提供了非常多的API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。原理就是将JavaScript翻译为Java、OC语言。4.2使用请求数据的API微信小程序，域名只支持 https (request、uploadFile、downloadFile) 和 wss (connectSocket) 协议；s是security安全的意思。微信小程序，只能用安全模式的https和wss协议。 https就是http的安全版本，用来提供JSON数据等等； wss是websocket的安全版本，用来实时通信的。 域名不能使用 IP 地址或 localhost，且不能带端口号，而且域名必须经过 ICP 备案；对初学者不友好的，想跑一个上线的小程序，还得在服务上花一些钱。但是，在开发时，可以禁止上面的要求。 后端app.js提供接口 示例代码 wxml示例代码 小程会自动帮我们跨域，跨域的原理是代理跨域。 示例代码4.3模拟网络切换和监控在模拟器里切换网络类型，查看控制台的输出内容 在调试器里，输入以下代码并按回车键，进行网络监听： 示例代码4.4生命周期4.5小程序编译及编译模式  尽量让它越来越规范，这些文章都是本人的学习时的笔记整理，希望看完后可以指点一二，提提意见多多交流，自由转载-非商用-非衍生-保持署名。 笔记流程：html>css>javascript>jquery>html5/css3>移动端>ajax>面向对象>canvas>nodejs>es678>vue>react>小程序 联系邮箱：scarf666@163.com 有朋友私信问我是怎么学习的，在哪里学习的，感兴趣想学习朋友的可以私信我。"}
{"title": "小程序生态之路：阿里向左，腾讯向右——行业深度战略分析报告 ... ", "author": "Rolan", "push_time": "2019-9-3 00:02", "content": "本文目录序言：一、前言：二、行业背景：三、商业价值：四、支付宝VS微信，关于小程序的一些对比&流量的气液固态性质设想五、支付宝体系内价值六、微信体系内价值七、发展核心战略——策略八、总结九、免责说明序言小程序从兴起到现3年多的时间，但是对整个领域和生活的影响却非常巨大，在这里将会根据自己的一些理解和大家一起探讨下。以下是本篇行业报告的大体纲要：小程序是什么到诞生，及发展简史；小程序对于行业的价值、行业链条、行业现状；小程序的商业价值；流量的三项性质变化：固态、液态、气态，直白的阐述AT的战略指导意义；支付宝小程序的飞轮增长效应，流量的经济属性——阿里经济政体；小程序带来腾讯的护城河——流量瓶颈打破，小程序的社交流量双重放大镜效应，输血内生态和赋能截取外生态流量。本文的一些鲜明的观点：支付宝小程序带来的飞轮增长效应，微信小程序的流量双重放大效应，整合内外资源。流量的三项性质：固态、液态、气态，如社交流量相对活跃，频次大，交易流量相对不活跃，频次低，那社交流量就是气态流量，交易流量就是固态流量。流量经济属性：GMV≈GDP，经济政体式的新增涨发展。一、前言：1. 小程序是什么？小程序是什么？链接一切的应用或载体？这句话真的难倒我了，其实在我看来小程序无非就是一种载体，深入思考，本质上来说和各大应用商城里可以下载的各种APP没什么区别，和手机上可以添加的各种功能程序并无区别。无非就是相对封闭，加载的只是小程序，关于未来商业布局和生态相关的产品，把长尾化的APP无限加载于小程序，并与之产生不一样的价值，成为超级APP、多功能的APP。小程序，不需要下载安装即可使用的手机端应用；移动互联网时代里，小程序将赋能超级APP成为——超级聚合体APP，聚合人们大部分需求及交易场景的APP，小程序是基于某个超级APP的综合生态。从用户角度来看，手机的容量有限，而且有时候为了一些功能而专门下载APP，会有很大一部分人觉得相对比较麻烦；从产品的维度来说，互联网的APP只是满足人类各种需求的产品，小程序将各大应用场景下长尾APP比如公交地铁乘坐、挂号、外卖等一些列完成，那承载小程序的超级APP成为了一个更有价值的平台？以社交流量为载体——微信；信息传播流量为载体——今日头条、UC；以交易属性为载体——支付宝、苏宁金融等。2. 小程序的产生与特点2016 年12月28日，腾讯公司高级执行副总裁、微信事业群总裁张小龙现身微信公开课演讲，对即将上线试用的微信小程序做了介绍，并公布小程序计划于2017年1月9日上线。据介绍，小程序是一类嵌入于微信之中、不需要下载安装即可使用的应用形态。对比微信公众号（订阅号、服务号）的订阅、传播、推广功能，小程序的核心功能在于服务，链接解决人需求的一切服务。微信小程序有以下四大特性： 3. 小程序简要发展史小程序最早由于微信之父张小龙在2016年1月提出，2017年正式上线，2019年现在微信日活破2.3亿以上，超过260万个小程序，发展迅猛。在这个过程中，各大拥有超级APP的巨头们，逐渐集中注意力瓜分小程序流量。2019年号称小程序元年，无论是支付宝小程序团队的几十个月年终奖，还是现在无处不在的小程序，都告诉大家一件事——小程序已经融于生活，并且消灭了很多腰部APP的存在空间，逐渐演变为小程序生态（类似于应用商城）。根据张小龙的介绍，未来微信的定位不是流量平台，而是功能宏大跨越线上线下边界的工具，解决微信公众号信息过载的问题，是微信去中心化后，再中心化的一个过程。二、行业背景1. 行业价值1.1 核心价值价值：场景转化、流量变现、内资源整合、链接一切、提升效率，增加渗透及下沉场景。为C端用户提供便捷的使用体验，在使用已有核心功能的同时，能体验更加多样化的服务，使用户更多地留存，因此带来超级APP更多的用户增量及留存，创造更大服务以及交易价值，在基于庞大用户体系的情况下逐步为B端搭建基础设施服务（云、小程序、支付、大数据、金融、供应链），完成完整生态链搭建。1.2 会带来一些影响——浓缩为对用户的影响，用户-行业-线下对政府及人民生活的影响：融于生活的方方面面，更多时候刚需，但是使用频次不高或者没必要下载APP的应用，全部在小程序里去了。另外政府逐渐正式并且关注，一款名叫——中国政务服务平台的小程序，借由支付宝和微信上线，将会解决未来中国人所有一切关于政府、教育、生活一系列的问题，说明了未来依托于微信和支付宝小程序建立信息化中国国家的目标正在变为现实，查高考、查公积金、查政务等一些类内容都涵盖其中。对已有应用生态的影响：冲击腰部APP生存环境，改变了软件外包及开发市场的部分格局。因为小程序的存在，更多的企业不再完全以原生态APP为核心，而是以小程序相关营销及生态发生变化，腰部APP下载及留存量急剧下降，变为自家APP+微信小程序营销生态的变革。由于小程序的兴起，导致了市场上兴起了很多关于小程序开发的市场需求，价格相对原生APP低，且操作简单。对线下产业的影响：促进线下商业场景上移。小程序便捷易用特点有望提高O2O类营销用户转化率，未来生态渗透金融理财、物流、教育、交通、IT 科技、富媒体、生活服务等领域，使传统的线下服务商，特别是中小型企业形成O2O以及O2O解决方案，加速线上线下场景融合。2. 行业链条：小程序在近几年发展中已经形成了完整的生态系统上游（基础层）：支付宝、微信等超级APP提供载体，类似于微软提供Windows、谷歌提供Android系统的存在；中游（技术+服务层）：第三方服务平台，以专业小程序开发为主，为各行业及商户提供小程序开发；腾讯和阿里巴巴基于自身庞大的B端+C端用户而建立的云服务、金融、大数据等一些列服务；各大相关投资机构及行业观察平台；下游（应用层）：以面向C端各项服务的传统互联网公司，传统企业、小程序创业者等，解决用户各项服务的应用。3. 行业现状3.1 参与小程序竞争的平台方现状——两强争霸2019年，被认为是小程序集中爆发并形成稳定格局的一年，目前支付宝和微信两强争霸。微信小程序首先发力，阿里、百度、今日头条等企业跟进，就目前的市场容量以及普及率来说，小程序成腾讯和支付宝项目争夺的战场；百度已经式微，主营业务下滑市值腰斩，忙于通过AI等领域重新发力，小程序及百家号等方面无力争夺这个市场；今日头条忙于流量变现，电商的尝试，及广告业务方面切百度原有业务及市场；美团、滴滴等均在为盈利及业务增长努力，目前截止19年7月，这个范围内，大概率无法切入。3.2 小程序融入不同的行业里，线上线下一体化融合加剧点外卖、买东西、租赁共享等一些列应用场景都适用，目前缴纳水电费、办理违章、坐公交车等均早已在支付宝和微信的小程序内实现，并且逐步向全国各二三线城市逐步落地；查分数、查公积金、查社保都可以在小程序上来实现。值得特别注意的是，由国务院办公厅开发的中国政务服务平台的小程序偷偷地在支付宝和微信上线了，这是由国家主导未来来解决关乎人们生活、政府政策、教育、高考等一系列的问题，并且国家逐步认可了支付宝和微信的小程序的地位，通过腾讯和阿里的庞大用户量来快速落地未来政务平台的使用。第三方平台和相对应融资：有赞正式融资上市，目前市值70亿，专门为客户提供小程序微商城等一系列SaaS服务，最后一轮由腾讯领投；腾讯投资微盟小程序服务商微盟也被成为“小程序服务商第一股”，微盟小程序提供零售、到店、展示、餐饮及智慧餐厅、本地化社会服务等多种基于小程序的解决方案，最终在香港上市，市值近80亿。即速应用，微信小程序开发工具网站，2019年1月完成5000万的A+轮融资。资方、技术提供方、运营方、服务方——小程序生态链逐步完善，微信和支付宝的小程序开发者达到数百万人。3.3 小程序相关数据——用户，接受度及增长，体量用户在不断地接受小程序，并且快速增长：微信小程序累计用户达到7亿，2018年6月同比增长达到16倍，目前日活超过3.5亿；小程序总量达120万，二、三线城市小程序生态链逐步完善；支付宝小程序的累积用户达到5亿。微信小程序号称5000亿的价值，支付宝小程序也差不了多少，这个小程序的未来体量将会极其庞大。三、商业价值小程序的商业价值在于基于小程序建立的生态，将会创造多的盈利和岗位机会，并以此来建立自身在大数据、云服务、金融等一些列的基础市场，把鱼塘挖的更宽，完成一个巨大的湖泊，里面形成完整的生态系统。1. 小程序着眼于行业及环境的价值1.1 基于市场场景聚合高频和低频服务场景转移小程序，取代和占据至少50%的应用市场轻应用：替代尾部APP，或称为头部APP的补充应用，基于场景需求，快速链接聚合平台；高频服务：零售、餐饮，其实现在小程序上在拼多多、每日优鲜等买东西的人占有很大一部分比例；低频服务：生活服务、第三方服务，例如交电费、修水表、公交地铁卡等一些列的需求。张小龙认为会占据80%的应用市场份额，个人觉得50%以上的份额是会的。未来的更多消费或者场景都会以小程序、原生APP、网站三个维度来进行展开，作为每一个面向消费者服务公司绕不开的过程，由此产生的应用层的推广及流程分发带来巨大收益价值。1.2 加速互联网服务渗透和下沉，链接一切价值：场景转化、流量变现、内资源整合、链接一切、提升效率。增加渗透及下沉场景（以三四五线城市为主，中老年等未覆盖用户为主），电商、线下服务类、餐饮、工具类、游戏类小程序，在使用频次上快速增加。2. 针对平台方——超级APP，微信和支付宝的价值2.1 头部企业流量入口地位，增加商业价值让微信或支付宝成为超级APP，进一步得到升华，替代长尾APP，或替代低频服务的APP，多层次需求的满足，带来了新的大量流量。在市面上有很多应用能够满足匹配基础的人类需求，而小程序的价值就是把马洛斯需求定律的产品的基础层到最高层的需求聚拢，完成流量截取，创造更多的用户活跃以及交易价值，以此衍生更多的生态价值。当满足用户多样化的需求之后，自然会增加用户量，特别是交通地铁卡等一些例子，平时生活中必需的，却又不会下载的那部分应用，至少能够能够为其增加更多场景。让用户不需要重新打开其他APP，一站式完全满足各类需求。2.2 建立基于超级APP的生态体系1）为超级APP建立小程序生态创造条件小程序会逐渐转变为类似于操作系统、应用商城或APP store的存在，足够多的开发者，足够多的小程序应用，已经让小程序完美的上下游生态完善。提供足够好的框架，实际上支付宝和微信小程序内代码基本差异不大，微信为开发者供了自身的封装框架、公用样式和网络、数据、位置、设备、界面等多个API接口。微信小程序开发较为简单，开发者可以以低门槛足微信小涉程序的开发。2）催生基于小程序营销、开发运营业态的大量的第三方小程序开发、营销公司存在人们手机里的APP数量可能不会随便增加，只需要在小程序内能够达成或者找到的服务，意味着这些互联网公司，未来对新用户的推广、老用户的留存，将会是依托于微信和支付宝来实现，并且这些公司更大可能成为内容提供方，流量入口将极大地被腾讯和阿里巴巴截取。互联网已经从传统的电商，转变为移动电商、O2O等一系列成熟模式。但是微信和支付宝小程序的存在，由于庞大用户量带来的价值，变相吸引更多的服务于C端或B端的互联网公司加入，并且可以降低获客成本，逐渐加快了这一进程。3. 对于参与者的商业价值3.1 新的流量红利，部分产品获得全新的获客机会1）改变已有的营销方式及降低获客成本小程序解决了一个巨大的问题——获客成本降低。解决了获客成本较高的问题，企业可以通过营销直接社交化、定向化推广自家小程序，不用用户下载APP，基于微信和支付宝的巨大的品牌效应和信用背书，推广将比以前成本更低，不需要那么多成本。2）线上线下连接商家和用户的重要工具拥有了获取用户流量的机会，部分产品重生。例如低频刚需、或者高频产品，比如小程序乘坐地铁以及公交车，几个月内就单个城市增加了数千万用户，解决了大家出行问题，并且降低了地铁公交公司的应用推广成本。3.2 降低中小企业的开发负担，丰富移动化场景1）加快移动互联网场景化进程开发管理简单，降低获客成本，对企业和中小企业而言，小程序本质上释放了中小企业开发原生App 的负担，也降低了用户使用低频App的成本。可装可不装的APP统统不装，在小程序上直接实现使用，用完即走，最多收藏下经常用的那几款。2）小程序对重度高频App难以形成冲击，比如阅读、新闻、游戏等一些重度的APP，无法对其带来太大的影响大量低频长尾App原本就处于不好的状态，可借助微信小程序获得再生。目前小程序分为六大类，涵盖零售、电商、线下服务等一系列场景，包括金融、物流、教育、交通、IT 科技、富媒体、生活服务等十余个领域，应用场景及其丰富，应有尽有。四、支付宝VS微信，关于小程序的一些对比&流量的气液固态性质设想1. 小程序PK：支付宝VS微信支付宝小程序流量入口相对较少，并且以自家的体系内的为主，微信小程序流量入口较多，并且相对开放一些。支付宝比微信更早建立包含生活服务、资金往来、购物娱乐、财富管理、教育公益、旅游等领域的内部应用矩阵。微信小程序将进一步挑战支付宝线下渗透率优势，加剧BAT 巨头流量竞争。价值支付宝流量变现、链接一切、场景转化、商业效率；微信增加流量、内资源整合、链接一切、强化支付场景。现状支付宝小程序用户和开发者在不断地快速增加；支付宝小程序码暂未完全开放，市场规模性推广；微信已形成小程序生态。地位微信：10亿微信用户，6亿小程序用户，2.5亿月活跃用户；小程序+场景的流量和交易金额不断地迅速增加；小程序生态链完善，涵盖资方、技术提供方、运营方、服务方。支付宝地位逐步凸显，作为流量争夺重心。短板支付宝社交属性缺失，传播和流量相对弱势；微信商业化方向相对弱势。发展方向支付宝迅速整合支付宝小程序生态，吸引用户及商家流量；以信用体系为核心展开小程序商业化进程。微信增加用户粘性，小程序电商体系投资；内容延伸、工具方向流量倾斜，小游戏方向上促进用户留存和传播。目前市场差距正在不断地被缩小，存量市场就那么大，互联网人群就那么多，这是一个针对目前存量市场的挖掘为主的竞争，以及对非互联网人群的渗透。2. 流量性质变化，固态流量VS气态流量但是只有交易属性和社交属性达到一定平衡点后，产生的流量才会具备更大化的价值。例如当阿里巴巴的支付相关具备更多的用户使用频次、活跃度、留存及分享了以后，将会让已有交易规模和用户量继续增长。微信则是通过合理变现及转换之后，将会完美完成变现、流量下沉，搭建微信生态相对弱势的一环。支付宝流量，具备支付属性，由单个个体产生各项与支付相关的流量，活跃度和频次不够，是固态流量；微信流量，具备社交属性，属于多个人之间关联和产生的社交流量，过于活跃，是气态流量。小程序成为支付宝吸取用户更多使用场景及截取长尾流量的工具，成为微信通过流量输入达成流量变现的工具。五、支付宝体系内价值相关数据：截止2019年至今，支付宝全球用户超过10亿，支付宝小程序用户破5亿，支付宝APP活跃用户数达到7亿，花呗用户数超1亿；截止2019年5月蚂蚁森林用户超5亿，保险业务保有用户量超过4亿。有了基数庞大的用户积累，支付宝就想要通过小程序来开放技术能力，让技术门槛降下来，提供标准组件，方便更多的合作伙伴入驻，这样商家的服务能更短距离地触达用户，而且也让支付宝更加平台化，更有粘性，带来更好的使用体验。1. 截取长尾APP流量，增加支付宝小程序流量；增加支付用户数量，使用频次、时长和场景支付宝的核心价值在于支付，用户对于其的定义基本基于此。支付宝的支付流量相对固态，由单个用户产生的各类场景下的活动，是固态流量，频次、活跃度、场景仍然不够。但是阿里自身也无法直接完全全部构建所有场景。而这些长尾及各类场景流量，会给支付宝带来大量的新用户、活跃度、交易场景，因此必然通过自身超级APP优势，让更多的场景通过小程序参与进来，搭建更加全面的场景。最终固态流量，朝向更具活跃度、频次等的液态流量转化，创造更多新的价值。强化支付场景，建立支付宝小程序超级流量生态，同时狙击微信商业化生态发展。在小程序这块，门槛很高，足够有资格入场的玩家仅限于腾讯、阿里巴巴、今日头条等一系列的头部超级APP的玩家，自然支付宝小程序主要和微信争夺这个市场，其他玩家并没有太多机会来竞争。2. 推动支付宝小程序·飞轮增长效应从支付宝小程序正式上线4个月：10万个小程序，1.7亿日活，从内测18年4月至今1年3个月的时间，累计用户数破5亿，未来重点是线下场景。完美地诠释了支付宝小程序在阿里巴巴集团内的核心战略价值，并且带来的飞轮增长效应，完美连接C端用户+B端用户，整合阿里巴巴内部资源完成对微信小程序的快速追击。2.1 底层飞轮（阿里·支付宝·内生态）核心在于形成客户的网络效应，通过支付宝会员数和内生态服务，是指客户效用随着小程序用户数的增加而增加。主要指阿里·支付宝生态，是让静止飞轮转起来的核心所在。1）支付宝10亿用户完成原始用户积累，导入阿里生态体系内的小程序内，然后围绕提升用户体验，通过提供优质的服务来留住客户，增强客户间的网络效应，进一步扩大客户流量，从而形成正向循环，带动飞轮的高速运转；2）小程序的用户网络效应主要体现在：随着多维度消费场景的使用，促使小程序使用频次和用户数不断增长，带来交易金额、MAU等增长；3）随着用户数的不断增加，用户关于产品多样性需求的增加可能带来小程序产品多样性的扩张，同时，用户数增加使得平台用户关于小程序功能，直接优化用户使用体验，综合提升小程序用户价值。2.2 第二层飞轮（阿里体·小程序·外生态）核心在于形成多样化服务的网络效应，是指消费场景多样和常态化效用，通过支付宝流量吸引服务商数量和消费场景的增加，带来的流量和用户数量的增加也吸引了更多的消费场景加入，构建稳固的服务商网络效应。围绕满足多维度客户需求，提升客户体验，引入智慧零售、生活服务、餐饮、电商、第三方平台，极大增加服务场景。庞大的用户数，无需注册，打开即使用，入口多样化，能够快速地带来大量商家，以此吸引大量的用户，再结合其强大的客户网络效应形成生态从而再次带动客流量，客户流量和产品需求的增加反过来带动供应商效用的增加；通过构建小程序生态，支付宝小程序消费将会不限制于任何空间、满足各种用户需求，提高流量拉动营收。2.3 第三层飞轮（未来无界生态）交易无界，小程序连接和提供一切技术服务和平台，提供行业上下游不同用户的需求解决方案，而延伸出未来对未来万亿级B端服务市场的机会；未来更多的交易额和用户不断通过支付宝完成，带来用户数、交易金额不断增长，进而促进形成飞轮不断增长。产业链从上游直接到下C端都将是支付宝小程序所涵盖的内容，成为连接的关键点；其中基于不同场景的交易数据将会带来和产生极大价值。3. 以小程序为链接核心嫁接+赋能外部各类场景的核心，协同中台体系的内部资源整合，为小程序快速增长创造条件阿里中台用于支撑前端业务的标准化、模块化、通用的服务流程或功能，为了有效整合企业内部资源，赋能外部资源，提升资源复用程度，减少成本，提升效率。为未来万亿的市场空间做准备，结构化调整升级，成立阿里中台体系。第一解决公司内部组织结构优化、效率提升问题；第二，能否猜想为灵活高效的中台体系，是随时为B端市场的爆发做准备？链接外部商户数据，B端服务市场挖掘，分享供应链、金融、数据、区块链、云服务，小程序将成为数据小交互及场景交互的唯一核心连接点，为小程序用户量及规模不断增长创造条件。业务中台，提供重用服务，例如用户中心、订单中心之类的开箱即用可重用能力，为战场提供了空军支援能力，随叫随到，威力强大。数据中台，提供数据分析能力，帮助从数据中学习改进，调整方向，为战场提供了海军支援能力。算法中台，提供算法能力，帮助提供更加个性化的服务，增强用户体验，为战场提供了陆军支援能力，随机应变，所向披靡。技术中台，提供自建系统部分的技术支撑能力，帮助解决基础设施，分布式数据库等底层技术问题，为前台特种兵提供了精良的武器装备。研发中台，提供自建系统部分的管理和技术实践支撑能力，帮助快速搭建项目、管理进度、测试、持续集成、持续交付，是前台特种兵的训练基地。组织中台，为项目提供投资管理、风险管理、资源调度等，是战场的指挥部，战争的大脑，指挥前线，调度后方。4. 流量经济属性价值——在阿里巴巴经济委员会的成立的契机（小程序的关键作用）4.1 从传统商业模式，转化为经济体管理模式阿里巴巴的5万亿交易规模，可以以GDP排名于世界前十国家的经济规模，若以传统商业模式方向经营，未来的增长以及价值增长将会逐渐趋于平缓，为了维持快速增长，转化为经济体管理模式。阿里形成了一个新的模式，笔者命名为阿里经济政体（即阿里巴巴经济委员会）。以小程序作为基础的支撑，链接和赋能各类关键交易场景的核心。阿里经济政体：以增长阿里生态交易规模和盈利为中心，以治理国家的经济的方式类似，以谋求发展的组织；借助GMV≈GDP，这样的理念来进行组织架构改革。把与阿里相关的交易流量、一切经济活动（阿里生态圈）类似于增长国家GDP，做大相关交易规模GMV和阿里生态企业营收。基础层=小程序生态+电商+物流+支付附加层=云服务+金融+支付+大数据以基础层为基础，通过附加层进行价值增加，交易规模及小程序生态圈越大，收入越大，影响力越大；支付宝小程序将会成为驱动发展的连接点，并且成为未来发展的战略核心。4.2 挖掘小程序的工具价值，认可流量的经济属性价值认可支付流量具备经济属性，10亿全球支付宝用户为基础，如何将支付流量活跃，创造更大价值？小程序是固态流量转化为更具频次、活跃、多场景的核心，为支付宝自身搭建流量池的重要一环，未来将会产生更多流量源——用户行为和活动。当流量增加时，便会不断地朝向支付宝小程序带来的飞轮增长效应去发展，第一层飞轮增长启动。围绕着用户将会有更大的价值，吸引更多的商家来共同挖掘金矿，搭建基础层设施创造条件。这时第二层飞轮增长效应启动。最终第三层飞轮增长内容，将成为新的盈利点，不断的三层飞轮增长带来比以前更加快速的增长效应。4.3 固态流量变液态流量，阿里巴巴的流量经济和流量生态经济学小故事：《资金的流动》一游人到小镇一旅馆，拿1千元给店主挑了个房间。他上楼时，店主拿1千元给屠户支付了欠的肉钱；屠夫去猪农那还了猪钱；猪农还了饲料款；饲料商去付清召妓的钱；妓女赶紧去旅馆还了房钱；这1千元又到店主手里。这时游客下楼说房间不合适，拿钱走了，但全镇债务都还清了。经济流动才能产生价值，更多的小程序用户流量驱动下，将会激活更多的应用场景，吸引更多用户和商户，快速增长，支付宝将会有更大经济价值。流量经济：指的是像国家管控经济一样，通过拉动内需、创造平台让固态流量更多的转化为动态流量，产生更大的经济价值。支付宝的流量有经济属性，更多的运转和场景消费交互过程中才能产生更大的价值。支付宝有庞大的用户基础和流量，但是在以前因为频次、场景等各方面限制，没有产生更大的价值，现在正在因为小程序的加入，产生了更多的消费交易场景、服务场景，涵盖金融、快递、电商、出行等一系类和工作生活相关的场景。流量生态：就是引导，构建基础条件让固态流量变为动态流量的手段，让用户流量增长。微信小程序在流量上有足够的优势，在商业和生态不健全，但是在逐步完善；支付宝小程序在商业场景上有足够优势，相当于高维度来降维打击，但是未来需要创造基于小程序的生态来让流量上有足够优势，建立无界生态。支付宝目前做的比较好，据一些网络信息，支付宝小程序团队已经超过150名，然后累计使用支付宝小程序用户超过5亿，日活1.7亿以上，相较支付宝小程序最早上线前，用户数巨大增长，活跃用户数、支付单数、使用频次何止增长了5倍。未来也许支付宝相关的GMV也许将会成为全球第3大经济体，这正在通过阿里的经济委员会成立，以经济属性来管理和看待支付流量、用户等一些相关内容的环境下，逐渐成为现实。5. 能够让阿里信用体系具备巨大价值的可能，未来个人征信国家数据参考最重要来源当一款APP成为生活必不可少的工具时，它就已经成功了，现在越来越多的人离不开支付宝了。天然的支付属性下，支付宝必然比微信更加更便捷和便于发展信用体系，并且作为未来国家征信，银行贷款等一些列场景的重要数据来源。今年一款名叫“中国政务服务平台”的小程序上线于支付宝以及微信，意味着国家正视超级APP带来的价值，以及传播价值。支付宝“中国政务服务平台小程序”目前已接入46个国务院部门、32个地方政府的142万项政务服务事项办事指南以及近200项便民服务应用。小程序使用方法很简单，在支付宝首页搜索“中国政务服务平台”，点击进入即可获得电子证件、医疗、教育、交通、社保等多方面的政务服务。六、微信体系内价值微信社交流量不具备那么强大的商业价值，是气态流量，需要液化为液态流量才能够能加容易的变现出来。因此需要一个工具，或者说是转化器。1. 微信小程序——链接一切、打破瓶颈和流量下沉的价值1.1 链接一切，完成人与咨询-服务-场景的联系，以人的需求为核心，布局全场景下的流量截取微信小程序将连接无所不在的线下店铺、交通、休闲娱乐场景，全面打通日常生活空间。对于微信来说，小程序的价值并非简单的流量汇集和变现，而是将微信线上高频高粘性延伸到线下场景，服务、支付、互动、传播等环节均在微信体系内实现，使微信成为贯通10来亿用户线上线下生活场景的超级入口。1.2 打破社交流量瓶颈，小程序线上线下并进引流随着移动互联网用户红利逐步减退，线上流量获取成本持续上升，用户时间和注意力的稀缺程度上升。微信现有流量以移动端、高频度、高粘性、社交属性为特征，为了解决信息过载瓶颈，小程序线上线下布局社交流量外的其他场景流量。小程序无需下载安装用完即走，完美布局微信支付，整合原有App工具内线上低频中长尾流量。另一方面，原有独立于微信系统的线下交易、共享经济、生活服务等原有线下的服务需求融入微信生态之中，抢占线下场景碎片化休闲、服务、消费流量。1.3 截取长尾和高频流量，增加微信流量下沉场景社交流量是气态流量，活跃、频次、时长、粘性都非常的大，但是却有一个致命弱点。当流量仅限于聊天，而非交易时，那仅仅只是变成用户多、流量多而已了，无那么大的价值。但是当有成熟的下沉场景以后，比如游戏、文娱，通过庞大的用户量进行输血时，让腾讯成为了世界上最大游戏公司，占据中国游戏60%以上的市场，成为无可撼动的巨头。因此在这里，通过小程序截取的更多的下沉场景，具备更强的支付属性，向自身投资及优质的项目便捷输血，成为聊天工具和支付工具外，又具备轻型应用市场工具属性。截取更多长尾、高频流量，让微信变得更加庞大，拥有更多交易场景和流量。2. 微信小程序的流量价值·双重放大镜效应微信社交流量经过小程序导流、变现后，不断放大流量的价值，形成以微信社交流量——生态流量&体系外生态流量——六大战略组织架构变革再次挖掘价值，带来价值放大。腾讯社交流量成为放大的源头，经过小程序转化不断地放大流量的价值，增加应用场景，完善生态，最终创造更多的交易流量和其他流量，反哺自身。2.1 一张图看明白微信事业群变化2.2 第一层流量放大镜效应——导流&变现&流量截取当社交流量仅仅是社交流量时，并不具备太大的商业价值。例如当年火爆全国的飞信，又或是每人当年都在用的短信，虽然频次和流量很大，但是并未有较好的商业化流量变现。微信不缺流量，全球10亿+用户，日登陆7.68亿，平均使用时长90分钟，巨量的社交流量。可以借助一下两方面实现流量变现：1）小程序的导流和变现，转化社交流量，导流腾讯系投资生态，变现流量九宫格时期，社交流量到微信公众号九宫格的京东、美团等业务场景的导流效果并不好。当小程序上线后，便捷无比，可以通过微信68个主要入口快速的进入相应的小程序场景里，并且可以通过相应场景变现流量。小程序成为了微信流量导流自家生态的重要工具，通过投资和布局电商、游戏、文娱等，流量导入加速发展，并且变现。微信不缺流量，作为全球10亿+用户的超级社交APP，全球前二的社交软件，自身就是一个庞大的流量体，通过庞大的用户在视频、游戏、社交等领域取得足够好的成绩，但是并不够。因为社交流量本质上来说，交易属性较弱，因此小程序作为变现工具，可以快速将流量导入相应的场景里，与此同时构建小程序生态完成护城河，未来进一步发力做准备。2）赋能腾讯系外生态，截取长尾流量、高频流量，新的线上线下流量来源社交场景便捷转化为任何商业场景，直接输血各交易场景，链接一切、打破瓶颈和流量下沉的价值。利用微信庞大的用户量，社交传播的便捷性，小程序带来成本降低、快速场景转换、便于微信营销等的吸引力下，更多长尾型APP例如公交、阅读等，高频场景点外卖、购物、社交电商等，截取更多长尾、高频流量，让微信变得更加庞大，拥有更多交易场景和流量。最终形成了庞大的微信小程序生态，成为未来占据应用市场，各种场景下必然绕不开的入口和工具。2.3 第二层流量放大镜效应——立足于腾讯系内外生态流量，通过组织架构变化来适应并进一步放大流量价值巨量的C端用户流量、支付流量后，拥有庞大的基于小程序生态的B端流量，阿里巴巴的组织变化以及基于此的云、大数据、金融等一系列的发展，告诉腾讯，这里蕴藏巨大B端价值。腾讯组织架构的变化完全确认了第二层流量放大镜效应，特别是成立的完全向B端发力的CSIG——云与智慧产业事业群，将腾讯云、互联网+、智慧零售、教育、医疗、安全和LBS等行业解决方案。为什么叫小程序流量放大镜效应？因为不同于支付宝小程序能够形成的小程序·飞轮增长效应的指数级价值增长，微信小程序的价值，更多是基于已有的腾讯体系内庞大的社交流量的输出和变现为基础，单项输出体系内和赋能截取体系外流量，最终再将在生态体系内的流量挖掘出更多价值（云、大数据、营销、平台、金融等），更大的内容是直线式单项的流量流动社交流量——社交&支付流量——再次挖掘流量价值的趋势，因此是一个把社交流量不断转化并放大的过程。3. 流量变现，转化交易及电商，搭建流量变现护城河3.1 腾讯体系下流量转化交易，关于电商的焦虑腾讯在社交领域巨无霸的统治地位，拥有QQ和微信两大核心社交软件，社交已经利于不败之地，因为社交领域的优势，以此社交领域的个人ID和分发优势，发展成为社交+游戏+视频（视频和直播）+文娱（小说和动漫）的核心生态圈，并且成为全球最大的游戏公司。但是在电商和2B领域的失败，基于微信支付未来更加庞大的支付帝国的期望，因此产生了微信小程序，并且创造了小程序这个概念，无需安装，用完即走的概念。自此以后阿里和百度等开始布局和跟进，小程序的初衷已然发生了变化，已经成为长尾APP流量和交易场景收割的核心战略了，未来云、大数据、金融服务、支付服务等的核心布局。5000亿价值、超过600%的年交易额增长，超过1000亿人次的服务，日活过亿2.3亿，2019年有望小程序破230万个，3.5亿日活，微信小程序交出的答卷。3.2 完成流量变现，完成电商转化护城河微信在微信红包爆发之前，人们的映象一直都是一款聊天工具，腾讯一直在做电商，到最后没有做起来，战略投资为主，变向地在电商领域里占据了一大部分市场，并且完善了微信移动支付的布局。但是相对阿里巴巴来说并不足够。私域流量的概念兴起，成就了拼多多的短短几年的上市奇迹，社区拼团概念的火爆，何尝不是利用微信作为营销工具的存在；微信正好顺应发展趋势这些平台和公司创造条件，发力小程序端的基础设施以及流量导入，获取流量变现并获取更大的平台价值。打造微信生态体系，为未来云服务、大数据、B端服务打下基础，吸取商家、开发、用户资源，截取更多流量。安卓系统之所以有那么大的价值，是因为全世界数千万上亿的开发者在做开发，创造了安卓的各大应用。微信想成为那样的平台，更大胆一些去想，也许以后还能像苹果APP store的苹果税，像高通一样在芯片领域里，收高通税。这些其实都不重要，商户和公司多了，开发者自然多了，那基于这一些需求，无形中又创造了新的商业价值，基于微信小程序的商业生态圈，用户——各大解决用户需求的小程序——微信支付——分享营销——内容价值凸显等一系列未知的商业价值。4. 使微信成为国民级超级APP微信小程序68个入口，10亿+微信用户，1.7亿日活，100万+小程序，说明了微信小程序目前的地位，并且完美地构建了小程序生态，促使更多的开发者，应用不断地产生小程序，完美地去解决用户的各种需求，完美地截取腰部APP（近千万级APP）流量及用户相关活跃数据。一款名叫“中国政务服务平台”的小程序上线于支付宝以及微信，意味着国家正视超级APP带来的价值。小程序成为一款国家背书的超级APP，解决每一个中国人从出生开始会面临的一些列和政府、教育、生活、金融一切相关的需求。七、发展核心战略——策略这里仅仅是对未来的一些最简单的畅想。1. 发展战略链接一切消费场景，满足用户所有需求，逐步完成对不同行业线上和线下的数据化和改造；利用各类应用场景全方位发力，转化更多工具类小程序流量；促使支付宝和微信成为全球小程序生态最健全，拥有最大的用户和商户的最大轻应用平台；完成阿里巴巴和腾讯内外资源整合，获取更大的平台价值；未来亿万B端市场布局，搭建了未来商业的基建设施，和指数级增长的发动机；加大生态体系内的上下游资金投入。2. 运营策略转化流量，搭建小程序生态：金融类产品转化，银行、信用卡、金融等类型产品和软件；连锁零售品牌、连锁餐饮转化，全家、饿了么、连锁酒店、出行等；电商转化，易果、小红书、每日优鲜等；基于信用体系下授信——共享、租赁、金融借贷等场景；基于支付宝和微信小程序流量下的创业项目、新商业拓展、To B服务引入；开放型平台，吸引开发者、创业团队、搭建生态；引导C端用户基于生活（如社保、缴费等）、交通出行、支付后的场景跳转；设计产品流程，全行业多的标准化解决方案：提供开放型资源数据服务，标准化的合作流程；抓取头部流量商家入驻获取流量，头部品牌、连锁商家、工具类持续引入；BD、运营流程、落地执行管控，总结并不断优化；小程序生态的多样化产品服务场景矩阵，满足C端需求；例如：地铁交通、生活服务、政府等，电商、购物、金融等一些列小程序产品；打造并孵化第三方服务平台，例如有赞、微盟等项目，为更多商户创造条件；改造并指导性的运营策略，流量扶持，引导和优化落地项目的执行。八、总结最终小程序的生态战会一直延伸，直到满足当下用户的各种新老需求或者达到了一个新的平衡点。同时也给了头条系、美团等一些列的次级巨头们一些启发，最终本质上还是流量的争夺战，用户的争夺，数据流的争夺，商户的争夺。最终在移动互联网时代，将会一直呈现这样的竞争形态：当历史翻过一个篇章，达到了下一个时间段，AI人工智能、虚拟现实/增强，甚至是科幻世界中的芯片，那个时代将会是不一样的。现在，小程序将会是微信、支付宝等超级APP的助推器，加码生态体系后，带来最直观公司云服务、大数据、功能供应链、金融等一系列的增长，整合期集团内部的一切资源。最终互联网时代进入存量市场，60%以上的互联网应用及企业面临的选择将不会仅限于自家APP，亦或者小程序（微信+支付宝），这就是这个后移动互联网时代的特色。九、免责说明本报告仅代表个人观点，数据来源于互联网公开信息，分析结果属于笔者对这个领域的研究，不想浪费，以提供给各位对小程序发展，以及这个领域发展感兴趣的从业者，分析内容及结果未受到任何第三方机构影响，特此申明。如需私下交流或侵权等问题，请发邮箱：aigbert.li@qq.com，或加微信Aigbert-Aquarius，欢迎各位指正和交流。此报告，笔者研究了超过20份行业研究报告，以及几十篇互联网公开文章，在此对这些作者及媒体平台表示感谢，最后罗列笔者认为对这片报告帮助较大的一些专业报告，可以给大家作为参考。《2018年小程序生态进化报告》——即速应用《小程序2018-2019行业增长研究报告》——即速应用《2018年小程序生态下的竞争探讨研究报告》——亿欧网《2018年Q1小程序电商市场研究报告》——速途研究院《场景+链接数据视角下的小程序浪潮》——移动观察台《微信小程序营销生态》——金准数据《2017年小程序发展状况报告》——Talking Dota数据研究中心《2018Q2小程序监测数据&指数榜单发布报告》——阿拉丁 本文由 @LS邋遢道人 原创发布于人人都是产品经理，未经许可，禁止转载题图来自 Unsplash，基于 CC0 协议"}
{"title": "小程序中场战事 ", "author": "Rolan", "push_time": "2019-9-25 00:03", "content": "文 | 韩志鹏近几日，小程序赛道颇不宁静。前脚微信小程序刚宣布新增视频广告组件并支持嵌入腾讯直播，后脚支付宝小程序则宣布将与微博打通，这期间，头条系也来凑热闹，旗下火山小视频悄然上线小程序。中秋节后，这一波小程序热潮，几乎是过去一年这条赛道的缩影。2018年6月前，世人尽知微信小程序，2019年6月后，百度、阿里、今日头条相继上线小程序，瞬时间，赛道变得异常拥挤，微信与新入局的玩家们轮番上演好戏。一年前，小程序只是巨头暗战；如今，小程序已是一片激战。小程序战场继续硝烟四起，但资本的唱衰声仍此起彼伏，不少创业者带着希望而来却满载失望而归，小程序究竟要如何演化？未来的小程序战争又是何种态势？这或许是当下悬在巨头心间的一把达摩克利斯之剑。支付宝：\t急行军作为小程序后发者，支付宝这半年仿佛一支急行军。9月17日，在支付宝小程序年度峰会上，支付宝宣布平台已累计上线超100万个小程序，稳居行业第二，月活用户突破5亿，这一数字较今年6月净增长超过一个亿。要知道在一年前，支付宝小程序的数量仅有1-2万。一年之内规模激增达百万级，这离不开支付宝对小程序的持续加码。自2018年9月支付宝小程序公测以来，其先后提出20亿元扶持开发者的“繁星计划”、3年投入10亿元激励小程序创业者的“STS计划”等。各类计划呼啸而来之时，蚂蚁金服CEO井贤栋也在当时高度评价支付宝小程序：这一定是我们未来三年最重要的战略之一。支付宝小程序在过去一年如同火箭般飞速发展，在阿里体系内被提升至战略高度，这种变化的个中缘由与微信不无关系。作为超国民社交应用，微信与WeChat的合并月活用户已达到11亿，和支付宝同为“十亿俱乐部”的成员，但支付宝面临的挑战却与微信不同。微信起于社交，用户在此沉淀社交关系，并连接起稳定的社交网络，但支付宝兴于支付，其重在工具属性，并帮助用户完成交易行为的最后一环。简言之，你会天天刷微信，但不会天天刷支付宝。当然，所有的商业模式都离不开交易，支付宝正是聚焦于这一端，而在其将使用场景从支付延伸至生活服务、消费金融的过程中，消费需求被进一步撬动，例如淘票票近80%的流量来自于支付宝。支付宝流量的弊端也来源于此，生活服务场景吸引来的人群“用完即走”，但支付宝需要挖掘更大的流量价值，包括复用率、停留时间等，以及更广范围的流量生态联动。小程序正志在扭转这一局面。小程序提供了更便利的入口，例如“哈啰单车”小程序只需扫码即可使用，但入口背后连接的是服务场景与规模级流量，用户在小程序内便可完成开锁、还车、缴费的全过程，且截止今年6月，哈啰单车近60%流量来自支付宝小程序。但所谓开锁、缴费，App端也足以实现上述功能，而小程序的优势在于“短平快”，用户使用更为便捷，去中心化的设置让小程序能做到“无处不在”。这正是支付宝想看到的局面。借助小程序，支付宝挖掘出大量未被开放的“流量处女地”，例如2018年其开放 “支付成功页”入口，上线“支付后推荐”功能，用户在支付成功后可以继续探索更多服务。支付宝小程序“支付成功页”据了解，支付宝小程序“享物说好物互送”开通该功能两天后，访问人数提升478倍，收藏量提升4069倍。不止于支付成功页，支付宝为小程序开通了搜索、收藏、线下扫码等多个入口。据即速应用数据显示，支付宝上述三大小程序入口获取的外部流量占比为77%。依托小程序的“短平快”，用户享受各类服务时无需下载App，支付宝也通过开放入口来持续挖掘流量使用价值，由此创造更多用户场景。当然，支付宝小程序的上限不止于此。在2019年的支付宝小程序年度峰会上，支付宝小程序宣布与微博实现全面互通，其主要呈现入口包括：微博私信、用户主页和信息流。例如在私信分享中，用户可将支付宝小程序直接分享至微博私信界面，而在信息流界面中，微博开放了一批可直接进行分享的支付宝小程序，但分发频次被严格限制，例如1小时只能分享一次。而在未来，微博的热点内容也会出现在支付宝生活号、城市服务等主要入口，支付宝的热搜榜内容也将与微博的热搜打通或者结合。支付宝与微博，一方强于交易，一方强于社交，微博能为支付宝带来内容与社交流量，支付宝能帮助微博实现交易转化，二者各取所需。不止于微博，今年以来，支付宝小程序相继与高德地图、UC、钉钉等阿里系APP打通，并且表示未来还将打通饿了么、闲鱼等APP。从阿里的视角观察，这种打通意味深长。支付宝用户为线上支付而来，饿了么用户为外卖而来，它们聚焦起流量池，但却是一座又一座的孤岛，流量之间缺乏联动，难以产生规模效应。小程序便能解决这一问题，其短平快的模式联动起大量独立App，对支付宝而言，在亟需流量深耕的背景下，每款APP都是一个独立入口，背后都是一类消费场景，连接起来就能构成庞大的流量生态。以汉堡王为例，其到店前通过口碑端小程序完成线上团购，到店中通过高德端小程序引导办理会员卡，到店后通过支付宝小程序自助点餐，这使汉堡王在短时间内积累起千万用户。阿里系内流量、能力的多端打通，这正是支付宝小程序的关键使命。自公测以来，支付宝对小程序的加码力度远超当年的微信，因为在流量越来越金贵的年代里，入口转瞬即逝，支付宝就更要加速占领入口，连接更多场景，巩固用户流量的这张网。显然，支付宝还将在此道路继续急行。当然，从外部环境看，起步较晚的支付宝为追赶微信也必将加速，但对微信而言，正式公测已过两年的小程序，现今又将如何前行？微信：\t行至深水区开放公测超过两年，微信小程序的前行极为克制。这种克制体现在方方面面，当支付宝小程序公测不到半年就上线中心化入口后，微信小程序在公测两年后才上线下拉桌面，且仅呈现“收藏小程序”和“使用过的小程序”。同时，包括小程序搜索、多浮窗设置这些能力，微信也是逐步开放，而类似朋友圈分享、智能推荐等能力，微信仍未向小程序打开流量窗口。“克制”背后，其实是微信商业模式的独到之处。微信坐拥全球11亿月活数据，其庞大的流量效应已无需赘述，但正如张小龙所“吐槽”的：每天有一亿人教我做产品，微信的规模级用户也是一把枷锁。如前所述，微信小程序的迭代步伐相对支付宝、百度都更为缓慢，而微信自身在各种创新层面也并不激进，例如短视频，微信在近期才开放“朋友圈小视频”自动播放的功能，而这是抖音才上线之初便已实现的。作为超国民应用，微信从未停止创新，小程序、短视频皆是如此，只不过当一款产品坐拥十亿流量之时，其用户拓展、商业变现的节奏和方式都将有所差异。与支付宝相比，微信的流量优势在于用户忠诚度无法被撼动，你可以卸载支付宝，但无法卸载微信。但在多年的用户积累之下，微信也暴露出商业模式的短板，庞大流量需要变现。因此，基于腾讯“开放战略”的思路，微信敞开流量大门，让专业的人做专业的事，让自身转变为新商业模式的“处女地”。拼多多便是这一思路的优秀佐证，其借价格优势贴近下沉市场，通过游戏化购物形式在微信中裂变传播，而小程序也为拼多多创造出更多即时性购买场景，让更多对互联网不敏感的用户更便捷地购买商品。据QuestMobile数据显示，截止2018年3月，拼多多的APP端活跃用户约1.44亿，微信小程序端活跃用户约2.33亿。开放流量，开放支付，微信借此弥补自身在商业模式上的短板，将流量导向更多交易场景中，不断实现商业闭环。这也正是微信小程序发展的大逻辑。在微信小程序的发展道路上，服务商扮演着重要的角色，例如腾讯投资的微盟、有赞和SEE小电铺，它们在零售、媒体等维度具备专业服务能力，微信便开放流量让它们赋能商家。微信官方数据显示，截至今年6月，微信小程序共有8200家服务商，上线了 63万个小程序，占到小程序总量的约27%。显然，微信小程序是在“搭台唱戏”，其向商家提供H5、订阅号、微信支付、二维码等各类基础能力，包括群聊、朋友圈等社交场景，留给创业者自我发挥。以腾讯投资的二手书销售类小程序“多抓鱼”为例，其以公众号为主要流量获取通道，再将有需求的用户导向小程序，让手握大量闲置书籍的人群更高效便捷地出售旧书，实现二手书置换。同时，微信也在不断深化小程序服务能力，包括与腾讯直播打通、开放短视频广告组建等，其通过细化商业能力来为更多小程序玩家创造商业价值。正如张小龙对微信小程序的定义之一：创造价值。当然，在超过两年的发展过程中，微信小程序已是独霸天下，截止今年8月，微信小程序总量达236万个，用户量突破7亿。此外，据QuestMobile数据显示，截止今年6月，MAU在1万到100万之间的微信小程序为4897个，MAU大于100万的为883个，总占比不足1%。和支付宝小程序“急行军”状态不同的是，微信小程序已行至深水区，从中走出了拼多多、同程艺龙这样的平台，微盟、有赞这样的服务商，正是微信丰沃的流量土壤为它们 “扶上马送一程”。不只是流量的促进作用，微信小程序的崛起也将不少目光吸引到这条赛道之上，并且让其它巨头看到流量深耕与变现的机会，让小程序市场变得火热起来。但身处深水区之中，微信需要不断细化自身提供的服务与商业能力，包括直播、广告等，在经历游戏、电商等一波小程序类目的爆发后，微信小程序正在回归零售赋能、连接B端、流量转化的原点能力。这正是微信小程序在深水区的行动路线。微信小程序进入发展关键期，支付宝小程序一路急行，巨头们纷纷涌入这条赛道，持续火热的小程序市场又将去向何方？五强争霸资本狂热、巨头入场，仅仅不到两年时间，小程序就达到了今日的火爆，这背后的个中缘由是什么？自2018年至今，流量红利见顶的情况愈发严重，存量市场的机会愈发减少且被巨头垄断，不少互联网新贵开始剑走偏锋，例如拼多多进军下沉市场，抖音抓住年轻群体。红利见顶的背后，App获客难已成定局，即使出现了ZAO这样瞬间引爆的产品，但没有雄厚资本支撑，企业很难在App市场杀出重围，增量蛋糕并不容易被分食。每家平台都在焦虑“流量去哪了”，据QuestMobile《中国移动互联网2019春季报告》显示，中国移动互联网MAU达到11.38亿，同比增速首次跌破4%。这种背景下，巨头们也感受到流量蛋糕抢食者的威胁，字节跳动让腾讯和百度感受到危机，拼多多让阿里感受到危机，BAT与互联网新贵之间的流量游戏还在上演，线上流量的争夺愈发激烈。同样地，线下门店也面临流量危机。线下门店与商家虽存在增量机会，但其弊端在于线下供给相对分散，门店之间难现网络效应，在满足用户集中性需求时捉襟见肘。同时，线下门店在向线上进攻的过程中也缺乏有效载体，App开发周期长且拉新效果不佳，尤其是在用户即时消费的过程中，App难以大面积推广。可见，面对流量难题，线上平台需要继续深耕，线下门店需要触达更高的触达率，但在APP增长走入瓶颈期之时，线上线下无疑都需要新的载体。于是乎，小程序登台首秀。如前所述，支付宝和微信都在小程序维度不断破除自身流量问题，并且连接了大量线下门店供给与线上需求，实现流量的再次深耕。QusetMobile数据显示，月活用户大于 500 万的微信小程序中，生活服务类与移动购物类的总占比超过三成，而在20万个支付宝小程序中，商业生活服务类占比接近 7 成。小程序让线下门店看到了新的流量入口，也让线上平台看到了新的连接方式和新的流量转化场景，零售服务类小程序自然也就火爆起来。当然，巨头们在小程序赛道的玩法并不止于此。在腾讯和阿里之外，百度也是小程序赛道的一大玩家，其通过开放搜索入口，让用户得以探索更多小程序和配套服务，增强平台的用户停留时间，这和支付宝的出发点有异曲同工之处。据百度Q2财报显示，其智能小程序入驻数突破15万，月活用户2.7亿，环比增长约49%，稳居行业第三。BAT之外，今日头条和360也在入局。目前，字节跳动已在今日头条、抖音和火山小视频等App上线小程序，和微信类似，字节跳动坐拥丰富的流量池，但同样面临交易转化的问题，其自身也通过大量布局App来将流量导向交易场景，这之中，小程序也是重要一环。同时，基于字节跳动自身的强娱乐属性，抖音和火山小视频上线的小程序多以游戏为主，例如此前抖音上极为热门的“音跃球球”。小游戏会带来用户激增，但真正具备变现价值的场景还是零售、电商，字节跳动的小程序仍要在上述领域持续发力。字节跳动主攻移动端，但360却另辟蹊径进攻PC端。今年7月，360小程序正式公测，其自我定位于一款运行在360浏览器PC端的轻应用。在移动端小程序大行其道之时，360主打PC端也有难言之隐，其在移动端缺乏王牌产品，流量沉淀不足，但PC端已成为过去时，360的小程序之路仍险阻重重。可见，一年前，战场上的绝对主角是微信，小程序行业仍是暗流汹涌，一年后，小程序五强林立，战场激烈程度升级，战争行至中场。不过，为什么是BAT+360+字节跳动？在流量红利见顶的今天，BAT与字节跳动是移动流量蛋糕的最大分食者，360则是在PC端有所突破，而这五强更是背靠庞大流量池并打通了商业模式，例如阿里在电商端的成就，百度成为信息流广告一霸。当流量成为珍稀物种，小程序正式迈入“五强争霸”时代。如今，流量争夺的战争愈发激烈，巨头们都抄起了小程序这把武器，不断深化流量价值并广泛连接场景。但流量蛋糕毕竟有限，每家平台都在绞尽脑汁守护流量池，抢占用户时间，即使有小程序这把尖刀，巨头们也更致力于补齐自身短板与强化长板，小程序赛道呈现出各自为战的状态，而这也注定小程序将是一场没有硝烟的战争。"}
{"title": "抖音新增小程序桌面，留存一环终于补齐 ", "author": "Rolan", "push_time": "2019-10-30 00:02", "content": "抖音小程序能力闭环已成！在经历半年的沉寂后，抖音小程序于近日正式上线“小程序桌面”，再次高调回归。一个是短视频的王者，话题热度常年居高不下，一个是移动互联网的流量新洼地，目前已吸引过百万开发者入驻。当王者踏入流量新洼地，无疑极具想象空间。一方面，抖音有趣有品的短视频内容和聚集红人的超强能力，天然契合游戏、泛娱乐和电商类小程序。另外，抖音5亿月活搭配上强大的内容推荐机制，又能保证这类小程序的分发和变现效率。两者相辅相成，可以相互成就。01 抖音小程序的快与慢抖音入局小程序，并不令人意外，毕竟如今有实力的互联网巨头都加入了战局。意外的是字节跳动的执行力——今日头条小程序上线不到一个月，抖音就开始行动了。2018年10月，抖音 iOS 3.0.0 新版中出现小程序入口，点击会出现“没有使用过的小程序”的提示，当时字节跳动工作人员对此表示：“抖音小程序还在小范围内测阶段”。▲抖音 iOS 3.0.0 新版中的小程序入口2个月后，“猫眼电影”作为首个小程序，正式出现在抖音 Android 3.7.0 版本，据36氪报道指出“小程序是张一鸣亲自盯的项目”，这在当时被普遍解读为挑战微信小程序的开端。进入2019年后，抖音更是狂飙突进。先是上线第一款小游戏“音跃球球”，接着开放商品搜索功能，用户搜索关键词即可获取商品的小程序链接，不久后正式接入一批小程序服务商。这是抖音小程序的“快”。“（抖音小程序）跟今日头条小程序用的是一套代码，”一位今日头条内部人士曾表示，目前字节跳动做小程序的模式，是头条小程序部门做一套技术，然后各个产品线开放小程序入口。也就是说，开发者在头条上做个小程序，可以直接复制到抖音，甚至西瓜视频、火山小视频等产品（目前火山小视频已经实现），其中没有技术改造的成本。▲火山小视频中的小程序入口但这种“快”，其实并未掩盖它在部分能力推进上的缓慢，甚至两相对比下似乎更显其“慢”。比如商户心心念念的“小程序收藏”，这一帮助商户留存用户的关键能力，直到一年后的近日才正式推出。要知道，“小程序收藏”已经成为当下所有小程序平台的标配，就算是今年6月份才入局的QQ小程序，在上线之初也已配置上了这一能力。“小程序收藏和小程序桌面的出现，证明抖音没有放弃小程序，对我们来说像注入了一技强心剂，毕竟我们前期投入了不少资源。”已入驻抖音小程序的多位商户在接受晓程序速报采访时均表示乐观。此外，也有不少商户表示苦恼，他们的共同点在于都看好抖音小程序，但都未能成功注册抖音小程序，“上线小程序收藏能力事小，放开抖音小程序注册事大。”据悉，抖音小程序目前在注册申请确实存在诸多限制，比如商城类目没法申请，整体申请数量有限等，这极大地影响了抖音小程序生态的快速发展。02 能力闭环已成尽管抖音小程序收藏能力迟到了，但庆幸的是，它没有缺席。它的到来，不仅如商户所言，极大地鼓舞了他们，而且也补齐了此前抖音小程序在留存环节的空位，实现抖音小程序的能力闭环。因为只有闭环的抖音小程序，才算真正意义上的“装备齐全”。“装备齐全”的说法并非无的放矢，在我们看来，抖音小程序的“装备”主要集中在“中心化流量获取”、“自运营工具”和“潜在运营工具”三方面。1. 中心化流量获取首先，“中心化流量获取”，抖音目前给出了两种渠道：挂载在短视频页面的抖音小程序，可以获得与短视频相同的流量推荐，不过这极为考验短视频内容本身；抖音官方上线了“抖音小游戏”这款小程序，作用类似应游戏应用商店，会对游戏类目的小程序进行中心化分发，而在此之前，官方是通过“抖音游戏”推荐小游戏。▲抖音小游戏中心化推荐入口的变化2. 自运营工具其次是“自运营工具”，抖音小程序给商户提供了解决拉新、留存和促活等关键环节的“工具箱”：（1）“拉新工具”上，目前存在搜索、拍视频/分享视频两大路径。搜索路径不必多讲，但可以重点关注其商品搜索功能，当用户形成在抖音购物习惯后，商品搜索给小程序带来的流量将相当可观。抖音小程序“拍视频/分享视频”的功能，形成了它独特的“小程序+短视频”打法，用户可以在小程序内选择拍视频晒好物，而这些晒出来的好物视频上会自动挂载相应的小程序，用户点击后又可跳转小程序。如此往复，将会对小程序起到“滚雪球”式的曝光效果，从裂变能力上看，似乎不输微信。此外，抖音小程序也支持社交分享，它不仅可以分享到抖音好友以及最新推出的群聊，还能够通过图片二维码的形式在微信和QQ中实现传播获客。当然这一点的获客能力要弱于前者。（2）“留存工具”方面，在“小程序桌面”上线之前，抖音小程序在这一块几乎是空白的。如果一定要较真，那达人主页也可以算上，因为用户也是可以通过达人主页的店铺入口和视频页入口触达小程序的，只不过这一路径对用户来说太长了。也正因如此，“小程序桌面”的出现才愈显意义非凡。“小程序桌面”的出现，使得抖音小程序有可能成为脱离具体达人账号的独立存在，后期如果能搭配上“抖音号-小程序相互关注”的能力，很大程度上能解决商户与达人在星图交易中出现的“只能给小程序带量却无法给商户抖音号带量，结果只能持续投广告”的尴尬场景。▲抖音小程序收藏功能、小程序桌面（位于抖音“我的-三-小程序”）（3）至于“促活工具”，抖音小程序在评论区顶部开辟了小程序固定入口，让用户在浏览评论时能够随时触达小程序。于内容平台而言，评论区是评估账号用户活跃度的一个重要指标，无论微信公众号、网易云村还是我们今天在谈论的抖音，他们的创作者都在有意识地运营评论区，只不过目前成型的只有网易云村而已。因此，未来运营好评论区这块区域，是很有可能成为抖音小程序商户的“杀手锏”的，简单如借助评论区置顶留言引导用户点击小程序，复杂点的在评论区利用小程序做抽奖活动、话题活动等，这是一块有待发掘的潜力区域。▲抖音评论区小程序入口3. 潜在运营工具最后是“潜在运营工具”，主要包括购物车、POI地址、抖店、商品识图、星图等，它们贯穿内容生产、IP包装、商品转化等环节，覆盖线上线下等众多营销场景。据悉，以上部分运营工具已经可以由抖音小程序承载。未来随着更多工具往小程序形态转化，抖音小程序完全可以作为平台最直接的抓手，将这些环节、场景更好地串联起来，并且通过多种能力更紧密的联动，帮助商家实现更有效的内容分发和商品变现。03 未来剑指何方？QuestMobile最新数据显示，用户在小程序上停留的时间越来越长，小程序的商业化变化方式也得以不断不断扩展。小程序已然成为新的创业孵化地。可以看到，在这块创业孵化地上，有着凭借小程序崛起的拼多多们，也存在着大量希冀通过小程序发展线上流量的品牌、门店。当这些创业者的需求汇集起来，对于互联网巨头来说就是流量变现的来源。此外，QuestMobile数据还指出，相较2018年，2019年腾讯系App使用时长占比降幅达3.7%，字节跳动系占比则增长3.1%，而对比2017年，2018年相应数据分别是-6.6%、+6.2%。这也就意味着，使用字节跳动产品的用户越来越多，并且正在逐渐蚕食原本属于BAT的部分流量。▲数据来源：QuestMobile而当下今日头条和抖音选择发展小程序，就是要继续增强字节跳动旗下产品与用户之间的粘性，提高用户在其产品上的停留时间。更多的时间，就意味着更多商业化变现动作可以提上日程，而这将有利于缓解字节跳动面临的IPO压力，也让字节跳动在其他产品孵化上有了更多尝试和腾挪的空间。不仅如此，小程序这把利器，也让今日头条和抖音有更多机会突破自身的产品限制，不止于内容资讯、短视频平台，而是往更加包罗万象的国民App进发。而这两大方向，或许才是字节跳动发力小程序未来剑指之处。 作者：RangeTsai， 公众号“晓程序速报”主笔，关注社交、短视频、小程序等领域。本文由@RangeTsai 原创发布于人人都是产品经理。未经许可，禁止转载。题图来自 Unsplash，基于 CC0 协议"}
{"title": "小程序代码包大升级，哪些行业会迎来颠覆式改变？ ", "author": "Rolan", "push_time": "2019-11-25 00:12", "content": "小程序代码包上限由8M提升到12M啦！这个看似小小的改变背后却大有深意！还有小游戏学院也正式上线了...本周小程序圈还有那些值得关注的事情？接着往下看吧...小程序动态1小程序或小游戏代码包总包上限由8M提升到12M我们发现，开发者社区赫然有一条来自于微信团队的通告：为了让开发者开发出功能更丰富的小程序，小程序或小游戏代码包总包上限由8M提升到12M。建议开发者优化小程序性能并将每个分包做得尽可能小，以便提升用户的打开速度，优化用户体验。开发者可登录开发者工具，在详情-项目配置中点击刷新按钮，获取最新的配置信息。晓程序说：看似小小的数字变动，这背后却并不简单：过去单一场景中相互跳转赋能的模式失效，意味着小程序矩阵玩法夭折在了跳转确认这一步。代码包的扩充之后，小程序可以承载更多的功能和场景，比如一些重度的游戏、多元化的服务都可以在小程序中实现，完全可以说是一个类APP了！2小游戏学院上线微信上线「小游戏学院」，这是一款集小游戏发现、创作者交流、创作团队实践、开发工具介绍等为一体的综合服务小程序，规划了「灵感」、「交流」、「创造」三大核心板块。在交流版块的「想玩」中，玩家可以为自己玩过的小游戏打分，写下自己的体验心得；也可以通过其他玩家的分享评论找到发现喜欢的小游戏。在「灵感」版块中，还有小游戏从业者的创作干货，满足用户从浅到深的内容需求。小游戏学院「创作」版块将为不同用户提供不同维度的技术服务支持。其中，今年年初上线的「可视化工具」最备受关注。晓程序说：看来微信想打造一个用户和小游戏开发者们交流的平台。3淘宝商家应用小程序大赛将零门槛开放数百API阿里举办2019淘宝开发者-商家应用（小程序）创新大赛。据了解，此次比赛面向个人、企业、自研商家、自研媒体、淘宝客等开发者，围绕淘系商家和消费者需求，基于淘宝小程序，将零门槛开放上百个关键API，包括交易、商品、会员、营销等核心业务能力，可通过服务市场向商家售卖应用，通过商品成交抽佣、广告分成等商业模式变现。晓程序说：一直犹抱琵琶半遮面的淘宝小程序终于要走到聚光灯下了，对于整条小程序赛道而言必然是极大的好事。目前在外界看来，淘宝小程序的定位还尚未清晰，这场大赛或许能给出更为明确的答案。"}
{"title": "支付系统：线上支付的对接流程 ", "author": "Rolan", "push_time": "2019-12-23 00:04", "content": "本文作者主要从入网流程、支付流程和对账流程3个方面对支付系统进行了梳理，与大家分享。做支付产品也有一段时间了，简单梳理一下作为线上商户从入网到对账的流程，也作为这段时间工作的总结。入网流程1. 确定支付方式首先需要确定的是支付场景，选择合适的支付方式。简单列一下主流产品端及常用支付方式：从用户体验来说，PC端支付方式可以选择聚合支付，即同一个二维码支持各主流支付App扫码支付；App端一般要支持微信、支付宝支付；而微信公众号、小程序支持微信也就够了，虽然也可以通过使用浏览器打开方式实现支付宝支付，但用户体验并不是很好。从产品本身角度来说，特别是跨端产品快捷支付是个合适的选择，而且由于快捷绑卡需要四要素验证，也实现了用户实名，但也因为需要用户输入四要素，很多对信息敏感的用户会排斥绑卡。网银虽然是个仅PC端支持且用户支付相对麻烦的支付方式，但却适合大额支付，限额相比其他支付方式要高上许多。银联云闪付、手机闪付的优势在于，银联总是很乐于搞各种满减、随机立减活动，优质商家可以多利用银联资源实现双赢。上面列举的支付方式主要针对C端用户，若产品面向的是B端用户，可以考虑企业网银或直接线下汇款。2. 确定收单机构确定了支付方式后就要选择收单机构了：如果是需要的支付方式比较单一，如只需要微信或支付宝，那直接入网微信、支付宝就可以了；如果需要支持多个支付方式且对费率比较敏感，可以尝试比较一下市面上的第三方收单机构，或是知名的第四方聚合支付公司，比较下其提供的产品及费率。3. 入网不同机构要求的入网材料不尽相同，但大致为营业执照信息、结算账户信息及经营相关信息，按照选择的机构要求准备就可以了。协议签订完成后，机构会下发商户号、证书等参数，可进行下一步技术对接。支付流程不同收单机构、支付方式接口都不一样，但是一般流程差别不大，拿微信举例主要接口如下：统一下单、支付接口、支付结果通知、查询订单、申请退款、查询退款及下载对账单。具体开发流程各收单机构文档都会写的非常详细，就不再赘述了，主要说几个我认为需要注意的点：1. 支付成功以后台通知为准这点我是确实吃亏了的，当时接手产品的时候大部分支付通道都已经完成了对接且线上跑了很久，所以并没有要求技术重新梳理流程。后来某天财务找我来说支付宝短款了，找技术查询才发现技术对支付宝订单的处理是前台回调成功，订单就更改为支付成功。一般情况下前台通知和后台通知确实状态是一致的，但是当不一致的时候后台通知才是准确的。这次问题造成了我司短款，印象深刻。不过以后台通知为准，如果通知晚了会稍影响用户体验，建议如下处理：当前台回调之后查询后台交易状态是否已经收到通知并更改为支付成功，若还是支付中，则主动发起订单查询接口，查询订单支付状态。2. 增加支付掉单处理设计产品除了要考虑正常流程外，也需增加异常处理，特别是涉及真金白银的支付交易，更为敏感一些。一般认为网络异常等原因造成的交易状态不明是小概率事件，但就实际处理中确实时有发生，所以建议增加支付掉单处理，即当未收到明确应答时，反查交易状态，为节省系统资源可设置合理的查询次数，且查询时间间隔递增。偶尔也会有个别交易掉单确实超过了系统自动处理的次数或时效，可以根据对账流程来进行差错处理。3. 重复支付处理重复支付大部分时候是因为支付掉单引起的，用户看到自己扣款成功，订单依然还是待付款会产生疑问，一般不会继续付款，但如果是一些限量、限时活动或用户未注意到扣款成功等情况，就有可能产生重复支付。可以做的处理是，在订单已完成支付的情况下再次收到另一笔支付完成的通知则进行退款，若考虑资金安全认为系统自动退款有风险，可以在第二日对账出现差异后再做处理。4. 增加退款重试机制如果结算时间是T+1且金额自动提现结算实体户，隔日退款容易碰到当日头寸或账户余额不足造成的退款失败。一种避免方式是推迟退款时间，如凌晨退款交易统一推迟至早9点后发起，但依然很难完全避免失败。二是系统增加退款重试，若退款碰到该类报错，则推迟到下午或晚上再次重试退款。对账流程正常情况下收单机构提供的对账文件与收到的结算款总是对的上的，系统主要关心对账文件是否与订单匹配。一般至少勾兑流水号、交易时间、交易类型及交易金额，而手续费以收单机构提供的为准。差异部分，主要有如下几种情况：1. 对账文件多用户重复支付，超额支付部分需进行退款；支付掉单，若订单未取消则更改订单状态为支付完成，若订单已取消则需进行退款。2. 对账文件少可能为日切造成的差异，支付记录参与后续勾兑，连续2天未勾兑成功，记录勾兑失败人工参与处理。3. 金额差异金额差异很少会出现，如出现差异需要人工参与看是否系统出现了问题。以上就是我的一点看法，比较浅显，有不足之处欢迎与我交流，作者：湘允儿，wx：x_yuner本文由 @湘允儿 原创发布于人人都是产品经理，未经作者许可，禁止转载。题图来自Unsplash，基于CC0协议。"}
{"title": "微信紧急征集这四类小程序，让你的小程序被更多人搜到 ", "author": "Rolan", "push_time": "2020-2-19 00:25", "content": "小程序，已经成了大家战“疫”不可或缺的得力帮手。了解疫情发展、预约和购买口罩、购买生鲜时蔬等需求都可以在小程序上实现。目前，物流服务、到家自提服务、医疗服务和电商服务类目的小程序用户需求较大，为了帮助用户更方便地获取疫情期间所需资讯与服务，微信小程序开辟了“疫情专区”专区，现紧急征集四类小程序接入！服务展示形式相关申请提交并审核通过后，开发者的小程序将有机会在小程序搜索-疫情服务专区中展示，获得微信官方的免费流量入口扶持：1小程序搜索-疫情专区用户点击“发现-小程序”搜索或在微信首页下拉打开任务栏搜索时，输入疫情相关的关键词如“新冠疫情”、“发热问诊”、“生鲜配送”等将直达小程序“疫情服务专区”；小程序搜索将根据用户的搜索意图匹配对应的疫情相关服务，如搜索“发热问诊”，会优先展示“疫情服务”等相关结果；搜索“生鲜配送”，会优先展示“餐饮生鲜外送”等相关结果。2安卓小程序发现页（灰度中，未全量）安卓灰度用户可在发现页-小程序-疫情专区查看对应服务。开放类目及入驻标准目前，用户使用频率较高的物流（快递+同城）服务、到家自提服务、医疗服务和电商服务（包括滞销农产品与疫情应急商品）四个类目已开放申请，更多类目将持续接入。1物流（快递+同城）目前，物流（快递+同城）服务开放类目为快递业与邮政。2到家自提服务到家自提服务已开放商家自营-食品、生活服务-百货超市便利店、餐饮-外卖平台等7个类目。3医疗服务医疗服务已开放医疗-公立医疗机构、医疗-互联网医院、政务-医疗3个类目。4电商服务 包括滞销农产品与疫情应急商品滞销农产品与疫情应急商品作为当下电商行业的重中之重，可申请入驻“疫情专区”。电商服务审核通过后，商家应按照入驻标准及平台规则及时发货、审核售后单，避免购物纠纷，若产生严重投诉，平台将按《微信小程序实物交易争议处理规则》等规则作相应处理。更多关于各服务的开放类目和具体入驻标准，开发者可前往“微信行业助手”公众号菜单栏“疫情专区”查看：申请流程长按识别下方二维码关注微信行业助手公众号，点击菜单栏疫情专区选择对应行业即可报名。微信小程序团队将在3个工作日内反馈申请结果。长按识别二维码希望我们的每一行代码，都能帮助到更多人。这场战“疫”，我们共同努力。"}
{"title": "新能力！小程序直播开始公测，无门槛免费使用，一天便可开发完成？ ... ", "author": "Rolan", "push_time": "2020-2-19 00:31", "content": "万众期待的小程序直播，终于来了。据晓程序观察（yinghoo-tech）了解，小程序官方直播组件已经开启公测，部分商家已收到公测邀请，商家通过直播组件，可以在小程序中实现直播互动与商品销售的闭环。值得注意的是，这是微信推出的首个小程序官方直播能力，是微信提供的一项底层能力。此前，被部分商家误解为“微信直播”的腾讯看点直播，其官方资料显示，是腾讯PCG基于微信开放能力推出的直播能力。这次，微信自己的小程序直播是真的来了，也是首次这么明确支持商家直播。小程序直播此时现身，时间背景值得“玩味”，就是如今的疫情大背景。要知道，去年年初开始，就有不少商家、企业“呼吁”小程序直播能力，希望能在小程序上捧红自己的李佳琪。因为，微信流量大、用户黏性高、平台内容多，天然具备用户看直播的场景，而小程序入口多、转化力强，与直播结合，是个天然的带货组合。微信的能力发布不会因为用户或者商家的单方面需求，还会考虑场景和时机等因素。此前所有人都盼着小程序直播的到来，但它迟迟未现身，如今却不请自来了，目的不言而喻。眼下线下企业受损严重，一位不愿具名的品牌方直言，目前旗下线下90%以上店铺闭店，基本无销售。而直播能带来一定的收益，扭转颓势。要知道，去年双11期间，就有线下门店导购直播出圈，把线下多年练就的本领转化到线上，实现了销售总体增长24.2%的业绩。微信推出小程序直播，可以看出就是希望在眼下这种关键时刻，通过能力释放，让危机中的商家更好地卖货，探索扭转颓势的方法。1关键词：高效、高效、高效！“我们差不多一天开发就完成了开发”。一位参与公测的百货商家对我们表示。如此快速的开发效率，原因有两点。首先，小程序直播组件是一款小程序插件，商家引入直播组件代码包后，只要进行简单的适配便可以开发完成。值得注意的是，基础库版本2.9.1及以上的小程序才能运行该插件，因此想开发该能力，需先保证小程序在该版本及以上。此外，商家还可以根据自身情况调取订阅组件、直播回放获取、直播间状态和直播列表等接口。第二点，就是完全没有直播资质要求。目前，小程序直播支持两大类目。小程序商家为“商家自营”类目下的以下12个垂直品类。具体而言就是百货、食品、初级食用农产品、服装/鞋/箱包、酒/盐、玩具/母婴用品(不含食品)、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、家居/家饰/家纺、办公/文具。电商平台类目。上述两大类目的商家完全无需资质上传，自动检测数据符合标准直接可见入口，堪称“最快捷操作”。值得注意的是，使用小程序直播插件，无需单独的直播资质，即《信息网络传播视听节目许可证》《电信与信息服务业务经营许可证》。有商家对我们表示，“这等于免资质申请，要知道，那个《信息网络传播试听节目许可证》早就不发给新公司了，而且有效期只有3年。以前碍于没有直播资质，所以没法做，现在微信提供的这个直接帮我们把问题解决了”。据晓程序观察（yinghoo-tech）了解，微信能提供这样的服务，是因为小程序直播是由腾讯提供资质背书，也提供了安全检测能力，帮助服务商解决了无资质的难题。这样的效率提升对眼下大部分的商家而言，是个好消息，眼下线下店亏损严重，快速开发线上直播功能需求旺盛。开发效率越高，意味着他们可以越快启用线上直播扭转业务颓势。完成开发后，商家可以在PC端的MP管理后台实现直播的功能管理、运用，如创建直播间、添加商品、查看数据等。主播则通过「主播端」小程序，进行直播。用户在小程序上就可以观看直播内容了。“整个流程，大概20分钟就能熟悉起来，可以说是傻瓜式操作，非常快速了”。上述商家总结。在参与公测的商家看来，小程序直播插件从审核到开发到运营，最大特点就是高效。2腾讯看点直播VS小程序直播怎么选？今年春节期间，借助疫情的推动，很多商家都开始将精力倾斜于微信生态，包括尝试小程序分销、开启社群运营等，而对于私域流量的运营，直播也是其中一个需求。由于小程序官方的直播能力此前未上线，不少人在需求的推动下，先使用了腾讯看点直播这个基于App+小程序+直播的解决方案。一位资深电商从业者表示，行业中的直播工具很多，但作为商家，多方尝试的成本几乎可以忽略不计，因为一旦找到最适合自己的工具后，得到的回报也会更多。“很多商家都会愿意尝试小程序直播的，这和商家重视私域流量的趋势是一致的。”小程序直播和腾讯看点直播有什么区别？商家应该怎么选？晓程序观察（yinghoo-tech）做了一次评测。1、流量运维PK：小程序直播可以玩转私域流量无论在线上开店，还是线下开店，流量都是第一考虑要素。线下开店需要考虑位置能否带来客流。线上直播也一样。相比之下，腾讯看点直播是平台，更像一个“电视台”，由App和小程序两部分组成，商家在腾讯看点直播App上开直播间，通过社群传播、客服朋友圈发布小程序码海报等方式，将流量吸引到腾讯看点直播小程序上，进行直播转化。而小程序直播是嵌入在商家自己的小程序里的功能，商家小程序流量多，直播就有流量，小程序运营得越好，直播的流量就越大，换言之，流量多少完全看自己怎么运营。换言之，对于商家而言，使用腾讯看点直播，就需要将自己的私域流量导上腾讯看点直播平台，再进行转化，而小程序直播则是在商家自己的“底盘”——小程序上进行流量运营。这样的区别，在私域流量的运营上显得尤为明显。腾讯看点直播的平台定位，决定了对于直播过程中裂变来的新流量，并且还无法直接关注公众号，商家想将其沉淀到私域流量中，几乎只有一个办法，那就是在直播过程中的晒出微信号的方式，引导腾讯看点直播用户沉淀到客服号、社群上，进行私域流量沉淀。但这种私域流量的引导方式，场景割裂感较强。小程序直播则是商家自己小程序内的功能。通过公众号+社群+小程序直播的方式，可以无缝地运营私域流量。公众号可以推送文章植入小程序直播通知，引导粉丝进入小程序看直播；在商家社群分享里分享小程序直播页面的卡片，触达粉丝；粉丝进入小程序直播后，观看内容进行转化。整条链路，所有节点都在商家自己的“场地”上。而直播过程中裂变来的新流量，自动成为商家小程序的用户，商家可以在小程序里诸多场景中，引导用户关注公众号或沉淀到社群。此外，通过用户在小程序上的行为分析，商家可以更好地了解用户实现精细化运营。据了解，完美日记、热风、Lily女装等多个品牌已经通过公众号+群+小程序直播的方式进行社群粉丝直播营销，并达到了不错的销量。“从直播到购买再到私域流量沉淀，每一步都是一次‘漏斗’筛选的过程，转化有限。”一位商家对我们表示，整个过程越流畅越有利于私域流量的沉淀。总的来说，由于腾讯看点直播的平台属性和和小程序直播的小程序“内置功能”的定位区别，两者在流量上的优势大有不同：腾讯看点直播的优势是对现有流量进行转化，对于私域流量的进一步沉淀缺乏有效途径，小程序直播加上社群和公众号的组合拳，可以对私域流量做一次全面的盘活，为精细化运营铺路。2、边看边买&沉淀用户数据：小程序直播两手抓，腾讯看点直播难两全一个好的销售都知道，用户如果“出去逛逛再回来”，就意味着该用户大概率会流失，最好的办法就是让他在店内立刻转化。这一点上，腾讯看点直播和小程序直播都可以实现小程序内的边看边买，无需跳转，但具体上却有很大不同。先看小程序直播是在商家自己的小程序里边看边买，为用户提供了购物车功能，用户可以在小程序里直接购买商品，也可以将商品加入购物车，打包购买，整个流程不需要跳转，非常流畅。另一边的腾讯看点直播情况却有些“复杂”：由于腾讯看点直播是平台，所以商家需要在腾讯直播合作伙伴商城开一个店铺，如微店，然后将店铺内商品挂接到直播间，即可实现小程序内边看边买的流畅用户体验。这一种也是大多数商家选择的方式。但一些本身有小程序的商家，对这种直播带货的方式自然非常不感冒，因为如此一来，所有的流水和用户购买数据就都不在自己的平台上了。为此，腾讯看点直播给出的解决方案是，这类商家可以申请跳转自己的小程序商城，让用户从腾讯看点直播跳转至自己小程序下单。但这种操作有几点值得注意：这样的操作对用户来说，购买步骤比小程序内直接下单要多出一步跳转，因此流失率可能会增加，不少商家表示不会选择这种操作路径；由于小程序跳转次数存在限制，由此种方式接入的直播在跳转回商家小程序时也可能存在限制；如若跳转，直播排期需提前申请，等待看点直播小助手审核通过。从这一环节看，虽然都能实现边看边买，但小程序直播的整个用户操作链路都在商家小程序上，商家可以自行决定直播的时间、形式等，自由度更高，并且用户的购买记录、浏览记录均可以很好地沉淀，可谓一举两得。而腾讯看点直播对于商家而言，维系良好的用户体验就意味着所有数据都在腾讯看点直播平台上，而引导用户到商家小程序则得付出用户流失率上升的代价，并且直播排期不可控，自由度相对较低。3、多位营销工具PK：腾讯看点直播瞄准转化和裂变，小程序直播强调粉丝精细化运营在线下，用户的购买转化率极大程度依靠导购的专业素质和商品本身的质量和折扣活动。而在线上直播场景，想完成这一任务，就需要能提高主播和用户互动的营销工具必不可少。腾讯看点直播在营销工具上主打优惠券能力：单品券:主播可将特定优惠券与直播中的商品相结合，选择单品券进行发放，吸引粉丝购买；全场券:主播可发放全场通用；分享领券，主播可发布分享领券任务，粉丝只需邀请一位好友进房，好友进房后，分享者和被分享者才会出现领券画面，点击屏幕即可领取。小程序直播的营销工具，目的则更为多样：抽奖：用户点击可参与评论or点赞参与抽奖，获得兑奖码进行兑换，中奖后可一键授权地址等信息，用户体验流畅的同时，商家节省运营精力。目前官方没有提供优惠券能力，但是商家可以直接将优惠券添加到商品列表，并置顶，直播过程引导用户领取。总的来说，相比之下可以看到，由于小程序直播的是商家与自己粉丝的一种内容互动形式，因此，营销工具的目的更多，包含互动、留存、转化等，适合粉丝精细化运营，进而实现转化，总的来说更适合全用户生命周期的运营；而腾讯看点直播是平台，流量为平台流量，优惠券能力方面更强调快速变现和裂变，长线价值优势不明显。4、提高留存率：两家都有“王牌”订阅消息对于任何商家而言，留存率等于用户的回头率。在这一点上，无论是腾讯看点直播还是小程序直播都纷纷祭出了「订阅消息」这个“王牌”功能。「腾讯看点直播」小程序首页会按时间排列预约信息。用户预约直播后，当直播开始时，微信会向观众发送「服务通知」，提醒直播即将开始。小程序直播也一样，商家在MP后台直播间内接入订阅组件后，用户在直播间内点击“开播提醒”，便可以进行订阅，主播开播后，用户将会收到一条模板消息提醒直播已开播。“这个功能是重大利好”，一位尚未被公测但对小程序直播功能跃跃欲试的商家表示，订阅消息功能在触达与唤醒用户上，非常高效，可以有效提升用户留存。5、收费VS免费目前，腾讯看点直播是收取服务费方式，其服务商目前统一收取 599 元/半年的官方技术服务费，而小程序直播组件不向商家收费。值得注意的是，无论是直播还是小程序，都是商家的数字化探索，在疫情大背景下，数字化变得越来越重要。在小程序直播场景中，商家也被给予了一些数据辅助能力，主播直播的时候可以随时查看用户点赞评论情况、开奖，直播结束后可查看本场直播数据。根据数据的情况，商家可以针对性地进行直播调整和规划。总的来说，腾讯看点直播和小程序直播双方的定位有所不同，受众不同，因此优势和特点也不同：小程序直播的优势是流量和流水都在自己的小程序上，从观看到购买，整个闭环都在商家自己的小程序上，体验流畅，从商家自身的资产出发，帮商家第一次真正完成了直播和小程序商城的融合以及对私域流量进行了更全面的运维，适合有小程序的商家；而腾讯看点直播则是针对没有小程序的无线上能力的小白玩家，为他们提供一套无需任何技术操作便可以实现直播+带货的工具。为了方便大家了解，我们做了一张表格：一位电商运营者表示，“眼下，小程序直播还只是个雏形，未来还会上线什么功能，值得期待”。"}
{"title": "药店口罩预约小程序的MVP设计 ", "author": "Rolan", "push_time": "2020-2-20 00:06", "content": "疫情当前，购买口罩成为社会公众日常生活的新需求，本文以微信小程序为载体，设计药店口罩预约最小可行性产品。一、产品定位用于药店为广大消费者提供便捷的口罩、消毒液等防疫产品线上预约服务，完成预约的用户在防疫产品到货后可优先按照预约顺序购买。二、用户故事1. 最小MVP：线上预约消费者进入小程序，填写个人基本信息和预约信息，提交后生成预约顺序号，可查看预约记录和前方排队购买人数，预约者按照顺序及时来店购买。2. 后续完善（按照优先级排序）预约说明。用于说明预约购买的相关要点、规则等，简练、富有逻辑，说明信息可置于购买前的预约须知。购买分享。将防疫产品的购买结果对外分享，让更多的人了解和使用药店的预约服务。支付信息推送。对于在线上或线下完成的支付结果，通过小程序进行推送。线上支付。防疫产品到货后，向个人开放线上付款功能，个人经办身份验证后可使用微信支付，对于医保参保职工支持医保个人账户支付。预约信息修改。修改已预约的产品信息，主要指产品数量，再次提交需要确认。物流配送。个人支付完成后，可选择物流配送服务，由于配送距离较短，可借助外卖物流体系，也可以是药店售货人员。公众号关联小程序。建立公众号与小程序之间的关联，实现小程序的个性化推送需求（如支付通知、发货通知等）在公众号中实现。公众号嵌入小程序。在公众号中扩展功能模块，嵌入公众号入口。附近药店。通过地图展示附近的药店，可筛选有防疫产品的药店，可查看药店的详细信息，按照药店为入口进行预约。服务评价。对已完成购买的产品进行星级评价。三、业务流程四、主要功能获取微信登录授权。调用微信登录授权服务，提供用户名、手机号授权，是预约的前提条件。防疫商品展示。展示可以线上预约购买的防疫商品信息。预约信息填报。填报预约购买信息，包括个人基本信息和预约商保信息，支持填报信息自动校验。预约编号生成。提交预约信息，生成预约编号，建立编号生成规则。预约记录查询。查询已经预约防疫产品信息。再次预约。第二次及之后的预约需自动填写上次使用的个人基本信息。预约取消。取消已产生的预约记录。五、信息结构商品信息：商品名称、类别（级别）、价格个人信息：姓名、身份证号、电话、地址预约信息：预约人、预约商品、数量、总价、预约序号、预约状态（预约成功、已购买、已取消）六、页面与交互1. 首页2. 填写预约信息（1）标签内置输入框；（2）文本框触发信息输入时，提示文字依然显示，输入文字后，提示文字消失，清楚输入内容后，提示文字重新显示；（3） 手机号自动借助微信授权自动填写，如输入手机号，则触发输入法数字键盘；（4） 如若填写手机号等数字文本框时，直接出发输入法数字键盘；（5） 所在区域和就近购买门店输入时从底部弹出页面；（6） 产品数据量，设置购买上线或固定值；（7） 下次预约自动填写基本信息。（1）弹出框默认高度占据页面总高度的0.618，如选择信息所占页面低于弹出框，自动适应弹出框高度，如高于弹出框则支持弹出页面纵向滑动。（2）街道信息选择后，弹出框自动消失，自动生成地址信息。（1）根据填写的位置信息（到街道级）自动筛选街道内的药店（对于一家连锁药店一般为3家左右）（2）弹出框部署和交互同上。3. 生成预约结果点击查看详细，进度预约详细信息页面。4. 预约记录查询（1） 继续预约，开启对应产品的预约流程；（2） 取消预约，在页面中间弹出对话框，让用户确认；（3） 点击该产品的记录卡片，进入预约详情界面。七、实现分析需要对预约规则进行梳理，包括预约时间、预约条件、预约限制等；产品的重点在于填写信息便捷性，尽量做到能选的不填、能自动生成的不选，适当选用地址列表、加减器等控件；建议对门店信息进行地区分类，划分至街道一级，这样用户附近的自提门店选择数量将大大减少（一般为1-3个），虽不是技术活，但带来的体验确很好。 作者：Hessencrian，微信公众号：空杯水。医疗健康行业发展跟踪，产品设计与运营。本文由 @Hessencrian 原创发布于人人都是产品经理，未经许可，禁止转载题图来自 Unsplash，基于 CC0 协议"}
{"title": "焦点分析 | 直播大潮还在继续，看点之后微信又下场 ", "author": "Rolan", "push_time": "2020-2-26 00:02", "content": "尽管已有看点直播在前，微信还是决定亲自下场。2月17日，微信小程序直播组件开启公测。小程序直播组件带货属性明确，商家在自有小程序内即可实现直播互动与商品销售的闭环，无需跳转。无需跳转是相对于腾讯直播工具更进一步的能力，这项能力的吸引力不言而喻，在移动端产品规则中，使用过程每多一个步骤，都意味着转化率的大比例流失。尤其在当下的时间节点，全民宅家、线下零售受冲击、品牌现金流承压、导购忧心提成——直播带货以一种时不我待的紧迫感，在全国范围内铺开。柜姐直播3小时等于复工6个月是直播大潮中的一个案例，对于直播工具本身而言，也是一个极为有利的时间窗口。服务商驿氪观察到，近期品牌方大量提出开通小程序的诉求，尤其是以门店为单位的小程序。“每天有7-8个品牌要开通门店小程序，现有客户小程序开通量出现10倍以上增长。”驿氪CEO闵捷表示。已有品牌尝到了直播的甜头。2019年11月（内测期），SEE小电铺联合品牌爱客进行了首场直播。SEE向36氪回顾了整个流程：从10月23日拿到开发文档，1天时间完成后台配置，3-4天确认直播商品、营销策略、促销力度、直播脚本，并用3天时间在广州搭建了一个新的直播间。首场测试下来，爱客单场直播销售数据达到113.5万元，其中近20万元来自于新增用户。“直播在微信里能够成为很大的生意。”服务商锐鲨科技CEO月明认为，疫情期间的行业自救是直播电商的第一个红利期，目前小程序直播能力仍是逐步开放的，接下来的第二波红利，是直播组件的全量开放。和看点直播的区别摆在商家面前的第一个问题是，同样是腾讯直播工具，小程序直播组件和看点直播的区别是什么、该怎么选择。2019年3月是腾讯真正意义上下场做直播。腾讯PCG互动视频线3月开始内测“腾讯直播”，并选定电商作为主要场景。定位面向运营者的开播工具，用户可以用腾讯直播App开播，也可以分发到看点直播小程序。12月，直播业务被统一在信息流业务“腾讯看点”之下，看点直播成为腾讯直播业务对外输出的统一品牌。“小程序直播是一个底层能力，看点直播是微信生态内一个应用层的产品，二者是底层和应用层的关系。”SEE小电铺CEO万旭成表示，“理论上，看点直播也可以接入小程序直播组件。”本质区别是，看点直播是一个相对中心化的直播工具；而小程序直播能力则是去中心化的，一个接入到小程序电商闭环的直播组件。成千上万商家使用同一个直播小程序，和直播能力进入到成千上万个小程序中去—— 这一区别的核心是商家对小程序直播的可控程度。 差别在于主体是不是品牌本身，直播间流量是否100%可控，是否可以自主进行开发、修改、功能迭代。至于如何选择，取决于商家本身的诉求，比如是否已有小程序，是否有交易场景，是否有直播电商以外的服务需求，以及流量私域化的诉求是否明确和强烈。 “个人预测，小程序直播第一批会进入到大量有交易能力的小程序中去。” 万旭成告诉36氪。另一个核心差异在于，看点直播需要跳转到商家小程序完成购买，无法实现真正意义上的“边看边买”。看点小程序和商家小程序之间的来回跳转，每多一个步骤都可能意味着用户的流失。这直接导致了商家驱动力的不同。一位品牌商家告诉36氪，如果能将直播组件嵌入到自己的小程序里，并叠加公众号、微信群、朋友圈多个触点，做直播的原动力会更强。集中释放私域转化能力小程序直播组件是一个需要1天开发量的工具，其延展性在于品牌商家对于自建会员池的重视。“创业5年以来我们一直在讲，门店一定要有自己的流量，不要把所有的希望放在公域上，要构建自己的会员池。”闵捷称，“突然一瞬间发现不需要市场教育了。”开通小程序、快速上线、单场直播绝对值破百万、每一场直播比上一场预期更高——借力直播，商家从未如此积极地探索品牌私域流量。在品牌私域这一语境下，锐鲨科技发观察到品牌私域流量直播和平台直播的数据表现上存在差异。首先是销售增量。锐鲨科技CEO月明称，最吸引我们和品牌的点不是单场百万，而是销售增量。疫情期间，有品牌每场直播同比上一场能够翻1.8-2.2倍。服饰品牌FASTFISH快鱼首场小程序直播成交额超50万元，第二天增长至130万元。二是低退货退款率。直播电商行业平均退货退款率高达30%-50%。锐鲨科技发现，品牌在微信小程序直播退货退款率在10%左右，且越头部的品牌，退货退款率越低。三是留存率和召回率。很多时候品牌做公众号，一个月只能召回用户4次，但合理利用小程序直播可以天然重新召回用户4到N次，取决于品牌每月的直播场次。非数据层面，小程序直播也有一些差异化，比如品牌影响力大于主播，门店员工也可能带来高转化。比如不一定以超低促销价为卖点，直播间商品和门店客单价差异不大。只要做直播就能带来倍数增长显然是个伪命题，这背后需要一系列组织能力、供应链能力的支撑，以及对于私域流量玩法的快速反应。“一定要做预热。”闵捷建议，品牌私域直播和公众号、小程序生态紧密结合。公众号推文预热、朋友圈活动预告、订阅直播用户进来后的互动——通过直播，集中释放微信生态的私域转化能力。另一个不同的特点是，和单场场内转化不同，这一系列动作还带有内容种草和持续转化的过程。闵捷举例说，直播一场活动假设能产生10万销售，在直播以后的48小时以内，还能够产生同等甚至2倍的销售量。这是对品牌精细化运营能力的考验。向存量商业场景渗透由于小程序直播能力公测，微信电商体系也在加速成型。万旭成判断，大量存量商业和用户可以被小程序直播场景渗透和激活。万旭成并未将疫情因素的推动力视作短期繁荣，相反地，他认为“企业战略部署、组织架构调整形成的线上能力是不可逆的，一旦形成了会继续往前推。”一方面，天猫淘宝、京东、美团未覆盖到的商业场景，可能在微信里实现线上化；另一方面，疫情让过去线上化比较慢的产业开始进行长远的战略规划，想办法完成更多的线上商业闭环——而直播是其中最核心的场景之一。当然在公测阶段，小程序直播还有很多未实现的能力。比如后端能力如物流助手、同程配送助手，以及“回看”等细节功能点，需要逐一补齐。商家及服务商也在密集反馈需求。从降低内容制作成本的角度，月明提出了一个新的想法，由于品牌做大量短视频不大现实，假设直播小程序后续能够对商品切片做成短视频，对品牌内容输出是很大的成本降低。有品牌、有服务商、基础设施正在建立，微信电商形态的模糊轮廓正在变得清晰。向未被天猫淘宝覆盖到的存量商业渗透，也是中心化电商与去中心化电商的一次较量。有意思的是，这其中不仅有外部对抗，还有一些微妙的内部竞争。腾讯直播业务潜力、腾讯能否打破“做不好交易和购买”的外部认知——这一标准适用于看点直播，也同样适用于小程序直播生态。截至2019年12月，看点直播约有1800位内容创作者，平台累计交易额1.08亿元。与动辄单场数亿的淘宝和快手相比，看点单场直播交易量仍在百万级徘徊。目前小程序直播组件仍然谨慎地逐步开放名单。等到全量开放，或许可以更直观地看到小程序直播的爆发潜力。"}
{"title": "这些战“疫”小程序免费开源了！ ", "author": "Rolan", "push_time": "2020-2-29 00:02", "content": "小程序开发者一直在战“疫”的第一线。除了为广大宅家人士提供各类疫情服务，他们也愿意把自己的代码开源，帮助更多的人低门槛地开发疫情服务小程序。微信开放社区也在此前推出「共抗疫情·小程序服务专区」的基础上，新增了疫情小程序【开源代码模板】。现在，这些开源小程序，你都可以免费使用，为战“疫”出力！  目前，专区内已有疫情新闻专题小程序模板、学生返校健康排查小程序模板、交通出行防疫小程序模板、留守宠物小程序模板等多种模板，开发者点击源码地址即可接入使用。（点击图片可跳转至专区)同时，欢迎开发者报名入驻专区，分享自己开发的疫情小程序模板，为更多的开发者提供参考和支持！我们一同抗击疫情！（扫码即可参与报名）平台将对投稿的作品进行审核和筛选，优秀作品将会直接展示在「服务平台·疫情服务专区」。平台还将联系并返回修改意见，开发者配合修改优化后，也有机会入驻专区。"}
{"title": "小程序直播能力正式公测，新增四项新功能、支持服务商接入 ... ", "author": "Rolan", "push_time": "2020-2-29 22:13", "content": "小程序直播启动公测新增四项能力2月28日，微信官方正式宣布，小程序直播能力启动公测，致力于帮助更多商家打造线上经营闭环，完成快速转型，推动品牌生意增长。满足条件的电商平台、自营商家，都有机会被邀请参与小程序直播公测。 此外，小程序直播还会进行快速升级，新增四项能力：小程序直播订阅能力将升级。用户只需订阅一次，即可接收后期的开播通知；官方优惠券能力即将上线，支持更便利的优惠券下发；将支持快速回看功能；小程序直播还将在微信内有更多展示空间。我们将考量直播时长、观看人数、互动频次等综合因素，让优质的直播内容更好地被用户发现。晓程序说：目前已有多家品牌使用小程序直播并带来了不错的效果，如完美日记、步步高百货、快鱼等等，关于小程序的直播的能力，我们已有深度解读，请点击阅读。需要提醒商家的是，商家需遵守直播相关规范，如出现违规行为，相关能力可能会被回收。2小程序直播支持服务商接入最新消息，小程序直播能力开启公测之后，除了接受商家申请，目前已支持服务商接入。服务商申请权限之后，可帮助商户快速实现小程序直播功能。相比于商家需要被邀请接入，服务商可直接申请，申请步骤如下：在申请后7个工作日内，可登陆微信开放平台查看第三方平台权限集并勾选 “小程序直播” 能力；开通后，即可登陆 “微信开放平台” （open.weixin.qq.com）勾选 “小程序直播” 第三方权限集并全网发布。晓程序说：另外，小程序直播需要实现“直播组件”与“后台API”两个部分，其中组件部分需要在小程序中进行配置开发。“后台API”包括，调用获取各直播间信息及状态、调用获取已结束直播的回放视频等等。"}
{"title": "微信小程序接入百度OCR ", "author": "Rolan", "push_time": "2020-3-9 00:29", "content": "小程序接入百度ocr身份证识别\" style=\"margin: 0.3rem 0px 0.1333rem; padding: 0px; color: var(--TextColor1); line-height: 1.5; font-size: 16px;\">微信小程序接入百度OCR（身份证识别）1.接口描述支持对二代居民身份证正反面所有8个字段进行结构化识别，包括姓名、性别、民族、出生日期、住址、身份证号、签发机关、有效期限，识别准确率超过99%；同时支持身份证正面头像检测，并返回头像切片的base64编码及位置信息。同时，支持对用户上传的身份证图片进行图像风险和质量检测，可识别图片是否为复印件或临时身份证，是否被翻拍或编辑，是否存在正反颠倒、模糊、欠曝、过曝等质量问题。Body中放置请求参数，参数详情如下：请求参数参数是否必选类型可选值范围说明image是string-图像数据，base64编码后进行urlencode，要求base64编码和urlencode后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/jpeg/png/bmp格式id_card_side是stringfront/backfront：身份证含照片的一面；back：身份证带国徽的一面detect_direction否stringtrue/false是否检测图像旋转角度，默认检测，即：true。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括: - true：检测旋转角度； - false：不检测旋转角度。detect_risk否stringtrue/false是否开启身份证风险类型(身份证复印件、临时身份证、身份证翻拍、修改过的身份证)功能，默认不开启，即：false。可选值:true-开启；false-不开启detect_photo否stringtrue/false是否检测头像内容，默认不检测。可选值：true-检测头像并返回头像的 base64 编码及位置信息detect_rectify否stringtrue/false是否进行完整性校验，默认为true，需上传各字段内容完善的图片方可识别；如果设置为false，则对于身份证切片（如仅身份证号区域）也可识别2.小程序端调用需要参数access_token，存放在云数据库中，并定时刷新，不明白如何获取并定时刷新的参考文章:[小程序开发技巧总结（三）-- 云开发时效数据刷新和存储 (access_token等)]2.1 自定义文件 profunc.js，实现函数并封装function OcrIdCard(access_token){\r\n  return new Promise(function(resolve,reject){\r\n    var that = this;\r\n    //识别身份证\r\n    wx.chooseImage({\r\n      count: 1,\r\n      sizeType: ['compressed'],\r\n      sourceType: ['album', 'camera'],\r\n      success: function (res) {\r\n        console.log(res.tempFilePaths)\r\n        wx.getFileSystemManager().readFile({\r\n          filePath: res.tempFilePaths[0],\r\n          encoding: 'base64', //编码格式\r\n          success(ans) {\r\n            // console.log(ans.data)\r\n            wx.showLoading({ title: '识别中' })\r\n            wx.request({\r\n              url: 'https://aip.baidubce.com/rest/2.0/ocr/v1/idcard?access_token=' + access_token,\r\n              method: 'POST',\r\n              header: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n              },\r\n              data: {\r\n                image: ans.data,\r\n                id_card_side: 'front'\r\n              },\r\n              success(_res) {\r\n                wx.hideLoading();\r\n                resolve(_res)\r\n                \r\n              }, fail(_res) {\r\n                wx.hideLoading();\r\n                wx.showToast({\r\n                  title: '请求出错',\r\n                })\r\n                reject(_res)\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nmodule.exports = {\r\n  OcrIdCard: OcrIdCard\r\n}2.2 在小程序页面引用，需要传入access_tokenconst cwx = require('profunc.js'); //在小程序页面引入该js 文件\r\n...\r\nocridcard(){\r\n      var that = this;\r\n      cwx.OcrIdCard(that.data.access_token).then(function(_res){\r\n        var trdata = _res.data.words_result;\r\n        console.log(trdata)\r\n        that.setData({\r\n          name: trdata['姓名'].words,\r\n          idcard: trdata['公民身份号码'].words,\r\n          userloc: trdata['住址'].words\r\n        })\r\n    })      \r\n}3.效果展示接口返回数据如下"}
{"title": "微信处罚4300余个违规公众号，400余个违规小程序 ", "author": "Rolan", "push_time": "2020-3-16 00:01", "content": "速途网3月15日消息（报道：李楠）今日正值315“国际消费者权益日”，微信发布近期针对“疫情违规”行为的公告。公告显示，微信全面打击“疫情违规”，目前已经对近期平台上存在的售卖野生动物、哄抬物价、诈骗等违法违规行为的个人帐号、公众号、小程序进行了批量处理。野生动物属于违禁品，在互联网上售卖违禁品，违反了《刑法》《治安管理处罚条例》等相关法律法规，而微信用户通过微信发布违禁品售卖信息，也是明确的违法违规行为。从2020年1月至目前，经用户举报，微信共计对3200余个发布违禁品售卖信息的微信帐号进行处罚；对1800余个发布违禁品售卖信息的微信群进行处罚；对1000余个发布违禁品售卖信息的链接进行封禁处罚。违禁品售卖信息包括野生动物、违规药品、医疗器械、个人隐私等。同样，利用公众号、小程序的违规行为一经发现，微信也会对违规内容进行删除处理，并视其恶意程度对违规的公众号、小程序进行阶梯式处罚。自1月20日至今，微信针对涉及口罩欺诈、疫情诈捐欺诈等违规行为，共处理违规公众号4300余个，小程序400余个。此外，从1月起，已处理违规贷款公众号1000余个，小程序30余个；处理客服欺诈类公众号1200余个，小程序120余个；处理家电维修欺诈类公众号 1300余个，小程序20余个；售卖假货相关公众号800余个。近日，微信还对5名利用微信销售假冒口罩的违法人员分别提起民事诉讼，要求其公开赔礼道歉并各索赔100万元人民币。深圳市南山区人民法院已于2020年3月10日正式受理此系列案件。经过对用户投诉线索的研判，微信发现一些不法分子利用朋友圈发布某知名品牌口罩的仿冒品信息，依托微信品牌维权平台，微信与该口罩品牌的权利人迅速对接，确认这5名违法人员销售的口罩均为假冒伪劣商品。自1月27号至3月8号，微信共计对7000余个微信品牌维权平台上涉嫌销售假冒伪劣口罩等防护用品的用户举报线索进行核实，并按规定予以处理。对超10000个确认存在欺诈行为(如虚假售卖口罩、虚假募捐诈骗)的个人帐号进行了阶梯式处罚，对超3000个确认欺诈支付账户进行限制处理。微信方面表示，积极承担疫情当前的社会责任，履行平台治理主体责任，平台一直在行动。同时，微信也会全力维护第三方权利人在微信平台上所享有的合法知识产权，打击各类恶意利用微信实施发布仿冒品信息、出售假冒商品的行为，维护消费者权益，为用户提供文明健康、规范有序的网络环境。广大用户如果发现违规行为，可点击公众号、小程序或个人帐号的右上角“…”-“投诉”向平台反馈。根据最高法、最高检、公安部、司法部联合发布的《关于依法惩治妨害新型冠状病毒感染肺炎疫情防控违法犯罪的意见》，生产不符合保障人体健康的国家标准、行业标准的医用口罩、护目镜等医用器材，或者销售明知是不符合标准的医用器材，足以严重危害人体健康的，以生产、销售不符合标准的医用器材罪定罪处罚，最高可判处无期徒刑，并处没收个人全部财产。"}
{"title": "微信小程序直播救不了你的命，把商品做好才是解药 ", "author": "Rolan", "push_time": "2020-3-17 00:43", "content": "上一篇数据中台的实战文章讲了 《数据中台实战（十）：从0 到1搭建推荐平台》 ，这次我们看一下最近比较火热的小程序直播。帮你看清楚小程序直播的现在和未来，把握住这一波红利。小程序直播的现在最近微信小程序直播开始公测，头部的几个商户拿到了公测的资格，已经开始小程序直播的新玩法，微信公布了这次头部商家内测的战绩：从数据来看小程序直播最突出的特点是社交传播属性， 如单场观看数超过100万，互动点赞数74万、评论数超过11万条 ，这些指标都比较亮眼。微信的社交传播属性是微信的基因，小程序直播也继承了下来。我们先看一下小程序直播的玩法：要做一场直播，需要有 用户、商家和网红主播 。作为商家来说需要解决三个问题：（1）首先要有直播的牌照，主要是两个东西：ICP许可证/网络文化经营许可证，申请牌照需要一笔费用，而且申请的过程十分繁琐，找第三方公司去办至少也得3-5个月的时间。（2）要找到网络主播，商家可以和MCN机构合作。合作方式很简单，给MCN的钱越多，MCN提供的网红就越好，粉丝数就越高。规模比较小的商家一般请不起头部网红，大多数商家合作得更多的是腰部和尾部的网红。大家都知道一个一流的网红相当于几百个二流的网红，这些腰部和尾部的网红，带货能力也是有限。（3）作为商家要搞网红带货直播，一定会考虑两个问题：我究竟要放哪些货给网红卖？这些货我该怎么定价？对于头部的网红来说，价格高的商品一般不会接，因为网红带货都是非理性消费，高价格是用户冲动消费的拦路虎。 这样的情况下，大部分的网红直播拿到的是商家的尾货。在疫情的加持下，商家在线下已经无法生存，商品放着也是放着，不如低价让网红去卖，赚回成本钱也是不错的。对于自己手上的爆款、尖货，商家都会留着给自己的大客户，也就是维持自己生意的私域流量，这些大客户合作这么多年积累了一定的信用，也不用担心竞争对手模仿的问题。小程序直播出现后解决了上面的问题一和问题三。商家不用再为网络直播牌照而烦恼，借用微信小程序直播这个平台就能搭建自己的直播间。 微信把网络直播的能力变得傻瓜化， 据微信官方所说，商家可以一天内完成小程序直播的接入。小程序直播的流量是属于商家，参与直播的用户会沉淀在商家自己的小程序上，商家可以自行决定什么时候开播，找谁开播。每场直播商家都会积累一些用户，有能力的商家就会针对这些用户形成自己的私域流量。那么微信为什么耗费这么大的精力做一个直播平台呢？大家都知道当用户十分巨大时，直播平台对技术和带宽的要求都比较高，本质上是砸钱的生意，2019年去世的熊猫直播就是一个典型的案例，因为过于烧钱，资不抵债，选择快速结束掉自己的生命。微信要的其实是用户的时间，时间就是金钱。快手、抖音这两年的兴起威胁到了微信对用户时间的霸占，视频内容相对文字内容来说，用户更容易接受，那微信是一定要入场视频领域的，于是微信就创造了小程序直播/视频号这些产品，继续霸占用户的时间。一般来说，行业老大的入场姿势就是清场，最后的结果一定是微信利用自己的社交基因的优势让其他玩家玩不下去，所以对于内容创作者来说也是一波机会，提前入场有先发优势。另外一点，微信做小程序对用户和商户都有价值的。下图是小程序直播C端用户的界面，用户可以点赞、评论、选择、购买商品。接下来我们从科斯老爷子提出的交易成本来看一下小程序直播/电商/线下购物的价值。科斯老爷子提出交易成本包含交易的金钱成本和时间成本，降低交易成本就给等于说给用户提供了价值。 交易成本又可以基于用户的行为分为购前成本、购中成本、购后成本。购前成本分为搜寻成本、比较成本、测试成本；购中成本分为协商成本、付款成本；购后成本分为运输成本、售后成本。我们先看下线上电商和线下购物的交易成本。线上电商相对于线下购物来说，主要是降低了搜寻成本、比较成本。线上通过搜索等功能可以快速找到目前自己想要的商品，快速地比较全网各个商家的商品，使信息更加透明。对于测试成本来说线上反而比线下成本更高，用户在线下直接在试衣间试穿就知道了是不是要买这件衣服。在线上付完钱用户收到商品后才能完成对商品的测试，对于用户来说是增加了成本。线上相比线下增加了运输成本，线下用户直接带走商品，线上的商品要通过快递或者物流才能达到用户手上，用户不能即时用到自己喜欢的商品。最后是协商成本、付款成本和售后成本，有了支付工具和微信的存在，对于用户来说线上和线下的这三大交易成本基本一致。接着我们看一下小程序直播电商和线上普通电商的交易成本比较。小程序直播电商相对于线上电商来说降低了用户比较成本，如果同一件商品同时在电商平台和直播电商中出现，直播电商的优势就显得比较大。直播电商的优势是商品会说话，而人这种生物天生对声音和画面比文字更加敏感，如果用户比较喜欢这件商品，那么在直播电商下单的可能性就比较大。另外头部网红直播的商品，都是经过专业的团队进行选品，再经过网红对商品专业的介绍，就近一步降低了交易成本。还有比较重要的一点，直播电商相对于线上电商的优势是有互动。直播电商的感觉是一群人在购物，而且还可以和周围的人聊天，而人属于群体性动物，当你见别人都下单的时候，就增加了你下单的可能性。在其他方面，线上电商和小程序直播电商交易成本基本一致。那么小程序直播电商的比较成本是谁来降低的呢？答案是网红们。网红们存在的核心价值应该是降低用户购买商品时的比较成本。怎么降低？靠的是网红对商品的专业知识，幕后团队针对直播商品的策划和运营能力。这也是头部网红与普通网红的区别，一个普通的网红肯定打不过像李佳琦一样有几百号幕后团队的超级网红。比如笔者今天听的一场直播，有一个场景，一 个粉丝问带货主播商品的价格，她却让粉丝扫描下面的二维码去查看，这就体现这个网红的不专业，作为一个带货主播居然不知道商品的价格这么关键的信息，怎么卖得出去商品？这也是网红主播的现状，很多主播不是为了降低用户的比较成本，而是想在红利期收割商家的一波韭菜，为了直播而直播，这些网红主播注定被淘汰。小程序直播的未来至于小程序直播的未来， 华仔的观点是直播这个行行业马太效应非常强 ， 最终流量只会集中在几个大网红玩家和品牌商这些头部势力 ，普通的商家搞小程序直播只会有一个结局：沦落为电视购物的尴尬。电视购物大家应该都看过：“只要598，全部拿回家”。在大多数年轻人的心中电视购物已经是骚扰节目的象征，只能用来忽悠一些老年人，就更不用说电视购物的转化率相关的数据了，一定是极低。如果没有专业的运营能力，找一个干巴巴的网红做一场没有组织没有运营的直播，转化率可能连电视购物都不如，频道比较好一点的电视购物平台，至少还有一个策划团队。我们再看一下直播带货这个行业，头部玩家是怎么玩的。头部玩家分为两类一类是李佳琦、雪梨这样的头部网红，另外一类是像完美日记这样的品牌商。李佳琦、雪梨的成功并非偶然，他们的背后是强大的供应链和顶级的运营团队， 顶级主播的运营团队比大多数互联网公司的运营都专业 ，因为网红带货是直接销售的形式，十分考验运营团队的策划能力。他们会策划各种手段、场景，让消费者头脑发热，然后消费。这些大网红针对品牌商的议价能力也极强，拿到的都是“尖货”，何谓尖货，就是这个商品质量得好，价格也得最最低，一般这些网红都会给供应商签保价协议，保证拿到的货一定是全网最低。产品质量好+价格最低，再加上头部网红几百万甚至几千万的粉丝量，头部网红带的货，销量一定是有保证的，随着销量的越来越高，流量也越来越集中在头部网红身上，马太效应会越来越明显。接下来我们看一下品牌商微信小程序直播的玩法。微信小程序直播成绩单上的完美日记有一个比较亮眼的指标，购买转化率比别的品牌高出2-3倍。完美日记的购买转化率为什么这么高呢？我们先看一下完美日记的玩法， 完美日记也在线下开了很多店，但是开这些店的核心不是卖东西，而是加微信。 完美日记通过这个方式，经过三年的时间加了几百万个微信。通过加微信的方式绕开了购物中心，从而降低交易成本，将一只口红从300块卖到60块。消费者可能一年都不来几次店里买口红，但是通过线下门店加微信就制造了无限次与用户接触的机会。 完美日记其实不是一个零售公司，而是一个互联网公司，玩私域流量的高端玩家。用户关注了完美日记的公众号和个人号后，完美日记会针对用户进行人格化的运营。他们的个人号是一个很立体的形象，从头像、个人介绍、到朋友圈都被精心的人格化设计。小程序直播只是完美日记人格化运营的增强，他们直播的对象都是完美日记深度运营过的粉丝，都是精准的私域流量，所以购买转化率会比其他品牌高。所以对于品牌商来说，未来小程序直播是他们运营私域流量的重要工具。对于未来的商家来说，生存的基础首先是要保住自己的商品能力。无论是线下购物、线上电商、线上直播电商，商品才是最大的价值点，用户看一场电商直播的最终的目的是找到自己喜欢的商品。对于同一件商品来说，怎么做到能比别的商家卖到更低的价格，怎么制造出来别人制造不出的商品，才是商家应该修炼的最核心的能力，不要为了直播而直播，这样很容易被别人割韭菜。商家要更好地生存就要提高自己的运营能力，互联网运营相关的方法论会慢慢下沉至商家，小程序直播只是表象，背后拼的是针对用户、商品、平台、内容运营的能力。没有这些能力的商家就算开再多次的小程序直播也无济于事，终将被淘汰。"}
{"title": "微信“复工者联盟”大数据：7个零售类小程序月销过亿 ", "author": "Rolan", "push_time": "2020-3-20 00:02", "content": "3月19日消息，今日，微信发布“复工者联盟”大数据（3.2-3.10与2.2-2.10数据月同比），揭示全国各地逐渐远离“阴霾”，进入“回暖期”的趋势。《电商报》注意到，复工之际，7个零售类小程序月销过亿，部分商家小程序日销售额环比12月提升11倍。可见，微信小程序正在成为助力复产复工的重要工具。值得一提的是，腾讯昨日发布的最新财报显示，小程序的日均交易笔数同比增长超过一倍，2019年交易总额超人民币8000亿元。此外，微信“复工者联盟”大数据显示，零售渠道类小程序来自微信会话的访问占比增长近5倍；其中，社区拼团类小程序日均DAU增长291%，日均交易笔数增长656%；生鲜果蔬类小程序日均DAU增长216%，日均交易笔数增长282%；便利店类小程序日均DAU增长124%，日均交易笔数增长143%。事实上，复工复产确实“激活”了超市和便利店，微信“复工者联盟”大数据显示，微信支付笔数分别增长了68%和37%。其中深圳的超市“复苏”程度最为活跃，东莞的便利店消费也抢先占据全国第一。与此同时，餐饮行业正逐步走出疫情“阴霾”。微信“复工者联盟”大数据显示，小程序点餐和外卖增长达到322%、402%。小吃、甜品冷饮、正餐的微信支付笔数增长分列前三，堪称“复工三大宝”。“报复性”喝奶茶也在复工后实现了，茶饮的小程序下单笔数增长高达744%。而商业、房地产、快递物流、金融等行业以及中小企业机构，也都借助小程序推进复工复产。微信“复工者联盟”大数据显示，新发布小程序总数月同比增长177%，较多属于商家自营、工具、生活服务行业。政务民生、IT科技、文娱等中长尾小程序总PV增长256%，其中政务民生行业PV增速高达7337%。"}
{"title": "一文解析，怎样提高小程序的用户留存率？ ", "author": "Rolan", "push_time": "2020-3-23 00:01", "content": "慢工出细活，端好一碗水，做好一摊业务！2020年的移动互联网时代人口红利基本消耗殆尽，用户的竞争越来越激烈！留存的指标自然成为互联网行业的高关注指标。留存率的高低直接决定用户对平台粘性以及转化的影响。我们认为留存率是一场产品/运营层面的考验，产品体验和运营策略的有效性能很直观的反馈在留存数据上，其次，留存率同样是对用户预期的把握，做好预期管理和用户运营，同样会有很大的影响面。做为微信小程序，有便捷的入口可以很大成本的提高拉新效率，整个微信环境的营销和支付闭环同样能对转化有较高提升，但饱受诟病的的确是留存。小程序的留存率低一方面原因跟腾讯自己相关，为了避免用户被骚扰，小程序的用户通知和唤醒能力一直被官方极大地压制，以至于我们小程序服务通知功能也一再受限；另外一方面小程序因为代码包限制，功能大多单一，除非特色极其鲜明，否则用户很容易“用完即走”。一、关于提升留存的三个动机我们在做留存的提升主要把留存的动机区分三个层面： 新用户的惊喜时刻，老用户的习惯培养，业务自身的增值服务！1、新用户的惊喜时刻这一阶段的动机点在于新用户的“惊喜”，“惊喜”的潜力是非常巨大，一个有效的记忆点不但能拉动新用户本次的消费同时可以很好的让用户形成印象便于二次回流。举例：业务初期我们希望收集更多的数据来定制化用户需求，对于新用户进入到平台后在，平台弹窗是一个小游戏，游戏内会非常软性的收集用户基本网购信息，简单操作2-3步，即可领到专属券包，更重要的是我们已经拿到了用户行为偏好。接着在首页会有一个固定定制化模块，从视觉包装，品类推荐，内容段子包装，会让用户眼前一亮，感觉在跟苹果的Siri对话，她会推荐给你你最需要的东西和对应的食材烹饪建议！这个模块只给你开放。2、老用户的习惯培养到了第二阶段需要做的是核心培养用户习惯，产生刚需的认知后，能够快速的映射到业务平台并且快速打开。策略定位：丰富的触达场景+有效的分层营销机制。我们接下来具体拆分。3、业务自身的增值服务用户的付费行为永远都具备贪婪性，特别是消费者，在满足基本的购物场景后，我们的策略定位在于增值服务，延长用户LTV，同时也是在不断提高市场环境的差异化举例：商品层面利用全球强大的供应链增加海外冷链；促销层面打通线上线下，无论哪个环境领券线上线下都可以核销也便于线下的购物效率，配送服务我们开始持续增加骑手的增值内容比如给用户拿快递倒垃圾等等，形式很多，空间也可以很大！二、运营策略的拉动用户的留存紧接着上面的话题，我们不妨拿“模型”来展开和分析，对于用户的留存，主体是用户，且行为路径是页面访问，我们可以拿到用户特征进行分层，详细分层请见下图:1、按照生命周期区分用户级别，把握核心用户路径我们在聊用户生命周期过程中提到，用户从开始被拉新到主动流失区分五大档位：用户导入期/用户成长期/用户成熟期/用户低迷期/用户流失期，五个时期时间段不一样，所承担的功能义务也会有差别，按照图示，我们把五档用户暂且成为SABC，且每个周期的曲线弧我们称之为S1曲线，S2曲线，S3曲线和S4曲线。我们可以明显感知到用户成熟期是一个分水岭，这个阶段后用户开始逐渐下降，S3曲线也呈下降趋势，这部分的属于正常且策略在于召回，对于留存我们还是需要聚焦在S1曲线和S2曲线。2、新客导入期留存是挑战也是机会点，把握惊喜时刻应该都清楚，新客无论是次留还是7留都远小于老客的留存，行业普遍反馈新客的次留20%，7留3%左右。新客首次接触平台的忠诚度是非常脆弱的，往往是被9.9或者新人礼包所吸引过来，所以这部分留存相对困难，同时换个角度，S1曲线是第一个折线过程，做好这一步，S2就迎刃而解！社群营销锁住新客：在新客导入过程中，务必要做的一个事情是按人群属性进行拉群，每天有节奏有内容的PUSH促销（详细点击查看），是一个非常好习惯培养阵地，业务初期，我们通过社群营销，30%-40%的流量来源社群持续化玩法刺激新客：在这个阶段，加入一些持续化玩法，在未有任何用户心理预期的前提下给到意外惊喜。举例：新用户在首次逛活动页面时，搜索鸡蛋关键词，这时候在搜索列表不但能展示出所有鸡蛋品类，同时能吐出鸡蛋品类的单品优惠券，点击领取引导购买；其次，用户如果购物车内有一箱车厘子，2-3天后未支付，通过微信服务通知或者短信会推送车厘子最新秒杀降价信息，并展示出近期时间的价格趋势，便于快速决策！新客权益包的组合回流：新客权益包的目的一方面为了产生首次下单行为，其次是通过权益包吸引用户二次回流，例如复购券包，二单免邮券，已关联的二单权益商品。核心就是需要把握投入成本CAC，之前有跟大家详细讲到（详细点击查看）高复购拳头商品锁住新客：高复购商品同样是培养用户习惯的核心因素，民生商品米面油等刚需生活品，在首页黄金位置露出，同样可以在新人权益页面内做主推，挑选10-20款SKU，价格在20元以内，不断持续主推一周。 专题活动打动用户心智：专题新用户活动页，每个新城开店前面对的都是线上全新用户，可以搭建固定活动专题页，例如：一日三餐，每日鲜等主题，每周一到每周日更不断更新商品和权益包，“周一水果日，周二蔬菜日，周三肉蛋日，周四乳品日，周五粮油日，周末免邮买买买”。其次，每个页面都可以主动订阅另一天的商品提醒，用户在隔天定时收到活动开抢的服务通知；线下服务细节，增加顾客好感：新客的培养过程线上只是一方面，线下履约同样至关重要，配送时效，配送服务态度，商品装袋细节。分享我们在做时几个细节点（后续单独一篇跟大家分享）。我们在购物袋内放入冰箱贴或者鼠标垫，上面都印有小程序活动页太阳码，便于快速扫码购物和提醒，其次骑手配送到家后，会主动提醒帮忙倒垃圾等增值服务。3、老客的成长期，冲刺留存峰值爆发期提高习惯培养用户的经过到这一阶段，留存才上正轨，活跃用户的次留通常可以到30%左右，7留大概在10%-15%，这个留存率已经无限接近于平台均值。这时候对于留存的把握有点类似于老用户的复购，很多策略都可以通用有效。多触点运营入口，反复提醒用户：小程序电商一个最大的优势是闭环了整个微信生态，腾讯也大大小小的提供了很多小程序触点，都可以打通进行运营：服务通知模板消息推送，公众号活动预约推送，公众号推文/回复/菜单推送，社群营销，朋友圈个人推送/LBS广告，附近的小程序，支付卡包，客服消息等等，当然在微信环境外，我们也会经常用到短信进行推送，按用户包进行分层推送。（详情点击查看）线下场景人货场数字化，反复提醒用户：线下场景是丰富且复杂的，有很多场景可以植入小程序入口同样是我们做在留存的策略。a.以“人”为载体层面线下商超单位无非是门店导购员/拣货员/收银员/操作员等，这部分团队在坚守自己岗位的同时主动和用户进行宣导，引导扫码授权可以获得优惠券福利；b.以“货”为载体的单位就是全场SKU，我们对部门高频的SKU制作线上商品详情，用户可扫描货架二维码进行线上查看更多商品信息，用户评论，甚至溯源信息；c.以“场”为载体的单位就是商超本身了，门店标牌/数字化广告屏幕，用户从进店开始，从进店口，堆头区域，货架卡板，货架挡板，吊牌吊旗，迎面立柱，墙体海报，门店彩页，门店出口等用户必经之路增加线上二维码广告+线上促销利益点。核心一个点，只要能成功吸引用户进入到我们平台，访问留存增加，离转化又近了一步！针对性的权益组合包，利益刺激提醒用户：零售用户具备很强的利益敏感性，成功支付后的复购券奖励，跟品类强关联，按照品类和客单价进行筛选。举例：母婴类用户会针对性的发放奶粉尿不湿的品类复购券，客单价按照价格的区间投放区间段门槛的全品类券等等；其次提醒一个细节，优惠券最好利用腾讯的微信支付券，能够在用户未使用的前提下进行主动触达回流提醒，和微信卡包的快捷使用。周期性的激励政策，成就感满足用户虚荣心：某个时间段的冲单激励（例如，11月下单超过5单用户奖励），某个时间段的推荐用户下单激励（例如，A用户成功推荐B用户1个月之内下单2次给激励），某个时间段的消费总金额激励（举例，6月下单总金额超过666元给激励）。VIP化用户，老带新提高用户积极性：任何单一用户在一个大的群体内都希望被VIP化和特殊化，这部分老用户我们同样可以针对性的处理，让这部分用户在保持自由的回访留存复购以外，同样可以带领更多的新用户进行转化。举例：A老用户是某个门店的社群签约团队（前提是每月4次以上的复购行为），拥有拉新获客的专属二维码，邀请本社区更多的新用户扫码下单或者注册成功即可获得-5块的收入。社区团购同理。无论是留存率还是前期所讲的复购率，多站在用户角度思考，用户需要什么，什么样的用户需要什么样的内容，做运营亦是如此，越精细化运营越能了解你的用户痛点和本质需求，慢工出细活，端好一碗水，做好一摊业务！-END-"}
{"title": "微信小程序直播有何魅力？多套组合带你开启带货新模式！ ", "author": "Rolan", "push_time": "2020-3-25 00:01", "content": "导购、设计、CEO齐上阵，微信小程序直播到底有何魅力？淘宝321直播购物节正在火热进行中，2020年刚过去不到四分之一，直播已经呈现井喷的架势，三八节过后，平台纷纷发布战报，作为刚入局直播不久的微信小程序直播，也取得了亮眼的成绩。完美日记、罗莱家纺、悦诗风吟、野兽派等近千个品牌小程序同时参与，导购、设计、CEO齐上阵，罗莱家纺总裁亲自直播，6小时交易额超1000万元。忽然之间出现的小程序直播，是腾讯直播吗？跟看点直播有什么区别？其实我们以往所说的腾讯直播，应该叫做腾讯看点直播，是由腾讯PCG（平台与内容事业部，QQ、腾讯视频的事业群）推出的直播产品，包括两个部分， 商家开播需要注册使用的“腾讯直播APP”以及用户观看直播的小程序“看点直播”。想在腾讯看点直播实现边看边买，有2种方法：1、把商城建在腾讯直播里。商家需要入驻腾讯直播的合作服务商，将店铺同步绑定腾讯直播账号，并关联商品。2、跳转向自己的小程序，商家可以添加微信好友“腾讯直播助手”申请绑定自己的店铺小程序，通过跳转店铺小程序的方式实现直播带货。方式1对于已经有了小程序的商家而言显然比较多余，并且等同于将用户数据交给了平台。方式2则产生了跳出，多一步跳转过程可能增加流失、降低转化率，同时小程序跳转次数存在限制，直播排期需提前申请，也为方式2带来了诸多不便。而小程序直播是由微信团队基于小程序于今年2月份开始公测的新路径， 商家在自有的小程序开发接入直播组件即可实现直播 ，商家在小程序这一“私域”内实现用户互动与商品销售闭环。腾讯看点直播与小程序直播各方面对比另外，我们整理了腾讯官方直播体系、淘宝直播、抖音快手，还有很多基于微信生态产生的直播平台，比如：有赞的爱逛直播，有播、特抱抱等。全网直播平台盘点局部图（原图点击文末下载）今天我们重点来说说小程序直播。01｜邀请制，克制开放据了解，目前小程序直播公测采用邀请制，符合以下条件的电商平台、自营商家，就有可能被邀请。满足小程序18个开放类目（包括：电商平台、商家自营-百货、食品、初级食用农产品、酒/盐、图书报刊/音像/影视/游戏/动漫、汽车/其他交通工具的配件、服装/鞋/箱包、玩具/母婴用品(不含食品)、家电/数码/手机、美妆/洗护、珠宝/饰品/眼镜/钟表、运动/户外/乐器、鲜花/园艺/工艺品、家居/家饰/家纺、汽车内饰/外饰、办公/文具、机械/电子器件）；主体下小程序近半年没有严重违规；小程序近90天存在支付行为；主体下公众号累计粉丝数大于100；主体下小程序连续7日日活跃用户数大于100；主体在微信生态内近一年广告投放实际消耗金额大于1w。2019年，小程序日活跃用户超过3亿，累计创造8000多亿交易额，小程序已经成为微信生态内又一大流量聚集地，在当下各大平台都积极部署直播的情况下，小程序发展直播也可以说是顺应时代的一步，但是 从邀请制来看，微信团队发展小程序直播还是比较克制的 ，以目前三八节这一大型节点的试水来看，商家取得的成绩是不错的。02｜小程序直播能干什么？接到邀请的商家可在小程序后台“功能-直播”申请直播能力，通过官方审核之后根据文档开发，即可在自有小程序上进行直播，官方称目前最快一天即可开发完成，运营20分钟即可上手。现已具备商品展示、点赞、抽奖、评论、优惠券派发等能力， 用户在直播间可以完成从观看到购买的全部流程，不用跳转至其他平台。还可以分享直播间给微信好友或微信群。抽奖可直接调用微信地址目前小程序内每个直播间直播不能超过12小时，同一个小程序可以支持50直播间同时直播，一天的直播上限也是50场。已入库的商品上限是2000，每天最多提交审核500件商品。从数量上来看，目前小程序规模仍不大，对于数量众多的连锁商超来说不是很友好，这可能是考虑到微信生态对于大批直播流量的承载能力，官方也表示未来会逐步增加展示空间。据了解，之后还将推出：小程序订阅功能，这类似微信公众号的做法，用户只需订阅一次，即可接收后期的开播通知；官方优惠券；快速回看，现阶段商家可自行开发回看功能；在微信内获得更多展示空间。03 ｜ 多套组合开启带货新模式小程序直播是完完全全的私域流量运营，如何巧妙运用这一功能，商家需要一些组合打法，现在我们发现还有更多玩法正在被运用。搜一搜+小程序直播前几天天虹尝试了一种新玩法——“ 搜索直达直播 ”。用户在微信搜索“天虹”就可以直接到达直播现场。半公域的搜一搜引流至小程序直播私域沉淀，3月14日，天虹联动斐乐品牌专场直播，搜一搜品牌官方区当天有50.15%的点击率；活动当天斐乐天虹全国线上销售超200万。搜一搜页面企业微信+小程序直播还是以天虹为例，他们利用企业微信，用户线上线下添加导购，过去一年，天虹的导购连接了500多万顾客。利用企业微信积累、维护客户，已经积累了一大批私域流量，如今小程序直播开通，从流量积累——流量变现，实现业务闭环。天虹导购朋友圈商家有自己的小程序才能入局小程序直播，这对没有小程序的商家不太友好，但是微信生态的玩法很多，等待商家们去探索，随着微信官方功能的不断完善，小程序直播究竟能发挥多大的能量，值得我们期待！-END-"}
{"title": "微信PC版2.9.0测试版更新：语音消息自动转文字，小程序、小游戏来到桌面上 ... ", "author": "Rolan", "push_time": "2020-3-26 00:03", "content": "这一周以来，微信团队相继推出了iOS版7.0.12版本、安卓版v7.0.13测试版本更新，带来了许多用户“骂”了许久才出来的深色模式，以及其他一些交互或者功能更新。此外，桌面版的微信客户端也有了新的2.9.0测试版本的更新，同样带来了许多用户迫切需要的一个功能，那就是语音消息自动转文字，简单测试效果还是相当不错的，需要的可以 点击这里直接下载 新版微信。除了语音消息自动转文字的功能之外，更加重磅的功能更新应该是新增小程序面板，可以查看最近使用和已经添加的小程序，对于日常上班需要使用桌面版微信而又有使用小程序习惯的小伙伴来说，再也不用电脑、手机两头用了。此外，在新版微信PC客户端当中，朋友分享的小游戏可以直接在聊天窗口中打开了，但是还是别在上班时间摸鱼打坦克大战了吧。在经历了今年以来的几个版本更新之后，微信桌面版客户端的使用在功能上是已经越来越接近移动端了，大家常用的功能除了朋友圈之外，像看一看等功能都已经相继搬到桌面端了，在使用上能够提供更加一致的使用体验。以下是微信团队提供的官方更新日志：新增小程序面板，可以查看最近使用和已添加的小程序聊天中可以引用更多类型的消息聊天中可以拖拽消息，以转发到其他聊天或保存到电脑可以设置聊天中的语音消息自动转为文字可以设置收到的文件是否自动下载"}
{"title": "微信朋友圈广告或将实现一键跳转小程序直播 ", "author": "Rolan", "push_time": "2020-3-26 00:17", "content": "近期在开发小程序中，接触最多的就是 canvas 了，期间又因为兼容性的问题，又经历了底层 API 的新旧版的替换，踩的坑可谓令人印象深刻。小程序（微信）的 canvas 与 HTML 标准的 canvas 有较大区别，就连小程序本身的 canvas 底层 API 都有两个大版本的区别（其实远古时期还有一个版本，但年代过于久远就不做考究了）。目前现存的两个版本的区别在于是否支持「同层渲染」。同层渲染小程序的内容大多是渲染在 WebView 上的，如果把 WebView 看成单独的一层，那么由系统自带的这些原生组件则位于另一个更高的层级（如 canvas、video）。两个层级是完全独立的，因此无法简单地通过使用 z-index 控制原生组件和非原生组件之间的相对层级。想要在原生组件之上只能用 cover-view 和 cover-image 来实现。但 cover-view 和 cover-image 支持的 css 样式是在很有限，而且经过实践来看，cover-view 在安卓部分机器上性能真的很差。「同层渲染」则是将原生组件直接渲染到 WebView 层级上，就可以通过简单的 z-index 来控制层级，而且支持的 css 非常丰富，麻麻再也不用担心我碰到的层级问题了！是不是看起来很美好？然而现实非常残酷。「同层渲染」存在的问题首先，根据小程序官方的文章来看，几乎是重构了整个「原生组件」，使用方式和支持的特性与之前的区别都非常大，非常类似标准的 canvas API，甚至官方声称「支持标准 canvas 的大部分属性方法」。但是根据我的实际项目经验来看，新版 canvas API 仅仅只是在 iOS 上表现良好，在部分安卓机器上会出现许多怪异行为。一个简单的例子是绘制多个相同的形状时，画笔似乎会出现在「飘忽不定」的位置上，导致绘制最终结果无法预测。另外很让人头疼的一个地方在于 drawImage 方法上。旧版 API drawImage 第一个参数是图片路径，本地路径或网络路径皆可，但新版 API drawImage 第一个参数必须是图片实例，由于小程序无法获取 DOM 元素，只能用官方提供的 createImage 方法创建图片实例，在其 onLoad 回调中再次调用 drawImage ，才能实现原先简单的方法。诸如此类。但这些都是可以克服的，最终导致我们放弃的原因是其在部分安卓机器上的「不确定性」，如果在「新特性」和「兼容性」上做选择，我想我还是坚持选择「兼容性」吧。就好像「优雅降级」和「渐进增强」，我更倾向于后者。「兼容性」下的「同层渲染」我相信大多数做过小程序 canvas 相关都有层级的烦恼。既然无法使用新版 API 来实现，那问题总要解决，最终我们想出了一套在旧版 API 也可以实现类似「同层渲染」的效果。目前需要「同层渲染」的场景基本上都是需要在 canvas 上弹层，所以在覆盖 canvas 的时候不会同时操作 canvas，因为可以利用 canvasToTempFilePath 可以临时将 canvas 转成图片，然后隐藏 canvas，显示 tempImage 即可。黎明的曙光新版 canvas API 并不是一无是处，有一个很大的变化在于它不再使用物理尺寸来绘制，使用的是实际尺寸。这就会使得使用新版 API 绘制的结果比原来高清许多，这算是为数不多的优点吧。另外新版 canvas API 在 iOS 上表现还是很不错的。希望未来官方可以让新版 canvas API 兼容性更优秀，让开发者早日摆脱这些临时方案。"}
{"title": "使用观察者模式+globalData实现小程序全局实时状态管理 ", "author": "Rolan", "push_time": "2020-4-2 00:38", "content": "前言\r\n\r\n在小程序的中，虽然有globalData这种全局唯一数据存储，但是每个page并不能感知globalData是否发生了变化继而去更新page的data。比如A页面改变了globalData，但是B页面并不能知道globalData改变了，B页面只能在onShow这个生命周期中去重新获取globalData，并setData\r\n甚至在同一个页面中，我改变了globalData，但页面并不知道，必须手动去setData，这样页面中的数据才会重新渲染\r\n于是我想是不是可以使用观察者模式，让globalData一改变，全部页面就更新数据呢\r\n当然，这个只是一个思路，并没有考虑多次setData降低性能，你在看这篇博客时，可以当作是学习观察者模式，哈哈，当然，如果能点个赞最好了，谢谢\r\n二更，修bug。小程序每个页面的js文件都是Page(对象)，使用Reflect和Proxy对（对象）进行代理，使得只有路由栈在当前页面才setData，并且减少耦合\r\n\r\n什么是观察者模式？\r\n\r\n经评论区指正，改正了用词，感谢\r\n\r\n\r\n观察者模式，有两个角色，一个是目标，一个是观察者。可以形象的比喻为老师和学生\r\n老师在台上讲课（发布消息，触发事件），学生在台下听课（接受消息）然后吸收知识（执行任务）\r\n如果老师觉得你在开小差，他会让你滚出教室（删除观察者）\r\n老师觉得你反省的差不多了，他会让你进入教室（增加观察者）\r\nclass Teacher{\r\n  constructor(){\r\n    this.students=[];//用来存储学生，即是存储观察者\r\n  }\r\n  add(student){\r\n\t\tthis.students.push(studnet)\r\n  }\r\n  remove(student){\r\n    this.students.forEach((item,index)=>{\r\n      if(item==studnet){\r\n        this.students.splice(index,1)\r\n        return;\r\n      }\r\n    })\r\n  }\r\n  say(){//老师讲课\r\n    this.students.forEach(item=>{\r\n      item.listen()//要求学生们听课\r\n    })\r\n  }\r\n}\r\nclass Student{\r\n  listen(){\r\n    console.log(\"我在听课\")\r\n  }\r\n}\r\n复制代码总结：\r\n\r\n目标有三个能力：\r\n\r\n增加观察者\r\n删除观察者\r\n通知观察者执行某一个任务\r\n\r\n观察者有一个能力：\r\n\r\n执行任务\r\n\r\n\r\n在小程序中使用观察者模式\r\n小程序目录如下\r\n\r\n在publisher.js中\r\nclass Publisher {//发布者\r\n  constructor() {\r\n    this.observers = [];//存储观察者\r\n  }\r\n  add(observer) {//增加观察者\r\n    this.observers.push(observer);\r\n  }\r\n  remove(observer) {//删除观察者\r\n    this.observers.forEach((item, index) => {\r\n      if (item == observer) {\r\n        this.observers.splice(index, 1);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  notify() {// 向观察者发布消息\r\n    this.observers.forEach(item => {\r\n      item.update();//  在每一个页面中创建一个update函数用来更新globalData并渲染\r\n    });\r\n  }\r\n}\r\n// 这个类继承Publisher并监听globalData的变化\r\nclass GlobalDataPublisher extends Publisher {\r\n  constructor(globalData) {\r\n    super();\r\n    this.globalData = globalData;\r\n    this.observers = [];\r\n  }\r\n  getGlobalData() {\r\n    return this.globalData;\r\n  }\r\n  setGlobalData(globalData) {// globalData一旦变化，就通知观察者\r\n    this.globalData = globalData;\r\n    this.notify();\r\n  }\r\n}\r\nmodule.exports = {\r\n  Publisher,\r\n  GlobalDataPublisher\r\n};\r\n\r\n复制代码app.js\r\n//app.js\r\nvar { GlobalDataPublisher } = require('./utils/publisher');\r\nApp({\r\n  onLaunch: function() {\r\n    // 将这个类挂载到全局唯一实例的App上\r\n    this.globalDataPublisher = new GlobalDataPublisher(this.globalData);\r\n  },\r\n  globalData: {\r\n    userInfo: {\r\n      name: '胡志武',\r\n      age: 18,\r\n      job: '前端攻城狮'\r\n    }\r\n  }\r\n});\r\n\r\n复制代码新建四个页面\r\n\r\n// 四个页面全部一样如下\r\n// wxml\r\n <view>\r\n    <text>name:{{userInfo.name}}</text>\r\n    <text>age:{{userInfo.age}}</text>\r\n    <text>job:{{userInfo.job}}</text>\r\n</view>\r\n<view bindtap=\"changeName\">改名字为前端小学生</view>\r\n<view bindtap=\"changeJob\">改职位为前端打杂</view>\r\n复制代码// js\r\n// 这是每个页面需要执行的任务，获取globalData并setData，实现页面及时渲染\r\nupdate() {\r\n  \tconsole.log(\"user页面更新\")\r\n    const app = getApp();\r\n    const globalData = app.globalDataPublisher.getGlobalData();\r\n    this.globalData = globalData;\r\n    this.setData({\r\n      ...globalData\r\n    });\r\n  },\r\n复制代码//j s\r\n// 每个页面onLoad时。需要增加观察者，\r\nonLoad: function(options) {\r\n    const app = getApp();\r\n    app.globalDataPublisher.add(this);// 增加观察者\r\n    this.globalDataPublisher = app.globalDataPublisher;\r\n    this.globalData = app.globalDataPublisher.getGlobalData();\r\n    this.setData({\r\n      ...this.globalData\r\n    });\r\n  },\r\n复制代码// js 业务功能\r\n// 用来检查是不是全局实时更新\r\nchangeName() {\r\n  \tconsole.log(\"user页面更新，changeName\")\r\n    this.globalData.userInfo.name = '前端小学生';\r\n    this.globalDataPublisher.setGlobalData(this.globalData);\r\n  },\r\n  changeJob() {\r\n    console.log(\"user页面更新，changeJob\")\r\n    this.globalData.userInfo.job = '前端打杂';\r\n    this.globalDataPublisher.setGlobalData(this.globalData);\r\n  },\r\n复制代码\r\n先点击四个tabBar页面实现注册观察者，然后点击修改名字，会发现其他页面也更新了globalData并setData\r\n二更，使用Reflect和 Proxy对page进行代理\r\n如果每个页面都需要去添加注册观察者的代码，和update函数就太麻烦了。\r\n我们可以发现小程序每个页面都是Page(对象)， 我们可以对(对象)进行代理和反射，将我们需要的代码加上去，\r\nfunction createProxyPage(objProps){\r\n  Reflect.set(objProps,\"update\",function(){\r\n    ...代码同上面的\r\n  })\r\n  return objProps\r\n}\r\nPage(createProxyPage{\r\n     data:{}\r\n\t\t...\r\n})\r\n复制代码这样就可以用createProxyPage让每个页面轻松添加上来update函数\r\n那onLoad生命周期中的代码我要怎么添加呢，还不能覆盖原来的onLoad\r\nfunction createProxyPage(objProxy) {\r\n  Reflect.set(...)\r\n  const proxyPage = new Proxy(objProxy, {\r\n    get(target, prop) {\r\n      if (prop === 'onLoad') {\r\n        // 对onLoad函数进行代理\r\n        Reflect.set(\r\n          target,\r\n          prop,\r\n          new Proxy(target[prop], {\r\n            //onLoad一执行，就会调用下面的代理\r\n            apply(target, thisArgument, argumentsList) {\r\n              //thisArgument就是调用onLoad函数的page对象\r\n              const app = getApp();\r\n              app.globalDataPublisher.add(thisArgument);\r\n              thisArgument.globalDataPublisher = app.globalDataPublisher;\r\n              thisArgument.globalData = app.globalDataPublisher.getGlobalData();\r\n              thisArgument.setData({\r\n                ...thisArgument.globalData\r\n              });\r\n              //执行完注册观察者代码后，再去执行每个页面onLoad中原有的代码\r\n              //即是不会覆盖每个页面的onLoad函数，onLoad函数照常执行\r\n              return Reflect.apply(target, thisArgument, argumentsList);\r\n            }\r\n          })\r\n        );\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n复制代码完整代码如下\r\nfunction createProxyPage(objProps) {\r\n  Reflect.set(objProps, 'update', function() {\r\n    console.log('update更新数据');\r\n    const pages = getCurrentPages();\r\n    const page = pages[pages.length - 1];\r\n    if (this === page) {\r\n      const app = getApp();\r\n      const globalData = app.globalDataPublisher.getGlobalData();\r\n      this.globalData = globalData;\r\n      this.setData({\r\n        ...globalData\r\n      });\r\n    }\r\n  });\r\n  const proxyPage = new Proxy(\r\n    objProps,\r\n\r\n    {\r\n      get(target, prop) {\r\n        if (prop === 'onShow') {\r\n          Reflect.set(\r\n            target,\r\n            prop,\r\n            new Proxy(target[prop], {\r\n              apply(target, thisArgument, argumentsList) {\r\n                const app = getApp();\r\n                thisArgument.globalData = app.globalDataPublisher.getGlobalData();\r\n                thisArgument.setData({\r\n                  ...thisArgument.globalData\r\n                });\r\n                console.log('onShow更新数据');\r\n                return Reflect.apply(target, thisArgument, argumentsList);\r\n              }\r\n            })\r\n          );\r\n          if (prop === 'onLoad') {\r\n            Reflect.set(\r\n              target,\r\n              prop,\r\n              new Proxy(target[prop], {\r\n                apply(target, thisArgument, argumentsList) {\r\n                  const app = getApp();\r\n                  app.globalDataPublisher.add(thisArgument);\r\n                  thisArgument.globalDataPublisher = app.globalDataPublisher;\r\n                  thisArgument.globalData = app.globalDataPublisher.getGlobalData();\r\n                  thisArgument.setData({\r\n                    ...thisArgument.globalData\r\n                  });\r\n                  return Reflect.apply(target, thisArgument, argumentsList);\r\n                }\r\n              })\r\n            );\r\n          }\r\n        }\r\n        return Reflect.get(target, prop);\r\n      }\r\n    }\r\n  );\r\n  return proxyPage;\r\n}\r\nmodule.exports.createProxyPage = createProxyPage;\r\n\r\n复制代码具体代码在下面链接中：\r\ngithub.com/huzhiwu1/gl…\r\n结语\r\n作者：胡志武\r\n时间：2020/03/26\r\n二更：2020/03/28\r\n如果有错漏处，请指正。看官们点个赞吧"}
{"title": "Mpx 小程序框架技术揭秘 ", "author": "Rolan", "push_time": "2019-12-27 00:06", "content": "Github:\thttps://github.com/didi/mpx本文作者: 肖磊（\thttps://github.com/CommanderXL ）与目前业内的几个小程序框架相比较而言，mpx 开发设计的出发点就是基于原生的小程序去做功能增强。所以从开发框架的角度来说，是没有任何“包袱”，围绕着原生小程序这个 core 去做不同功能的 patch 工作，使得开发小程序的体验更好。于是我挑了一些我非常感兴趣的点去学习了下 mpx 在相关功能上的设计与实现。编译环节动态入口编译不同于 web 规范，我们都知道小程序每个 page/component 需要被最终在 webview 上渲染出来的内容是需要包含这几个独立的文件的：js/json/wxml/wxss。为了提升小程序的开发体验，mpx 参考 vue 的 SFC(single file component)的设计思路，采用单文件的代码组织方式进行开发。既然采用这种方式去组织代码的话，那么模板、逻辑代码、json配置文件、style样式等都放到了同一个文件当中。那么 mpx 需要做的一个工作就是如何将 SFC 在代码编译后拆分为 js/json/wxml/wxss 以满足小程序技术规范。熟悉 vue 生态的同学都知道，vue-loader 里面就做了这样一个编译转化工作。具体有关 vue-loader 的工作流程可以参见我写的\t文章 。这里会遇到这样一个问题，就是在 vue 当中，如果你要引入一个页面/组件的话，直接通过\timport 语法去引入对应的 vue 文件即可。但是在小程序的标准规范里面，它有自己一套组件系统，即如果你在某个页面/组件里面想要使用另外一个组件，那么需要在你的 json 配置文件当中去声明usingComponents 这个字段，对应的值为这个组件的路径。在 vue 里面 import 一个 vue 文件，那么这个文件会被当做一个 dependency 去加入到 webpack 的编译流程当中。但是 mpx 是保持小程序原有的功能，去进行功能的增强。因此一个 mpx 文件当中如果需要引入其他页面/组件，那么就是遵照小程序的组件规范需要在\tusingComponents 定义好\t组件名:路径 即可，\tmpx 提供的 webpack 插件来完成确定依赖关系，同时将被引入的页面/组件加入到编译构建的环节当中 。接下来就来看下具体的实现，mpx webpack-plugin 暴露出来的插件上也提供了静态方法去使用 loader。这个 loader 的作用和 vue-loader 的作用类似，首先就是拿到 mpx 原始的文件后转化一个 js 文本的文件。例如一个 list.mpx 文件里面有关 json 的配置会被编译为：require(\"!!../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=json&index=0!../../node_modules/@mpxjs/webpack-plugin/lib/json-compiler/index?root=!../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=json&index=0!./list.mpx\")这样可以清楚的看到 list.mpx 这个文件首先 selector(抽离\tlist.mpx 当中有关 json 的配置，并传入到 json-compiler 当中) --->>> json-compiler(对 json 配置进行处理，添加动态入口等) --->>> extractor(利用 child compiler 单独生成 json 配置文件)其中动态添加入口的处理流程是在 json-compiler 当中去完成的。例如在你的\tpage/home.mpx文件当中的 json 配置中使用了 局部组件\tcomponents/list.mpx :<script type=\"application/json\">\r\n  {\r\n    \"usingComponents\": {\r\n      \"list\": \"../components/list\"\r\n    }\r\n  }\r\n</script>在 json-compiler 当中：...\r\n\r\nconst addEntrySafely = (resource, name, callback) => {\r\n  // 如果loader已经回调，就不再添加entry\r\n  if (callbacked) return callback()\r\n  // 使用 webpack 提供的 SingleEntryPlugin 插件创建一个单文件的入口依赖(即这个 component)\r\n  const dep = SingleEntryPlugin.createDependency(resource, name)\r\n  entryDeps.add(dep)\r\n  // compilation.addEntry 方法开始将这个需要被编译的 component 作为依赖添加到 webpack 的构建流程当中\r\n  // 这里可以看到的是整个动态添加入口文件的过程是深度优先的\r\n  this._compilation.addEntry(this._compiler.context, dep, name, (err, module) => {\r\n    entryDeps.delete(dep)\r\n    checkEntryDeps()\r\n    callback(err, module)\r\n  })\r\n}\r\n\r\nconst processComponent = (component, context, rewritePath, componentPath, callback) => {\r\n  ...\r\n  // 调用 loaderContext 上提供的 resolve 方法去解析这个 component path 完整的路径，以及这个 component 所属的 package 相关的信息(例如 package.json 等)\r\n  this.resolve(context, component, (err, rawResult, info) => {\r\n    ...\r\n    componentPath = componentPath || path.join(subPackageRoot, 'components', componentName + hash(result), componentName)\r\n    ...\r\n    // component path 解析完之后，调用 addEntrySafely 开始在 webpack 构建流程中动态添加入口\r\n    addEntrySafely(rawResult, componentPath, callback)\r\n  })\r\n}\r\n\r\nif (isApp) {\r\n  ...\r\n} else {\r\n  if (json.usingComponents) {\r\n    // async.forEachOf 流程控制依次调用 processComponent 方法\r\n    async.forEachOf(json.usingComponents, (component, name, callback) => {\r\n      processComponent(component, this.context, (path) => {\r\n        json.usingComponents[name] = path\r\n      }, undefined, callback)\r\n    }, callback)\r\n  }\r\n  ...\r\n}\r\n...这里需要解释说明下有关 webpack 提供的 SingleEntryPlugin 插件。这个插件是 webpack 提供的一个内置插件，当这个插件被挂载到 webpack 的编译流程的过程中是，会绑定\tcompiler.hooks.make.tapAsync hook，当这个 hook 触发后会调用这个插件上的 SingleEntryPlugin.createDependency 静态方法去创建一个入口依赖，然后调用\tcompilation.addEntry 将这个依赖加入到编译的流程当中，这个是单入口文件的编译流程的最开始的一个步骤(具体可以参见\tWebpack SingleEntryPlugin 源码 )。Mpx 正是利用了 webpack 提供的这样一种能力，在遵照小程序的自定义组件的规范的前提下，解析 mpx json 配置文件的过程中，手动的调用 SingleEntryPlugin 相关的方法去完成动态入口的添加工作。这样也就串联起了所有的 mpx 文件的编译工作。Render FunctionRender Function 这块的内容我觉得是 Mpx 设计上的一大亮点内容。Mpx 引入 Render Function 主要解决的问题是性能优化方向相关的，因为小程序的架构设计，逻辑层和渲染层是2个独立的。这里直接引用 Mpx 有关 Render Function 对于性能优化相关开发工作的描述：作为一个接管了小程序setData的数据响应开发框架，我们高度重视Mpx的渲染性能，通过小程序官方文档中提到的性能优化建议可以得知，setData对于小程序性能来说是重中之重，setData优化的方向主要有两个：尽可能减少setData调用的频次尽可能减少单次setData传输的数据为了实现以上两个优化方向，我们做了以下几项工作：将组件的静态模板编译为可执行的render函数，通过render函数收集模板数据依赖，只有当render函数中的依赖数据发生变化时才会触发小程序组件的setData，同时通过一个异步队列确保一个tick中最多只会进行一次setData，这个机制和Vue中的render机制非常类似，大大降低了setData的调用频次；将模板编译render函数的过程中，我们还记录输出了模板中使用的数据路径，在每次需要setData时会根据这些数据路径与上一次的数据进行diff，仅将发生变化的数据通过数据路径的方式进行setData，这样确保了每次setData传输的数据量最低，同时避免了不必要的setData操作，进一步降低了setData的频次。接下来我们看下 Mpx 是如何实现 Render Function 的。这里我们从一个简单的 demo 来说起：<template>\r\n  <text>Computed reversed message: \"{{ reversedMessage }}\"</text>\r\n  <view>the c string {{ demoObj.a.b.c }}</view>\r\n  <view wx:class=\"{{ { active: isActive } }}\"></view>\r\n</template>\r\n\r\n<script>\r\nimport { createComponent } from \"@mpxjs/core\";\r\n\r\ncreateComponent({\r\n  data: {\r\n    isActive: true,\r\n    message: 'messages',\r\n    demoObj: {\r\n      a: {\r\n        b: {\r\n          c: 'c'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed() {\r\n    reversedMessage() {\r\n      return this.message.split('').reverse().join('')\r\n    }\r\n  }\r\n})\r\n\r\n</script>.mpx 文件经过 loader 编译转换的过程中。对于 template 模块的处理和 vue 类似，首先将 template 转化为 AST，然后再将 AST 转化为 code 的过程中做相关转化的工作，最终得到我们需要的 template 模板代码。在\tpackages/webpack-plugin/lib/template-compiler.js 模板处理 loader 当中:let renderResult = bindThis(`global.currentInject = {\r\n    moduleId: ${JSON.stringify(options.moduleId)},\r\n    render: function () {\r\n      var __seen = [];\r\n      var renderData = {};\r\n      ${compiler.genNode(ast)}return renderData;\r\n    }\r\n};\\n`, {\r\n    needCollect: true,\r\n    ignoreMap: meta.wxsModuleMap\r\n  })在 render 方法内部，创建 renderData 局部变量，调用\tcompiler.genNode(ast) 方法完成 Render Function 核心代码的生成工作，最终将这个 renderData 返回。例如在上面给出来的 demo 实例当中，通过\tcompiler.genNode(ast) 方法最终生成的代码为：((mpxShow)||(mpxShow)===undefined?'':'display:none;');\r\nif(( isActive )){\r\n}\r\n\"Computed reversed message: \\\"\"+( reversedMessage )+\"\\\"\";\r\n\"the c string \"+( demoObj.a.b.c );\r\n(__injectHelper.transformClass(\"list\", ( {active: isActive} )));mpx 文件当中的 template 模块被初步处理成上面的代码后，可以看到这是一段可执行的 js 代码。那么这段 js 代码到底是用作何处呢？可以看到\tcompiler.genNode 方法是被包裹至\tbindThis方法当中的。即这段 js 代码还会被\tbindThis 方法做进一步的处理。打开 bind-this.js 文件可以看到内部的实现其实就是一个 babel 的 transform plugin。在处理上面这段 js 代码的 AST 的过程中，通过这个插件对 js 代码做进一步的处理。最终这段 js 代码处理后的结果是：/* mpx inject */ global.currentInject = {\r\n  moduleId: \"2271575d\",\r\n  render: function () {\r\n    var __seen = [];\r\n    var renderData = {};\r\n    (renderData[\"mpxShow\"] = [this.mpxShow, \"mpxShow\"], this.mpxShow) || (renderData[\"mpxShow\"] = [this.mpxShow, \"mpxShow\"], this.mpxShow) === undefined ? '' : 'display:none;';\r\n    \"Computed reversed message: \\\"\" + (renderData[\"reversedMessage\"] = [this.reversedMessage, \"reversedMessage\"], this.reversedMessage) + \"\\\"\";\r\n    \"the c string \" + (renderData[\"demoObj.a.b.c\"] = [this.demoObj.a.b.c, \"demoObj\"], this.__get(this.__get(this.__get(this.demoObj, \"a\"), \"b\"), \"c\"));\r\n    this.__get(__injectHelper, \"transformClass\")(\"list\", { active: (renderData[\"isActive\"] = [this.isActive, \"isActive\"], this.isActive) });\r\n    return renderData;\r\n  }\r\n};bindThis 方法对于 js 代码的转化规则就是：一个变量的访问形式，改造成 this.xxx 的形式；对象属性的访问形式，改造成 this.__get(object, property) 的形式(this.__get方法为运行时 mpx runtime 提供的方法)这里的 this 为 mpx 构造的一个代理对象，在你业务代码当中调用 createComponent/createPage 方法传入的配置项，例如 data，都会通过这个代理对象转化为响应式的数据。需要注意的是不管哪种数据形式的改造，最终需要达到的效果就是确保在 Render Function 执行的过程当中，这些被模板使用到的数据能被正常的访问到，在访问的阶段中，这些被访问到的数据即被加入到 mpx 构建的整个响应式的系统当中。只要在 template 当中使用到的 data 数据(包括衍生的 computed 数据)，最终都会被 renderData 所记录，而记录的数据形式是例如：renderData['xxx'] = [this.xxx, 'xxx'] // 数组的形式，第一项为这个数据实际的值，第二项为这个数据的 firstKey(主要用以数据 diff 的工作)以上就是 mpx 生成 Render Function 的整个过程。总结下 Render Function 所做的工作：执行 render 函数，将渲染模板使用到的数据加入到响应式的系统当中；返回 renderData 用以接下来的数据 diff 以及调用小程序的 setData 方法来完成视图的更新Wxs ModuleWxs 是小程序自己推出的一套脚本语言。\t官方文档 给出的示例，wxs 模块必须要声明式的被 wxml 引用。和 js 在 jsCore 当中去运行不同的是 wxs 是在渲染线程当中去运行的。因此 wxs 的执行便少了一次从 jsCore 执行的线程和渲染线程的通讯，从这个角度来说是对代码执行效率和性能上的比较大的一个优化手段。有关官方提到的有关 wxs 的运行效率的问题还有待论证：“在 android 设备中，小程序里的 wxs 与 js 运行效率无差异，而在 ios 设备中，小程序里的 wxs 会比 js 快 2~20倍。”因为 mpx 是对小程序做渐进增强，因此 wxs 的使用方式和原生的小程序保持一致。在你的\t.mpx 文件当中的 template block 内通过路径直接去引入 wxs 模块即可使用：<template>\r\n  <wxs src=\"../wxs/components/list.wxs\" module=\"list\">\r\n  <view>{{ list.FOO }}</view>\r\n</template>\r\n\r\n\r\n// wxs/components/list.wxs\r\n\r\nconst Foo = 'This is from list wxs module'\r\nmodule.exports = {\r\n  Foo\r\n}在 template 模块经过 template-compiler 处理的过程中。模板编译器 compiler 在解析模板的 AST 过程中会针对 wxs 标签缓存一份 wxs 模块的映射表：{\r\n  meta: {\r\n    wxsModuleMap: {\r\n      list: '../wxs/components/list.wxs'\r\n    }\r\n  }\r\n}当 compiler 对 template 模板解析完后，template-compiler 接下来就开始处理 wxs 模块相关的内容：// template-compiler/index.js\r\n\r\nmodule.exports = function (raw) {\r\n  ...\r\n\r\n  const addDependency = dep => {\r\n    const resourceIdent = dep.getResourceIdentifier()\r\n    if (resourceIdent) {\r\n      const factory = compilation.dependencyFactories.get(dep.constructor)\r\n      if (factory === undefined) {\r\n        throw new Error(`No module factory available for dependency type: ${dep.constructor.name}`)\r\n      }\r\n      let innerMap = dependencies.get(factory)\r\n      if (innerMap === undefined) {\r\n        dependencies.set(factory, (innerMap = new Map()))\r\n      }\r\n      let list = innerMap.get(resourceIdent)\r\n      if (list === undefined) innerMap.set(resourceIdent, (list = []))\r\n      list.push(dep)\r\n    }\r\n  }\r\n\r\n  // 如果有 wxsModuleMap 即为 wxs module 依赖的话，那么下面会调用 compilation.addModuleDependencies 方法\r\n  // 将 wxsModule 作为 issuer 的依赖再次进行编译，最终也会被打包进输出的模块代码当中\r\n  // 需要注意的就是 wxs module 不仅要被注入到 bundle 里的 render 函数当中，同时也会通过 wxs-loader 处理，单独输出一份可运行的 wxs js 文件供 wxml 引入使用\r\n  for (let module in meta.wxsModuleMap) {\r\n    isSync = false\r\n    let src = meta.wxsModuleMap[module]\r\n    const expression = `require(${JSON.stringify(src)})`\r\n    const deps = []\r\n    // parser 为 js 的编译器\r\n    parser.parse(expression, {\r\n      current: { // 需要注意的是这里需要部署 addDependency 接口，因为通过 parse.parse 对代码进行编译的时候，会调用这个接口来获取 require(${JSON.stringify(src)}) 编译产生的依赖模块\r\n        addDependency: dep => {\r\n          dep.userRequest = module\r\n          deps.push(dep)\r\n        }\r\n      },\r\n      module: issuer\r\n    })\r\n    issuer.addVariable(module, expression, deps) // 给 issuer module 添加 variable 依赖\r\n    iterationOfArrayCallback(deps, addDependency)\r\n  }\r\n\r\n  // 如果没有 wxs module 的处理，那么 template-compiler 即为同步任务，否则为异步任务\r\n  if (isSync) {\r\n    return result\r\n  } else {\r\n    const callback = this.async()\r\n\r\n    const sortedDependencies = []\r\n    for (const pair1 of dependencies) {\r\n      for (const pair2 of pair1[1]) {\r\n        sortedDependencies.push({\r\n          factory: pair1[0],\r\n          dependencies: pair2[1]\r\n        })\r\n      }\r\n    }\r\n\r\n    // 调用 compilation.addModuleDependencies 方法，将 wxs module 作为 issuer module 的依赖加入到编译流程中\r\n    compilation.addModuleDependencies(\r\n      issuer,\r\n      sortedDependencies,\r\n      compilation.bail,\r\n      null,\r\n      true,\r\n      () => {\r\n        callback(null, result)\r\n      }\r\n    )\r\n  }\r\n}template/script/style/json 模块单文件的生成不同于 Vue 借助 webpack 是将 Vue 单文件最终打包成单独的 js chunk 文件。而小程序的规范是每个页面/组件需要对应的 wxml/js/wxss/json 4个文件。因为 mpx 使用单文件的方式去组织代码，所以在编译环节所需要做的工作之一就是将 mpx 单文件当中不同 block 的内容拆解到对应文件类型当中。在动态入口编译的小节里面我们了解到 mpx 会分析每个 mpx 文件的引用依赖，从而去给这个文件创建一个 entry 依赖(SingleEntryPlugin)并加入到 webpack 的编译流程当中。我们还是继续看下 mpx loader 对于 mpx 单文件初步编译转化后的内容：/* script */\r\nexport * from \"!!babel-loader!../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=script&index=0!./list.mpx\"\r\n\r\n/* styles */\r\nrequire(\"!!../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=styles&index=0!../../node_modules/@mpxjs/webpack-plugin/lib/wxss/loader?root=&importLoaders=1&extract=true!../../node_modules/@mpxjs/webpack-plugin/lib/style-compiler/index?{\\\"id\\\":\\\"2271575d\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false,\\\"transRpx\\\":{\\\"mode\\\":\\\"only\\\",\\\"comment\\\":\\\"use rpx\\\",\\\"include\\\":\\\"/Users/XRene/demo/mpx-demo-source/src\\\"}}!stylus-loader!../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=styles&index=0!./list.mpx\")\r\n\r\n/* json */\r\nrequire(\"!!../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=json&index=0!../../node_modules/@mpxjs/webpack-plugin/lib/json-compiler/index?root=!../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=json&index=0!./list.mpx\")\r\n\r\n/* template */\r\nrequire(\"!!../../node_modules/@mpxjs/webpack-plugin/lib/extractor?type=template&index=0!../../node_modules/@mpxjs/webpack-plugin/lib/wxml/wxml-loader?root=!../../node_modules/@mpxjs/webpack-plugin/lib/template-compiler/index?{\\\"usingComponents\\\":[],\\\"hasScoped\\\":false,\\\"isNative\\\":false,\\\"moduleId\\\":\\\"2271575d\\\"}!../../node_modules/@mpxjs/webpack-plugin/lib/selector?type=template&index=0!./list.mpx\")接下来可以看下 styles/json/template 这3个 block 的处理流程是什么样。首先来看下 json block 的处理流程：\tlist.mpx -> json-compiler -> extractor 。第一个阶段 list.mpx 文件经由 json-compiler 的处理流程在前面的章节已经讲过，主要就是分析依赖增加动态入口的编译过程。当所有的依赖分析完后，调用 json-compiler loader 的异步回调函数：// lib/json-compiler/index.js\r\n\r\nmodule.exports = function (content) {\r\n\r\n  ...\r\n  const nativeCallback = this.async()\r\n  ...\r\n\r\n  let callbacked = false\r\n  const callback = (err, processOutput) => {\r\n    checkEntryDeps(() => {\r\n      callbacked = true\r\n      if (err) return nativeCallback(err)\r\n      let output = `var json = ${JSON.stringify(json, null, 2)};\\n`\r\n      if (processOutput) output = processOutput(output)\r\n      output += `module.exports = JSON.stringify(json, null, 2);\\n`\r\n      nativeCallback(null, output)\r\n    })\r\n  }\r\n}这里我们可以看到经由 json-compiler 处理后，通过\tnativeCallback 方法传入下一个 loader 的文本内容形如：var json = {\r\n  \"usingComponents\": {\r\n    \"list\": \"/components/list397512ea/list\"\r\n  }\r\n}\r\n\r\nmodule.exports = JSON.stringify(json, null, 2)即这段文本内容会传递到下一个 loader 内部进行处理，即 extractor。接下来我们来看下 extractor 里面主要是实现了哪些功能：// lib/extractor.js\r\n\r\nmodule.exports = function (content) {\r\n  ...\r\n  const contentLoader = normalize.lib('content-loader')\r\n  let request = `!!${contentLoader}?${JSON.stringify(options)}!${this.resource}` // 构建一个新的 resource，且这个 resource 只需要经过 content-loader\r\n  let resultSource = defaultResultSource\r\n  const childFilename = 'extractor-filename'\r\n  const outputOptions = {\r\n    filename: childFilename\r\n  }\r\n  // 创建一个 child compiler\r\n  const childCompiler = mainCompilation.createChildCompiler(request, outputOptions, [\r\n    new NodeTemplatePlugin(outputOptions),\r\n    new LibraryTemplatePlugin(null, 'commonjs2'), // 最终输出的 chunk 内容遵循 commonjs 规范的可执行的模块代码 module.exports = (function(modules) {})([modules])\r\n    new NodeTargetPlugin(),\r\n    new SingleEntryPlugin(this.context, request, resourcePath),\r\n    new LimitChunkCountPlugin({ maxChunks: 1 })\r\n  ])\r\n\r\n  ...\r\n  childCompiler.hooks.thisCompilation.tap('MpxWebpackPlugin ', (compilation) => {\r\n    // 创建 loaderContext 时触发的 hook，在这个 hook 触发的时候，将原本从 json-compiler 传递过来的 content 内容挂载至 loaderContext.__mpx__ 属性上面以供接下来的 content -loader 来进行使用\r\n    compilation.hooks.normalModuleLoader.tap('MpxWebpackPlugin', (loaderContext, module) => {\r\n      // 传递编译结果，子编译器进入content-loader后直接输出\r\n      loaderContext.__mpx__ = {\r\n        content,\r\n        fileDependencies: this.getDependencies(),\r\n        contextDependencies: this.getContextDependencies()\r\n      }\r\n    })\r\n  })\r\n\r\n  let source\r\n\r\n  childCompiler.hooks.afterCompile.tapAsync('MpxWebpackPlugin', (compilation, callback) => {\r\n    // 这里 afterCompile 产出的 assets 的代码当中是包含 webpack runtime bootstrap 的代码，不过需要注意的是这个 source 模块的产出形式\r\n    // 因为使用了 new LibraryTemplatePlugin(null, 'commonjs2') 等插件。所以产出的 source 是可以在 node 环境下执行的 module\r\n    // 因为在 loaderContext 上部署了 exec 方法，即可以直接执行 commonjs 规范的 module 代码，这样就最终完成了 mpx 单文件当中不同模块的抽离工作\r\n    source = compilation.assets[childFilename] && compilation.assets[childFilename].source()\r\n\r\n    // Remove all chunk assets\r\n    compilation.chunks.forEach((chunk) => {\r\n      chunk.files.forEach((file) => {\r\n        delete compilation.assets[file]\r\n      })\r\n    })\r\n\r\n    callback()\r\n  })\r\n\r\n  childCompiler.runAsChild((err, entries, compilation) => {\r\n    ...\r\n    try {\r\n      // exec 是 loaderContext 上提供的一个方法，在其内部会构建原生的 node.js module，并执行这个 module 的代码\r\n      // 执行这个 module 代码后获取的内容就是通过 module.exports 导出的内容\r\n      let text = this.exec(source, request)\r\n      if (Array.isArray(text)) {\r\n        text = text.map((item) => {\r\n          return item[1]\r\n        }).join('\\n')\r\n      }\r\n\r\n      let extracted = extract(text, options.type, resourcePath, +options.index, selfResourcePath)\r\n      if (extracted) {\r\n        resultSource = `module.exports = __webpack_public_path__ + ${JSON.stringify(extracted)};`\r\n      }\r\n    } catch (err) {\r\n      return nativeCallback(err)\r\n    }\r\n    if (resultSource) {\r\n      nativeCallback(null, resultSource)\r\n    } else {\r\n      nativeCallback()\r\n    }\r\n  })\r\n}稍微总结下上面的处理流程：module.exports\r\n所以上面的示例 demo 最终会输出一个 json 文件，里面包含的内容即为：{\r\n  \"usingComponents\": {\r\n    \"list\": \"/components/list397512ea/list\"\r\n  }\r\n}运行时环节以上几个章节主要是分析了几个 Mpx 在编译构建环节所做的工作。接下来我们来看下 Mpx 在运行时环节做了哪些工作。响应式系统小程序也是通过数据去驱动视图的渲染，需要手动的调用\tsetData 去完成这样一个动作。同时小程序的视图层也提供了用户交互的响应事件系统，在 js 代码中可以去注册相关的事件回调并在回调中去更改相关数据的值。Mpx 使用 Mobx 作为响应式数据工具并引入到小程序当中，使得小程序也有一套完成的响应式的系统，让小程序的开发有了更好的体验。还是从组件的角度开始分析 mpx 的整个响应式的系统。每次通过\tcreateComponent 方法去创建一个新的组件，这个方法将原生的小程序创造组件的方法\tComponent 做了一层代理，例如在 attched 的生命周期钩子函数内部会注入一个 mixin：// attached 生命周期钩子 mixin\r\n\r\nattached() {\r\n  // 提供代理对象需要的api\r\n  transformApiForProxy(this, currentInject)\r\n  // 缓存options\r\n  this.$rawOptions = rawOptions // 原始的，没有剔除 customKeys 的 options 配置\r\n  // 创建proxy对象\r\n  const mpxProxy = new MPXProxy(rawOptions, this) // 将当前实例代理到 MPXProxy 这个代理对象上面去\r\n  this.$mpxProxy = mpxProxy // 在小程序实例上绑定 $mpxProxy 的实例\r\n  // 组件监听视图数据更新, attached之后才能拿到properties\r\n  this.$mpxProxy.created()\r\n}在这个方法内部首先调用\ttransformApiForProxy 方法对组件实例上下文\tthis 做一层代理工作，在 context 上下文上去重置小程序的 setData 方法，同时拓展 context 相关的属性内容：function transformApiForProxy (context, currentInject) {\r\n  const rawSetData = context.setData.bind(context) // setData 绑定对应的 context 上下文\r\n  Object.defineProperties(context, {\r\n    setData: { // 重置 context 的 setData 方法\r\n      get () {\r\n        return this.$mpxProxy.setData.bind(this.$mpxProxy)\r\n      },\r\n      configurable: true\r\n    },\r\n    __getInitialData: {\r\n      get () {\r\n        return () => context.data\r\n      },\r\n      configurable: false\r\n    },\r\n    __render: { // 小程序原生的 setData 方法\r\n      get () {\r\n        return rawSetData\r\n      },\r\n      configurable: false\r\n    }\r\n  })\r\n  // context 绑定注入的render函数\r\n  if (currentInject) {\r\n    if (currentInject.render) { // 编译过程中生成的 render 函数\r\n      Object.defineProperties(context, {\r\n        __injectedRender: {\r\n          get () {\r\n            return currentInject.render.bind(context)\r\n          },\r\n          configurable: false\r\n        }\r\n      })\r\n    }\r\n    if (currentInject.getRefsData) {\r\n      Object.defineProperties(context, {\r\n        __getRefsData: {\r\n          get () {\r\n            return currentInject.getRefsData\r\n          },\r\n          configurable: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n}接下来实例化一个 mpxProxy 实例并挂载至 context 上下文的 $mpxProxy 属性上，并调用 mpxProxy 的 created 方法完成这个代理对象的初始化的工作。在 created 方法内部主要是完成了以下的几个工作：initApi，在组件实例 this 上挂载\t$watch ,\t$forceUpdate ,\t$updated ,\t$nextTick 等方法，这样在你的业务代码当中即可直接访问实例上部署好的这些方法；initDatainitComputed，将 computed 计算属性字段全部代理至组件实例 this 上；通过 Mobx observable 方法将 data 数据转化为响应式的数据；initWatch，初始化所有的 watcher 实例；initRender，初始化一个 renderWatcher 实例；这里我们具体的来看下 initRender 方法内部是如何进行工作的：export default class MPXProxy {\r\n  ...\r\n  initRender() {\r\n    let renderWatcher\r\n    let renderExcutedFailed = false\r\n    if (this.target.__injectedRender) { // webpack 注入的有关这个 page/component 的 renderFunction\r\n      renderWatcher = watch(this.target, () => {\r\n        if (renderExcutedFailed) {\r\n          this.render()\r\n        } else {\r\n          try {\r\n            return this.target.__injectedRender() // 执行 renderFunction，获取渲染所需的响应式数据\r\n          } catch(e) {\r\n            ...\r\n          }\r\n        }\r\n      }, {\r\n        handler: (ret) => {\r\n          if (!renderExcutedFailed) {\r\n            this.renderWithData(ret) // 渲染页面\r\n          }\r\n        },\r\n        immediate: true,\r\n        forceCallback: true\r\n      })\r\n    }\r\n  }\r\n  ...\r\n}在 initRender 方法内部非常清楚的看到，首先判断这个 page/component 是否具有 renderFunction，如果有的话那么就直接实例化一个 renderWatcher：export default class Watcher {\r\n  constructor (context, expr, callback, options) {\r\n    this.destroyed = false\r\n    this.get = () => {\r\n      return type(expr) === 'String' ? getByPath(context, expr) : expr()\r\n    }\r\n    const callbackType = type(callback)\r\n    if (callbackType === 'Object') {\r\n      options = callback\r\n      callback = null\r\n    } else if (callbackType === 'String') {\r\n      callback = context[callback]\r\n    }\r\n    this.callback = typeof callback === 'function' ? action(callback.bind(context)) : null\r\n    this.options = options || {}\r\n    this.id = ++uid\r\n    // 创建一个新的 reaction\r\n    this.reaction = new Reaction(`mpx-watcher-${this.id}`, () => {\r\n      this.update()\r\n    })\r\n    // 在调用 getValue 函数的时候，实际上是调用 reaction.track 方法，这个方法内部会自动执行 effect 函数，即执行 this.update() 方法，这样便会出发一次模板当中的 render 函数来完成依赖的收集\r\n    const value = this.getValue()\r\n    if (this.options.immediateAsync) { // 放置到一个队列里面去执行\r\n      queueWatcher(this)\r\n    } else { // 立即执行 callback\r\n      this.value = value\r\n      if (this.options.immediate) {\r\n        this.callback && this.callback(this.value)\r\n      }\r\n    }\r\n  }\r\n\r\n  getValue () {\r\n    let value\r\n    this.reaction.track(() => {\r\n      value = this.get() // 获取注入的 render 函数执行后返回的 renderData 的值，在执行 render 函数的过程中，就会访问响应式数据的值\r\n      if (this.options.deep) {\r\n        const valueType = type(value)\r\n        // 某些情况下，最外层是非isObservable 对象，比如同时观察多个属性时\r\n        if (!isObservable(value) && (valueType === 'Array' || valueType === 'Object')) {\r\n          if (valueType === 'Array') {\r\n            value = value.map(item => toJS(item, false))\r\n          } else {\r\n            const newValue = {}\r\n            Object.keys(value).forEach(key => {\r\n              newValue[key] = toJS(value[key], false)\r\n            })\r\n            value = newValue\r\n          }\r\n        } else {\r\n          value = toJS(value, false)\r\n        }\r\n      } else if (isObservableArray(value)) {\r\n        value.peek()\r\n      } else if (isObservableObject(value)) {\r\n        keys(value)\r\n      }\r\n    })\r\n    return value\r\n  }\r\n\r\n  update () {\r\n    if (this.options.sync) {\r\n      this.run()\r\n    } else {\r\n      queueWatcher(this)\r\n    }\r\n  }\r\n\r\n  run () {\r\n    const immediateAsync = !this.hasOwnProperty('value')\r\n    const oldValue = this.value\r\n    this.value = this.getValue() // 重新获取新的 renderData 的值\r\n    if (immediateAsync || this.value !== oldValue || isObject(this.value) || this.options.forceCallback) {\r\n      if (this.callback) {\r\n        immediateAsync ? this.callback(this.value) : this.callback(this.value, oldValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  destroy () {\r\n    this.destroyed = true\r\n    this.reaction.getDisposer()()\r\n  }\r\n}Watcher 观察者核心实现的工作流程就是：this.update()\r\nmpx 在构建这个响应式的系统当中，主要有2个大的环节，其一为在构建编译的过程中，将 template 模块转化为 renderFunction，提供了渲染模板时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码当中，其二就是在运行环节，mpx 通过构建一个小程序实例的代理对象，将小程序实例上的数据访问全部代理至 MPXProxy 实例上，而 MPXProxy 实例即 mpx 基于 Mobx 去构建的一套响应式数据对象，首先将 data 数据转化为响应式数据，其次提供了 computed 计算属性，watch 方法等一系列增强的拓展属性/方法，虽然在你的业务代码当中 page/component 实例 this 都是小程序提供的，但是最终经过代理机制，实际上访问的是 MPXProxy 所提供的增强功能，所以 mpx 也是通过这样一个代理对象去接管了小程序的实例。需要特别指出的是，mpx 将小程序官方提供的 setData 方法同样收敛至内部，这也是响应式系统提供的基础能力，即开发者只需要关注业务开发，而有关小程序渲染运行在 mpx 内部去帮你完成。性能优化由于小程序的双线程的架构设计，逻辑层和视图层之间需要桥接 native bridge。如果要完成视图层的更新，那么逻辑层需要调用 setData 方法，数据经由 native bridge，再到渲染层，这个工程流程为：小程序逻辑层调用宿主环境的 setData 方法；逻辑层执行 JSON.stringify 将待传输数据转换成字符串并拼接到特定的JS脚本，并通过evaluateJavascript 执行脚本将数据传输到渲染层；渲染层接收到后， WebView JS 线程会对脚本进行编译，得到待更新数据后进入渲染队列等待 WebView 线程空闲时进行页面渲染；WebView 线程开始执行渲染时，待更新数据会合并到视图层保留的原始 data 数据，并将新数据套用在WXML片段中得到新的虚拟节点树。经过新虚拟节点树与当前节点树的 diff 对比，将差异部分更新到UI视图。同时，将新的节点树替换旧节点树，用于下一次重渲染。文章来源而 setData 作为逻辑层和视图层之间通讯的核心接口，那么对于这个接口的使用遵照一些准则将有助于性能方面的提升。尽可能的减少 setData 传输的数据Mpx 在这个方面所做的工作之一就是基于数据路径的 diff。这也是官方所推荐的 setData 的方式。每次响应式数据发生了变化，调用 setData 方法的时候确保传递的数据都为 diff 过后的最小数据集，这样来减少 setData 传输的数据。接下来我们就来看下这个优化手段的具体实现思路，首先还是从一个简单的 demo 来看：<script>\r\nimport { createComponent } from '@mpxjs/core'\r\n\r\ncreateComponent({\r\n  data: {\r\n    obj: {\r\n      a: {\r\n        c: 1,\r\n        d: 2\r\n      }\r\n    }\r\n  }\r\n  onShow() {\r\n    setTimeout(() => {\r\n      this.obj.a = {\r\n        c: 1,\r\n        d: 'd'\r\n      }\r\n    }, 200)\r\n  }\r\n})\r\n</script>在示例 demo 当中，声明了一个 obj 对象(这个对象里面的内容在模块当中被使用到了)。然后经过 200ms 后，手动修改 obj.a 的值，因为对于 c 字段来说它的值没有发生改变，而 d 字段发生了改变。因此在 setData 方法当中也应该只更新 obj.a.d 的值，即：this.setData('obj.a.d', 'd')因为 mpx 是整体接管了小程序当中有关调用 setData 方法并驱动视图更新的机制。所以当你在改变某些数据的时候，mpx 会帮你完成数据的 diff 工作，以保证每次调用 setData 方法时，传入的是最小的更新数据集。这里也简单的分析下 mpx 是如何去实现这样的功能的。在上文的编译构建阶段有分析到 mpx 生成的 Render Function，这个 Render Function 每次执行的时候会返回一个 renderData，而这个 renderData 即用以接下来进行 setData 驱动视图渲染的原始数据。renderData 的数据组织形式是模板当中使用到的数据路径作为 key 键值，对应的值使用一个数组组织，数组第一项为数据的访问路径(可获取到对应渲染数据)，第二项为数据路径的第一个键值，例如在 demo 示例当中的 renderData 数据如下：renderData['obj.a.c'] = [this.obj.a.c, 'obj']\r\nrenderData['obj.a.d'] = [this.obj.a.d, 'obj']当页面第一次渲染，或者是响应式输出发生变化的时候，Render Function 都会被执行一次用以获取最新的 renderData 来进行接下来的页面渲染过程。// src/core/proxy.js\r\n\r\nclass MPXProxy {\r\n  ...\r\n  renderWithData(rawRenderData) { // rawRenderData 即为 Render Function 执行后获取的初始化 renderData\r\n    const renderData = preprocessRenderData(rawRenderData) // renderData 数据的预处理\r\n    if (!this.miniRenderData) { // 最小数据渲染集，页面/组件初次渲染的时候使用 miniRenderData 进行渲染，初次渲染的时候是没有数据需要进行 diff 的\r\n      this.miniRenderData = {}\r\n      for (let key in renderData) { // 遍历数据访问路径\r\n        if (renderData.hasOwnProperty(key)) {\r\n          let item = renderData[key] \r\n          let data = item[0]\r\n          let firstKey = item[1] // 某个字段 path 的第一个 key 值\r\n          if (this.localKeys.indexOf(firstKey) > -1) {\r\n            this.miniRenderData[key] = diffAndCloneA(data).clone\r\n          }\r\n        }\r\n      }\r\n      this.doRender(this.miniRenderData)\r\n    } else { // 非初次渲染使用 processRenderData 进行数据的处理，主要是需要进行数据的 diff 取值工作，并更新 miniRenderData 的值\r\n      this.doRender(this.processRenderData(renderData))\r\n    }\r\n  }\r\n\r\n  processRenderData(renderData) {\r\n    let result = {}\r\n    for (let key in renderData) {\r\n      if (renderData.hasOwnProperty(key)) {\r\n        let item = renderData[key]\r\n        let data = item[0]\r\n        let firstKey = item[1]\r\n        let { clone, diff } = diffAndCloneA(data, this.miniRenderData[key]) // 开始数据 diff\r\n        // firstKey 必须是为响应式数据的 key，且这个发生变化的 key 为 forceUpdateKey 或者是在 diff 阶段发现确实出现了 diff 的情况\r\n        if (this.localKeys.indexOf(firstKey) > -1 && (this.checkInForceUpdateKeys(key) || diff)) {\r\n          this.miniRenderData[key] = result[key] = clone\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  ...\r\n}\r\n\r\n// src/helper/utils.js\r\n\r\n// 如果 renderData 里面即包含对某个 key 的访问，同时还有对这个 key 的子节点访问的话，那么需要剔除这个子节点\r\n/**\r\n * process renderData, remove sub node if visit parent node already\r\n * @param {Object} renderData\r\n * @return {Object} processedRenderData\r\n */\r\nexport function preprocessRenderData (renderData) { \r\n  // method for get key path array\r\n  const processKeyPathMap = (keyPathMap) => {\r\n    let keyPath = Object.keys(keyPathMap)\r\n    return keyPath.filter((keyA) => {\r\n      return keyPath.every((keyB) => {\r\n        if (keyA.startsWith(keyB) && keyA !== keyB) {\r\n          let nextChar = keyA[keyB.length]\r\n          if (nextChar === '.' || nextChar === '[') {\r\n            return false\r\n          }\r\n        }\r\n        return true\r\n      })\r\n    })\r\n  }\r\n\r\n  const processedRenderData = {}\r\n  const renderDataFinalKey = processKeyPathMap(renderData) // 获取最终需要被渲染的数据的 key\r\n  Object.keys(renderData).forEach(item => {\r\n    if (renderDataFinalKey.indexOf(item) > -1) {\r\n      processedRenderData[item] = renderData[item]\r\n    }\r\n  })\r\n  return processedRenderData\r\n}其中在 processRenderData 方法内部调用了 diffAndCloneA 方法去完成数据的 diff 工作。在这个方法内部判断新、旧值是否发生变化，返回的 diff 字段即表示是否发生了变化，clone 为 diffAndCloneA 接受到的第一个数据的深拷贝值。这里大致的描述下相关流程：响应式的数据发生了变化，触发 Render Function 重新执行，获取最新的 renderData；renderData 的预处理，主要是用以剔除通过路径访问时同时有父、子路径情况下的子路径的 key；判断是否存在 miniRenderData 最小数据渲染集，如果没有那么 Mpx 完成 miniRenderData 最小渲染数据集的收集，如果有那么使用处理后的 renderData 和 miniRenderData 进行数据的 diff 工作(diffAndCloneA)，并更新最新的 miniRenderData 的值；调用 doRender 方法，进入到 setData 阶段相关参阅文档：Page )尽可能的减少 setData 的调用频次每次调用 setData 方法都会完成一次从逻辑层 -> native bridge -> 视图层的通讯，并完成页面的更新。因此频繁的调用 setData 方法势必也会造成视图的多次渲染，用户的交互受阻。所以对于 setData 方法另外一个优化角度就是尽可能的减少 setData 的调用频次，将多个同步的 setData 操作合并到一次调用当中。接下来就来看下 mpx 在这方面是如何做优化的。还是先来看一个简单的 demo:<script>\r\nimport { createComponent } from '@mpxjs/core'\r\n\r\ncreateComponent({\r\n  data: {\r\n    msg: 'hello',\r\n    obj: {\r\n      a: {\r\n        c: 1,\r\n        d: 2\r\n      }\r\n    }\r\n  }\r\n  watch: {\r\n    obj: {\r\n      handler() {\r\n        this.msg = 'world'\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  onShow() {\r\n    setTimeout(() => {\r\n      this.obj.a = {\r\n        c: 1,\r\n        d: 'd'\r\n      }\r\n    }, 200)\r\n  }\r\n})\r\n</script>在示例 demo 当中，msg 和 obj 都作为模板依赖的数据，这个组件开始展示后的 200ms，更新 obj.a 的值，同时 obj 被 watch，当 obj 发生改变后，更新 msg 的值。这里的逻辑处理顺序是：obj.a 变化 -> 将 renderWatch 加入到执行队列 -> 触发 obj watch -> 将 obj watch 加入到执行队列 -> 将执行队列放到下一帧执行 -> 按照 watch id 从小到大依次执行 watch.run -> setData 方法调用一次(即 renderWatch 回调)，统一更新 obj.a 及 msg -> 视图重新渲染接下来就来具体看下这个流程：由于 obj 作为模板渲染的依赖数据，自然会被这个组件的 renderWatch 作为依赖而被收集。当 obj 的值发生变化后，首先触发 reaction 的回调，即\tthis.update() 方法，如果是个同步的 watch，那么立即调用\tthis.run() 方法，即 watcher 监听的回调方法，否则就通过\tqueueWatcher(this) 方法将这个 watcher 加入到执行队列：// src/core/watcher.js\r\nexport default Watcher {\r\n  constructor (context, expr, callback, options) {\r\n    ...\r\n    this.id = ++uid\r\n    this.reaction = new Reaction(`mpx-watcher-${this.id}`, () => {\r\n      this.update()\r\n    })\r\n    ...\r\n  }\r\n\r\n  update () {\r\n    if (this.options.sync) {\r\n      this.run()\r\n    } else {\r\n      queueWatcher(this)\r\n    }\r\n  }\r\n}而在 queueWatcher 方法中，lockTask 维护了一个异步锁，即将 flushQueue 当成微任务统一放到下一帧去执行。所以在 flushQueue 开始执行之前，还会有同步的代码将 watcher 加入到执行队列当中，当 flushQueue 开始执行的时候，依照 watcher.id 升序依次执行，这样去确保 renderWatcher 在执行前，其他所有的 watcher 回调都执行完了，即执行 renderWatcher 的回调的时候获取到的 renderData 都是最新的，然后再去进行 setData 的操作，完成页面的更新。// src/core/queueWatcher.js\r\nimport { asyncLock } from '../helper/utils'\r\nconst queue = []\r\nconst idsMap = {}\r\nlet flushing = false\r\nlet curIndex = 0\r\nconst lockTask = asyncLock()\r\nexport default function queueWatcher (watcher) {\r\n  if (!watcher.id && typeof watcher === 'function') {\r\n    watcher = {\r\n      id: Infinity,\r\n      run: watcher\r\n    }\r\n  }\r\n  if (!idsMap[watcher.id] || watcher.id === Infinity) {\r\n    idsMap[watcher.id] = true\r\n    if (!flushing) {\r\n      queue.push(watcher)\r\n    } else {\r\n      let i = queue.length - 1\r\n      while (i > curIndex && watcher.id < queue[i].id) {\r\n        i--\r\n      }\r\n      queue.splice(i + 1, 0, watcher)\r\n    }\r\n    lockTask(flushQueue, resetQueue)\r\n  }\r\n}\r\n\r\nfunction flushQueue () {\r\n  flushing = true\r\n  queue.sort((a, b) => a.id - b.id)\r\n  for (curIndex = 0; curIndex < queue.length; curIndex++) {\r\n    const watcher = queue[curIndex]\r\n    idsMap[watcher.id] = null\r\n    watcher.destroyed || watcher.run()\r\n  }\r\n  resetQueue()\r\n}\r\n\r\nfunction resetQueue () {\r\n  flushing = false\r\n  curIndex = queue.length = 0\r\n}Mpx github:\thttps://github.com/didi/mpx使用文档:\thttps://didi.github.io/mpx/"}
{"title": "小程序背后：巨头们各自为阵的四大移动新生态 ", "author": "Rolan", "push_time": "2019-12-30 00:01", "content": "文｜刘旷“如今小程序的DAU（日活跃用户数量）已经超过了3.3亿，到明年年底，小程序的DAU可能会超过4.5亿。”阿拉丁创始人兼CEO史文禄，近日在其主办的第三届全球小程序生态大会上如此表示。史文禄还提到：“2019年至少有23家小程序单日DAU突破1000万，预计明年至少有100家小程序单日DAU突破1000万。小程序今年的交易GMV会突破1万亿元，预测明年会超过3万亿元。”回想起来，微信小程序在2017年1月才正式上线，从零开始的小程序生态，已然完美上演了一次爆炸性的增长奇迹。时至今日三年未满，小程序从无人问津到日活3.3亿；从一文不值到GMV高达1万亿。小程序用不到三年时间，已经打造出了一个万亿级的大生态。但是细究起来，小程序的成功并非如我们想的那般顺理成章。1.主角总是在最后出场小程序这种应用形态的起点，应该可以追溯到HTML5。HTML5于2007年在W3C立项，与iPhone发布同年。乔布斯曾期待HTML5能帮助 iPhone 打造起应用生态系统，但是因为HTML5的发展速度不及预期，当时没能达到承载优秀移动互联网体验的地步，于是苹果只能放弃这趟顺风车，专心打造专属于自己的原生应用生态App Store。谷歌在2010年底正式发布Chrome Web store和Chrome OS，表明这种区别于原生应用生态的移动互联网应用生态，已经产生了一定的根基，但是谷歌当时推出这套东西，更多的是想用在上网本上，而不是手机上。用在手机上的最早“小程序”构想，是百度在2013年提出的轻应用（Light App，结合了native app的用户体验和webapp可被检索与智能分发的特性），但是百度在移动互联网时代始终没能雄起，轻应用最大的意义也就只是为其后来推出的“百度智能小程序”积累了一定的经验教训。当时国内除了百度，其他很多巨头也都对这个东西感兴趣。2015 年，DCloud联合360 手机推出了业内第一个商用的小程序，360 称之为 360 微应用。为了做大生态，DCloud 把这套技术标准捐献给了 HTML5 中国产业联盟，随后，联盟开始推动更多的超级 App 和手机厂商加入。但这件事情并不顺利，首先是用户体验还没有做好，同时巨头们又各有各的诉求，尤其是腾讯，直接想要另起炉灶，于是张小龙从2015年就开始了对微信小程序的构思。  在国内巨头们开始普遍关注起这件事的2015年，谷歌终于提出了PWAs（增强型网页应用，Progressive Web Apps，简称 PWAs）打算把当初的构想落实到手机上。但是它的动作实在太慢了，到2017年2月4日，谷歌才正式发布PWAs——比微信小程序还晚了将近一个月。总的来看，这场大戏最有分量的两个主角——掌握全球最大web平台和Android系统的谷歌和掌握中国国民级应用的腾讯，都是很晚才入场的。2.被游戏带飞的小程序生态张小龙在一开始做这件事的时候，就抱有非常大的野心，不同于之前“轻应用”和“快应用”在web技术生态上的修修改改。张小龙直接丢弃了国际标准组织W3C的DOM和Window标准，仅仅采用基础JavaScript。这意味着他需要重造一个新的开发技术生态。在2016年的微信公开课PRO上，张小龙把这种“做到让更多的APP有一种更轻量的形态”的尝试宣称为应用号，而在团队内部，这东西的代号是“web+”，被寄望会诞生一种比web技术生态更牛的技术生态。但是技术这东西不是风口上能被吹飞起来的猪，无论Flag立的有多高，牛皮吹得有多好听，代码都得一行一行敲出来。经过2016年一整年紧锣密鼓的开发测试，在2017年1月9日凌晨，东西终于被做好，并且被定名为小程序，正式上线。一经上线，微信小程序“无需安装，用完即走”的特性就受到了很多用户空前的关注和期待。《你好，我是小程序》的文章刷爆朋友圈；网友狂欢“错过了公众号，别再错过了小程序”；“干掉APP”的话题成了行业常用谈资……但是期待值过高，往往就会更难接受现实落差。在小程序上线不到一个周后，作为第一批参与者，自媒体人罗振宇高调宣布关闭小程序，还神秘兮兮地发布了一句话：“我们决定不做了。我们知道小程序是什么了。哈哈，但是不能说。”小程序在应用层面受挫，在技术界也受到了程序员们的冷落，到2017年2月，有报告称，35.5%的开发者对小程序感到失望。小程序的前途眼看着越来越暗淡，不过当时张小龙团队并不惊慌，因为他们之前已经“讨论了小程序会有哪几种死法”。事实上背靠微信的小程序一旦出现，就注定不会落寞太久，就像腾讯在2012年推出公众号推动了新媒体行业的变革，微信作为国民级应用，数以亿计的流量红利无论向哪个方向倾斜，都足以掀起滔天巨浪。小程序的滔天巨浪就出现在2018年初，2017年12月28日，微信开放了小游戏，同时重点推荐了小游戏“跳一跳”。这款简单至极的小游戏创造了一项夸张的世界纪录，截至2018年1月，跳一跳已经积累起3.1亿玩家，创下有史以来单款游戏用户规模达到的最大水平。而创下这个世界纪录，微信小程序只用了一个月的时间。社交网络媒体的病毒式传播，恐怖的效率彰显无疑。2018年初，伴随着跳一跳那个没脸也没有肢体的“小人儿”在小方格间一步一步跳跃，小程序的月活用户规模和渗透率也在呈指数级跃升。当小程序的月活用户数量突破4亿大关，产业界就再也无法继续对此保持淡定。3.小程序帮助腾讯推开B端生意大门 2017年，共享单车这种“共享经济”最具代表性的产物迎来了史上高光时刻，20多个共享单车品牌在战场上相互绞杀。也是在这一年，摩拜在一众竞争对手中渐渐脱颖而出，追上行业缔造者“ofo”的身影。摩拜成功的秘诀很简单，就是率先尝试使用微信小程序。作为最早在线下使用小程序的商家，摩拜在2017年2月就上线了小程序，当时微信小程序总体月活用户数仅有8万，这点流量对那时的摩拜来说，同样也是聊胜于无。但是微信小程序的影响力在慢慢扩大，摩拜受益也就越来越明显，仅两个月的时间过去，小程序就为摩拜带来了50%的拉新，注册用户增长30倍。张小龙最初对小程序的定义中，激活线下流量是真正的核心，摩拜完美地帮助张小龙验证了这个构想。这场经典的双赢合作，为2018年摩拜被美团收购，得到共享单车行业难得一见的善终，打下了一定的基础；也为后来蜂拥而至的各类线上、线下商家提供了一个很好的借鉴案例。对腾讯而言，更为重要的是为其拓展B端业务提供了一个很好的突破口。腾讯在2017年年报中颇为兴奋的表示，在2017年底小游戏的带动之下，截至2018年一月，已经诞生了58万个小程序，这些小程序将用户与众多的线上及线下服务连接，涵盖零售、电子商务、生活服务、政务民生及游戏等多个领域。2018年，腾讯表示小程序的潜力得到充分释放，被用户和企业广泛采用，奠定了连接线上用户和线下场景的行业趋势。身为传统的社交娱乐巨头，腾讯930改革之所以敢把拥抱B端的口号喊得那么响亮，可能也离不开来自小程序的一些底气。  在2018年年报中，腾讯宣称其小程序已经覆盖超过200个服务行业，2019年的重点任务之一，就是利用小程序、微信支付和企业微信加强与企业的联系。在阿拉丁的统计中，2018年微信小程序的平均日活超用户过2.3亿人，覆盖用户约6亿。在这些数字背后，是一个短短两年就成功崛起，活力四射的小程序生态。4.技术生态发起者的殊荣在技术生态方面，2018年小程序的标准和语言都已经相对成熟，美团前端在2018年年初开源的MPVue也比微信自己在2017年发布的的WePY框架更成熟一些。把微信小程序的框架向前推进了一大步。在市场和技术越来越成熟的情况下，阿里、百度、头条这些巨头当然不会对这种新的趋势熟视无睹，他们参考微信小程序的标准，纷纷推出自己的小程序。这个过程中，京东Taro 框架诞生很好的解决了多端开发和适配的问题，可以帮助开发者实现一次编写，多端运行，大大节约开发成本。之后的uni-app更进一步，实现了自定义组件编译模式，并在算法上做了很多优化。甚至可以让开发者一行代码不用改，就可以同时发布小程序和 App。至此张小龙当初设想的小程序生态，已经奠定好了一个非常坚实的根基。到2018年底，超过200万额开发者加入到了小程序的开发，这也是多年来中国IT行业里一个真正能够影响到普通程序员的创新成果。甚至小程序生态的成功，也进一步提高了我国科技产业界搭建国产操作系统的信心。基于以上种种原因，2018年11月7日，微信小程序获得“世界互联网领先科技成果”奖。5.拼多多借小程序而起小程序这东西有很多好处，对用户和运营商的好处尤其直观。用户“即用即走”的便利性不用多说，运营商曝光率得到提高和开发成本降低尤其值得一提。小程序生态的最大受益者，除了前面提到已经被美团收购的摩拜，还有现在已经跻身为电商三巨头之一的拼多多。拼多多在2017年之前营收主要靠自营生鲜特卖，在2017年之后才彻底转型为社交电商平台。它同样也是微信小程序发布早期，就稳稳地搭上了这趟顺风车。拼多多的小程序玩法很多，“好友帮开，你领现金”、“邀请好友开宝箱，领取无门槛现金”、“1分钱抽奖，天天有惊喜”、“极速砍价，1刀砍成不是神话”、“邀请好友打卡，天天领红包”……套路层出不穷。这些小程序玩法完全是基于社交拼团砍价的逻辑。一套走完，很顺畅就完成了拉新、活跃、留存的流程，加上外链的辅助，很轻易就把这些用户带入到拼多多自己的APP里，成为拼多多真正的用户。得益于此，拼多多的用户数量就像吹气球一样快速膨胀，不到一年时间，拼多多就成长为亿级APP。不仅仅是前面提到过的“跳一跳”这类小游戏、摩拜这类生活服务和拼多多这类电商，很多其他内容资讯、休闲娱乐、旅行出行、实用工具类互联网企业，也很快在微信生态里脱颖而出。6.小程序帮助中长尾企业缓解流量焦虑对比原生APP，小程序的开发成本优势非常明显。从基本开发人员的配置分析，小程序最低配备一名设计人员、一名前端人员、一名服务器端开发人员，三个人就可以开始干活；做一款原生APP，最起码还需要在这个基础上再配备一名ios前端或者 android前端开发人员。同时小程序远比原生应用做起来简单，小程序的开发周期就会远比原生应用开发要短的多，开发成本也就会进一步降低。对于中长尾企业来说，小程序成本优势的意义尤其突出。根据工信部统计，2018年我国市场上监测到的App总量达到449万款，其中我国本土第三方应用商店（安卓）的App超过268万款，苹果商店（中国区）移动应用数约181万款。但是从我国用户的使用习惯来看，手机里最高安装APP总量不会超过100个，每月最多使用30个，每天最多使用不会超过10个。也就是说，除了出现在各类榜单上极少数的APP，有数百万APP做出来之后就注定会无人问津，没有变现的可能，而他们的开发成本可能价值数万元甚至更高。小程序的情况则相差迥异，在阿拉丁的统计中，2018年小程序数量突破230万个，介于苹果和安卓之间，其中当然也会很多中长尾小程序会沉寂下去，但是开发成本要低得多，这些中长尾小程序的损失就会小很多。另一方面，小程序本身即用即走的零负担用户体验、适用场景广泛、背靠微信等亿级流量池的特性，也让中长尾小程序获客难度降低，露面出头的机会增多。因此到2019年，小程序生态愈加繁荣，虽然没能实现当初很多人“干掉APP”的狂想，但是已经构建起一个从平台方到运营方再到服务方，面面俱到的产业生态。这个小程序生态说要取代原生应用生态尚且为时过早，但是一个“头部APP+中长尾小程序”的颇具活力和潜力的联盟生态已经基业牢固。7.繁荣生态背后的巨头霸权由微信发起，其他巨头持续推动和跟进的小程序，看起来完美的实现了一石数鸟、多方共赢。首先，用户得到了“即用即走”的优秀体验，对于很多用途单一，使用频次低的服务，可以做到进入场景立即享受服务，退出场景不留下任何痕迹；其次，大量中长尾和初创互联网企业获得了一个成本低、效果好的引流新渠道；再者，推出小程序的巨头们，尤其是先发优势明显的腾讯，拥有了更多把触手向B端延伸的机会。但是有一个问题始终让人很在意，那就是巨头们花费这么大的功夫构建起小程序生态，除了扩大和B端的接触面积，还有没有其他更深的图谋？考虑到阿里这个有着深厚B端基因的存在，问题的答案呼之欲出。现在努力各自推进小程序的这些巨头，尤其是最早构建这个生态的微信，有一个最根本的目的就是构建“生态霸权”。什么是“生态霸权”？以谷歌的安卓系统为例，IDC最新数据显示，2019年Android平台手机的全球市场份额已经达到87%，接近9成。这套系统最初由Andy Rubin开发，2005年8月被谷歌收购注资，2007年11月，谷歌与84家硬件制造商、软件开发商及电信营运商组建开放手机联盟共同研发改良Android系统，随后谷歌以Apache开源许可证的授权方式，发布了Android的源代码。但是谷歌的“开源”，显然是假开源，真垄断，把谷歌服务框架和安卓系统深度绑定，在安卓系统中，只要是谷歌提供的服务，比如Gmail，Youtube、地图、搜索引擎，对于其他服务商都拥有碾压级的优势，于是在安卓系统中，谷歌自然而然的完成了对自己的升格和对竞争对手的降格。小程序领域还没有形成类似智能手机市场这样的固化格局，但是构建小程序生态的腾讯、阿里、百度、字节跳动，和没有构建起这种小程序生态的其他玩家，当然也会拉开越来越大的差距。这是一道很高的门槛，跨过这道门槛，就可以构建出“以我为主”的壁垒。比如阿里的小程序以生活服务、商业服务为主，头条系的小程序以消费、生活服务、游戏为主。巨头们可以在壁垒内打击异己；与壁垒外的其他巨头展开生态竞争。如果没能跨过这道门槛，就只能融入巨头们的生态中。后来的互联网创业者们，陷入沉寂的不值一提，而最好的结果也不过是像拼多多这样一夜崛起，然后接受腾讯这样的巨头控股。经营难度有所降低，但成长的上限也同样会降低。这，将会成为移动互联网发展的一种新常态。【钛媒体作者介绍：文/刘旷公众号，ID：liukuang110】"}
{"title": "阿拉丁发布2019年小程序年度生态白皮书：小程序互联网时代到来 ... ", "author": "Rolan", "push_time": "2020-1-3 00:18", "content": "速途网1月2日消息（报道：吴佳馨）今日，阿拉丁小程序统计平台和阿拉丁指数共同发布了2019年小程序互联网发展白皮书。白皮书显示，微信生态里，有超过150万小程序开发者，2019年微信商业化生态不断升级，一码一物能力上线；搜一搜品牌官方区全新升级；小程序模板消息能力调整；小程序支持AR效果等为用户带来了许多有温度、有价值的服务，同时小程序数据也一路猛增。用户方面，过去一年，社交裂变加“巨”粉丝群体体量，小程序矩阵催“升”用户粘性，小程序人均停留时长保持持续增长态势，用户对小程序的使用习惯已经形成，访问集中早7点至晚22点高峰时段，根据报告显示，30-39岁的用户占比最多为27.4%，而生活服务、网络购物、工具、视频与游戏类小程序在不同年龄用户群体都被广泛应用。随着微信小程序市场的不断开发，用户规模和渗透率的逐渐提升，2020年微信小程序数据的增长态势将会势不可挡。据本次报告预测显示2020年微信小程序数量将会达到500万、DAU将会达到4.5亿、小程序用户人均单日使用时长有望突破1500秒。"}
{"title": "张小龙微信公开课PRO演讲：信息互联的7个思考 ", "author": "Rolan", "push_time": "2020-1-10 00:02", "content": "划重点：之前我们限定一个人最多5000个好友，现在有将近一百万人已经接近5000好友。虽然不是真正意义上的好友，但也促使我们要扩大好友数目了。作为平台，因为我们有大量的数据，什么该用，什么不该用，其实是我们一直思考的问题。我们在这里也倡导同行一起重视这个问题。虽然头部大号会有最大的浏览量，但是在一个人人皆可创作的年代，我们希望长尾的小号都有自己的生存空间。朋友圈之所以默认是发照片视频的，是因为当时我有一个认知，对于十亿人来说，让每个人发文字是不容易的，但是，发照片是每个人都可以做到的。公开课的朋友们，大家好。又到了一年一度的微信公开课。很抱歉这次没有来到现场，在这里跟大家打个招呼。其实我是故意不来现场的。记得第一次公开课，我提到说，参加各种会议可能是很浪费时间的。我还说过，用产品说话，才是我们应该做的。大家也看到，微信从来没有开过发布会。我认为，新版本的启动页，就是微信的发布会，它直接覆盖几亿用户。但同事们说服我说，公开课不是发布会，而是面向开发者的会议。确实，外界可能也会对微信有好奇甚至误解，所以公开课确实是一个微信对外阐述自己想法、理念的一个很好的机会。但去年，我就想，微信团队现在这么大了，我们面临的问题，从早期的“怎么做”，到现在的“做什么”。早期我们聚焦于每一项功能，思考怎么做才是最完美的。现在是思考，什么才是我们应该去尝试的，以及如何组织起来做。对团队来说，早期是考验我们的产品能力，现在更考验的是我们的组织能力。我希望我们团队，在每一个领域都有杰出的深入的思考者。所以去年，我就在想，我不一定每年都来公开课讲。今年，我更乐意把时间让给我的同事们，让他们来给大家带来我们团队的思考。当然，我个人也有一些小的思考点，可以在这里分享给大家。信息互联的影响可能从来没有一个时代，每天有数亿人花这么多时间，花在手机里面浏览各种信息。而微信，可能是人们花时间最多的应用。所以我也经常会思考，微信作为一个基础的信息传递的工具或者说平台，我们一个不经意的动作，可能会引起信息洪流的流向的变化。我们知道，基因编辑是一种非自然的选择。因为人类强行的改变了自然进化的进展。类似的，技术的进步同样改变了自然的选择。人们看到屏幕上的视觉信息，超过了现实中眼睛看到的信息。人们看到的是远方的图像，听到的是远方的声音。从前一个人的世界，他的大小，是由他的脚的行走半径来决定的，现在一个人的世界的大小，是由他所获得的信息的宽广度来决定的。信息的宽广度和质量，一直是微信要解决的问题。但人类对于信息的广泛连接带来的影响的思考，是落后于网络的发展速度的。网络的发展，尤其是最近几年移动互联网的发展，使得人人都随时在线，并且面临海量的信息。这在历史上，甚至十年前，都是难以想象的。人们真的能驾驭这种信息互联吗？还是说，技术在引导甚至控制人们的生活方式？可以从几个维度来看一看这种影响，包括隐私的出让，信息获取的被动，社会关系的扩大和复杂，信息传播的快速，信息选择的困难、信息的多样性，搜索的困难。一. 隐私的出让从历史来看，科技越发达，个人隐私会越少。人们在获取便利性的同时，其实也在不知不觉地一点一点把自己的隐私范围缩小。比如精准广告和用户隐私其实是有矛盾的。作为平台，因为我们有大量的数据，什么该用，什么不该用，其实是我们一直思考的问题。我们在这里也倡导同行一起重视这个问题。二. 信息获取的被动你所看见的，或者说，你所阅读的，决定你是什么样的人，会有什么样的想法。互联网让信息唾手可得。可是，从信息的海洋中获取什么样的信息是个很有挑战的问题。事实上，很多人并不愿意主动去获取信息，而是更倾向于被动获取。记得好几年前，我说过一句话，“推送改变世界，因为用户更懒了”。包括微信，也是基于推送的。你收到的每一条消息，都被你把优先级排得比你要真正要获取的信息的优先级要更高一些。那么，推送什么信息，决定了用户会看什么信息，决定了他在一个什么样的世界里。这是一个我们要经常思考的问题，也是我们在努力的方向。所以，我很少说分发这个词，我觉得推荐可能更尊重一些。三. 社会关系的扩大和复杂人是社会关系的总和。而如今，社会关系越来越多地体现在微信好友，群，朋友圈的互动里面。比如，中学、大学同学，因群而活跃起来。过去，学术上有个词，叫邓巴数，是说一个人最多有150个好友。但在微信里，显然它被打破了。人们对于好友的维系能力，和移动互联网之前的年代相比，突然增大了很多。之前我们限定一个人最多5000个好友，现在有将近一百万人已经接近5000好友。虽然不是真正意义上的好友，但也促使我们要扩大好友数目了。我记得附近的人上线时，我自己其实都有隐隐的不安，因为从前我们和附近的人的界限将被打破，我不知道它是好是坏。这种思考，其实会一直贯穿在微信的进化里面。就像我们扩大5000好友这个限定非常容易，但是对于它带来的影响，说实话诚惶诚恐，我们会反复思考。四. 信息传播的快速一方面，是信息比之前更快速地传播，可能一个瞬间，一个事件就可以迅速在很多个群里面，迅速的几何级数的传播。另一方面，有一句话叫“谣言传千里”，耸人听闻的内容，可能能获得更大的传播机会。这是人性使然。我们可能很难用技术手段作为一个判定内容的质量的标准，但作为信息传递的平台，我们也有很多办法，譬如说用更多的参与者和强大的机制，来帮助平台作出仲裁，就像我们对待原创和抄袭的做法很类似。五. 信息选择的困难看似我们面对海量信息可以自由选择哪一些看、哪一些不看，但事实上，我们不可能有时间去一一筛选，导致我们看到的总是局部。包括公众号，看似可以随便关注，但是你的选择其实是有限空间的。我们在看一看里实验了社交推荐，看起来效果还不错。它是一种通过好友之间的互相推荐来扩大人的选择范围。六. 信息的多样性虽然头部大号会有最大的浏览量，但是在一个人人皆可创作的年代，我们希望长尾的小号都有自己的生存空间。这也是之前公众号一个忽略了的部分。等一下会再讲一下。七. 搜索的困难与web互联网相比，移动互联网的各个app更加割裂，信息难以打通、搜索。我们做小程序，就有一个梦想，希望搜索能进入到每一个小程序的内部，这样海量的小程序可以支撑起各种长尾的搜索需求。当然，小程序仍然是我们一直要改进的领域，只有小程序足够繁荣，才能支撑起搜索的内容的丰富度。关于“信息的多样性”的延伸这里讲了我们对于信息普及、对于生活的影响，其中提到信息的多样性。这里也要说一下。在微信的起步阶段，我就说过，我们基于手机来做app，不基于pc来做。pc端只是辅助。如果不是这样的话，我们没有办法将我们的产品普及到每一个人都能用。回过头来看，我们当年有两个小小失误，一个是，公众平台。很长时间都只有pc web版，这限制了内容创作者的范围。另一个是，也是更重要的，公众平台的原始想法是取代短信成为一种基于连接品牌和订户的群发工具，并且有效地避免垃圾短信。群发的内容并不是重点，应该是各种各样的形式的内容都应该是可以的，如文字，图片，视频等。但我们一不小心把它做成了文章作为内容的载体，使得其他的短内容的形式没有呈现出来，那使得我们在短内容方面有一定的缺失。这也是为什么之前我说，公众号本身并不是为媒体准备的这样一个原因。我们很重视人人都可创造的内容。朋友圈之所以默认是发照片视频的，是因为当时我有一个认知，对于十亿人来说，让每个人发文字是不容易的，但是，发照片是每个人都可以做到的。所以，相对公众号而言，我们缺少了一个人人可以创作的载体。因为不能要求每个人都能天天写文章。所以，就像之前在公开课所说的一样，微信的短内容一直是我们要发力的方向，顺利的话可能近期也会和大家见面。毕竟，表达是每个人天然的需求。所以这里，也是作为一个对新版本的小预告吧。春节即将到来，我们在红包上，也有一些新的创造，可能也会吸引你来发挥你的创造力，这里也预告一下。今天我的分享就到这里。虽然这次我没有参与现场的演讲，但是我相信我的同事们同样会给你带来精彩的报告。再次感谢大家。"}
{"title": "产品经理项目实录：怎样从0到1做一款微信小程序？ ", "author": "Rolan", "push_time": "2020-1-13 00:05", "content": "市面上有很多关于微信小程序的文章，但大多都是一些宏观的分析或者框架式的方法论，却没有讲到底怎么去落地、以及实际项目过程中会遇到哪些问题。所以在本文中，我将以自己亲手做过的一款小程序为载体，以整个项目流程为主线，系统地解构怎样从0到1做一款微信小程序。概述过去几个月，我们团队一直在做一款关于互联网保险业务的小程序，这不仅是自己第一次从0到1负责一款新产品，也是第一次做微信小程序，在整个项目过程中积累了诸多经验和体悟，因此需要经过一次系统的复盘，才能真正内化到自己的产品思维体系中。这里有两个重点：一是怎么去做一款新产品；二是怎么做一款微信小程序。我将分三部分讲述从0到1做一款小程序的整个流程：定位、规划、落地。定位，想做一款微信小程序，一定要先了解微信生态，明白服务号、订阅号和小程序之间的关系，并且基于自己公司的实际业务情况，将小程序嵌入到业务流程中去，所以我将分为微信生态和业务架构两部分进行分析。规划，把产品做复杂了容易，但做简单了难。尤其是新产品第一个版本的设计，非常考验一个产品经理的功力。哪些该第一版做，哪些该后续迭代，这都要基于产品经理对整体业务的理解进行系统规划。落地，从一个概念和框架落地为实际的产品是最难的，真正做小程序时会遇到很多的坑，不只是小程序自己的各种坑，也有与自己业务打通时的诸多问题，因此必须要对小程序的特点有所了解，我将把做小程序过程中需要注意的问题一一道来。1. 定位1.1 微信生态为什么要用微信小程序这种载体？做小程序前要先回答这个问题，否则选择了不适合自己业务的载体，只能是浪费资源。而要回答这个问题，得先了解微信的生态，并结合自己的实际业务流程去权衡。在微信生态中，通信功能+朋友圈所构建的社交关系是基本盘，并基于这个巨大的流量池，衍生出公众号和小程序两大子生态系统。其中，公众号又分为订阅号和服务号，订阅号提供的是内容，以内容沉淀用户，个人和企业均可开通；服务号则专门提供给企业，给用户提供各种商家服务。服务号和订阅号大概有三点不同：（1）服务号在消息列表这个一级页面直接单独展示，订阅号则折叠在“订阅号消息”的二级页面中。这就导致了服务号的曝光能力优于订阅号。（2）服务号每个月能推送4条消息，订阅号每天都可以推送1条消息。因此订阅号更适合做内容来吸引用户并运营用户，而服务号更聚焦于提供服务功能，并且尽量少地打扰用户。（3）经过认证的服务号支持微信支付功能和高级开发，而订阅号不支持。这进一步强化了服务号的B端属性和服务能力。从这三点区别可以看到，其实服务号和订阅号之间的差别其实非常模糊。订阅号使用H5或者小程序同样可以提供商家服务，这样就兼具内容沉淀和企业服务能力了，但服务号依旧有不能做内容的短板，唯一的优势只剩可以更容易获得曝光。因此，订阅号和服务号的定位可以概括为：订阅号偏向获客、服务号负责服务。也就是说，在前期，订阅号可以起到吸引流量的作用，可以当做获客渠道，用内容教育和转化用户，当用户变成客户后，就可以引向服务号，专门提供售后的各种长期服务。那又为什么会出现小程序呢？没有小程序之前，公众号的各种功能是由H5网页提供的，在服务工具或者说服务媒介这一环节不由微信掌控，而且H5的体验也较差。因此微信推出了小程序，自己制定了一套“H5”规范，这不但可以在技术层面与微信打通，可以提供更多服务接口，也能够把控工具载体的质量，为用户提供更好的服务体验。更关键的是，这也打通了整个服务链条，公众号和小程序形成了业务闭环，企业在为用户提供某项服务时，全程都停留在微信的平台上，不用离开微信这个大生态系统。打个比方，这就像微信是一个大商场，各个公众号是一个个店铺，在以前，当你进入某个商铺时，因为这是一个个H5，所以微信无法了解每个商铺的装修质量和服务能力，也不知道你在里面都做了什么，像一个个黑盒子。但现在有了小程序，也就是说微信这个大商场为每个商铺统一装修，并且把控了他们的服务质量，也都安上了安全监控，不但提高了你的服务体验，还能获取你的全程数据。其中，能收集并打通全程数据非常有意义，因为数据分析是一个系统化工程，碎片化的数据是没有价值的。比如用户的购物行为，没有小程序时，微信只能知道你点击商家入口了多少次，进入商家自己提供的H5后，微信就不知道用户在H5中都有哪些行为了，比如浏览了哪些商品、把哪些商品放进了购物车。在最后，用户付款时使用了微信支付，微信才知道这个用户转化成功了，但是中间购买流程上的每一步转化率怎么样，微信一无所知。也就是说，微信只能获取入口的流量数据和最后的支付数据，其他的数据则在商家自己手中，微信没有收集到全流程的数据，自然也无法对用户有深入的了解。只有以人为中心，获取到其全流程数据，才有可能做出精准的用户画像。分析其属性和行为特征后，便可在后续为每个用户提供人性化服务以及精准化营销。小程序不但对微信的意义重大，而且对开发者来说也非常友好。由于手机操作系统是割裂的，分为iOS和Android两大阵营，所以要想开发一款APP，需要两套人马，开发两个APP，分别适配两套手机操作系统。而且Android的适配问题非常令人头疼，因为Android是开源的，很多手机厂商的系统也有很大差异，所以光处理适配问题又要花费大量的开发资源。现在微信已经成为一款10亿量级的国民级应用，渗透率极高，基本是互联网行业的基础设施，像生活中的水电煤一样。基于这个条件，在微信上搭载了各种服务后，其实微信本身就可以承担手机操作系统的角色。手机上的一个个APP也就是一个个企业提供的服务，现在微信将自己生态系统中承载的服务统一化和标准化，最后呈现的载体便是小程序。这是小程序的另一个优势：开发成本低，只需要一套代码就能适配所有机型。背靠微信这个巨大的流量池，开发成本也不高，小程序这个子生态系统便开始迅速成长起来，如今已经成为首选的载体。但是小程序也存在短板，因为小程序的定位是轻量、用完即走，更像是一个个小工具，具有很强的工具属性，虽然用户的体验很好，但是没有办法沉淀下来，最终还是要引向企业自己的APP或者是公众号。这也就是现在经常说的私域流量。只有变成了自己的私域流量，企业才能更直接地触达到用户，对这些用户进行运营和营销，最终实现转化。至此，订阅号、服务号和小程序之间的关系和定位就非常清晰了：在订阅号用内容沉淀用户、使用服务号在中后期服务用户、小程序则承担工具和媒介的作用。1.2 业务架构小程序也只是载体，不要跟风做小程序，不要把手段当做目的。小程序一定是服务公司业务的，属于业务流程中的一环。我最近在做互联网保险业务，因此所做的小程序也和保险相关：保单管理。先谈谈保险业务，可能近半的互联网人不了解保险也不关心保险，因为互联网行业兴起也没多少年，互联网从业者好多是二十多岁的年轻人群体。对于二十出头的年轻人，不关心保险很自然：一是觉得自己年轻力壮，人也常常有侥幸心理，不觉得自己会得什么病或者发生什么意外；二是因为没有家庭，所以也没有那么强的责任感，一人吃饱全家不饿。但是一旦有了家庭，尤其是有了孩子，自己也步入中年时，就会有很强的风险意识，开始考虑买保险了。毕竟就算不考虑自己，也要考虑自己的老婆孩子，比如得一场大病，不但很可能会掏空家底，而且也没有了收入来源，家里没有了经济支柱，上有老下有小的该咋办？所以保险业务的目标客户群体一般是中年人，而且一旦买保险，一定是家庭为单位进行保障规划的，给自己的父母、伴侣、孩子都购置保险。购买保险后，保险公司就会给你一张保单，也就是保险合同。一个人一般会配置重疾险、医疗险、意外险、寿险，有的人还会为自己养老考虑，购买年金险，也叫商业养老保险，这些保险具体都有什么作用就不展开了。也就是说，按照一个人平均有4张保单，那一个家庭，包括双方父母、先生太太、孩子，最少7个人计算，一家人就要有28张保单了。这些还很可能不是一个保险公司买的，所以对保单的管理就是一个很大的问题了，也是一个痛点。了解了保单管理的背景，那它在整个业务流程中处于什么节点呢？对于一个卖保险的公司，底层商业逻辑和其他行业是一致的，核心是两点：获客和转化。无论是电商平台，还是线下的商铺，都要解决流量从哪里来、又怎么转化客户以获取商业价值的问题。关于获客，虽然现在已经有诸多平台和各种类型的获客方式，比如近几年比较火的今日头条的信息流广告、抖音的短视频广告，或者是传统的SEO/SEM，到最后才发现最有效的还是微信公众号平台。在微信公众号投放广告的转化效果要明显优于其他平台。首先是因为公众号具有聚集效应。每个公众号定位不同，因此关注的用户也明显有分类，比如母婴号的关注用户大部分都是宝妈或者怀孕的准宝妈、军事类的公众号的关注用户比例最高的是中年男性。因此只要找准自己业务的目标人群，再去目标人群聚集的地方投放广告，自然会有很好的转化率。比如卖体育用品的公司，可以将广告投放健身类的公众号，卖化妆的可以投放美妆类或情感类的公众号等等。更关键的是，公众号文章不同于普通的硬广，可能不读到最后根本就不知道这是一篇广告， 因此用户不会有天然的抗拒心理，而且代入感更强 ，不知不觉读完之后，会被文章丰富的图文和自洽的逻辑所教育，即使不能立即转化，也会对投放的广告产生品牌认知。这也是为什么，经常会有一家公司会和某一个公众号长期签约，定期多次投放相同的广告。重复，能起到固化认知的作用。用户价值不会一次释放完，可能第一次没有转化成功的用户，经过多次教育后就能够转化，直至一个公众号的用户群体的价值被充分压榨，转化率下降，此时公司可以转战下一个公众号了，如此循环往复。我们所做保险业务也正是采用了这样的获客方式，有了客户之后，转化环节就要靠保险销售了，把不同质量的用户分给不同转化能力的销售。用户质量也就是购买能力，可根据年收入划分为不同层次。年收入10万以下的客户，不但转化困难，而且成交后能获取的收益也很低，保险销售都不太愿意接这样的客户；年收入10万到20万的客户群体则是中坚力量，这也是保险销售群体比较喜欢的客户群体；年收入再高的话，超过50万以上，则属于高净值人群，很多对保险或者一些资产配置产品有比较深入的了解，普通的保险销售驾驭不了，适合分配给资深的销售。转化环节，其实是一整条服务流程，对于保险业务，可以细分为投前、投中、投后。（即投保前、投保中和投保后）投前的核心是做家庭财务规划，投中则是协助核保，投后需要的是保单管理和理赔协助。基于整个业务架构，便可构建出相应的产品架构，即不同的产品所对应的业务环节和承载的功能。（1）保险业务后台：主要分为产品、客户和交易三大模块。产品管理，也就是我们公司所售卖的保险产品库，接入的是第三方渠道或者直接对接不同的保险公司。客户管理，包括客户的标签数据和流转数据，也就是用户是从哪里来的（来源渠道）、现在在哪（所处的环节）、又将往哪里去（购买意愿）。交易管理，则是连接了产品和客户，核心是订单的相关信息，包括订单的各类状态，比如未支付、已支付、已出单、退保、核保、理赔等全流程状态。（2）家庭财务智能规划系统：将转化流程标准化，根据客户的财务状况，自动计算风险缺口，并给出保险配置方案。不但可以体现出公司的专业性，还可以为保险销售节省大量的精力，让其更聚焦于为客户讲解保险知识和财务知识。（3）保单管理小程序：则承担售后服务，客户不但可以查看自己家庭购置的保单，也可以使用申请退保或理赔、续期续保提醒、保单检视等功能。2. 规划2.1 用户路径了解了保险业务的业务架构和产品架构后，也就知道保险管理小程序在业务流程中所处的位置和发挥的作用了。但这也只是保单管理小程序的完整态，真正实现时，需要分步迭代。为什么说一款新产品的第一版一定要足够简单？一方面讲，第一版足够简单是一种实验思维，一旦发现存在问题，可以快速调整。甚至发现产品不受用户认可、产品方向存在根本性问题时，即使迅速抛弃现有的产品，浪费的资源也不算非常大，沉没成本在可接受范围内。另一方面，这也不只是为了开发资源考虑，更关键的是需要快速开发、快速进入市场、然后再快速迭代。互联网行业常常讲究先发优势，目前互联网保险行业的入局者越来越多，竞争也是日益激烈，所以尽快地抢先市场并占领用户认知就非常重要了。当然，产品的第一版足够简单是不够的，也要足够有用。怎么才能有用呢？一定要找到一个核心的业务节点，把这个产品嵌入到业务流程中，也就是用户必经路径上，才能真正发挥作用。经常会出现的情况是，做了一款产品，然后没有在用户核心路径上，用户可用可不用，用了固然有帮助，不用也没有什么影响，那这款产品也就发挥不了什么价值了。可以拿腾讯相册小程序举例，在初期，腾讯相册只是打通了小程序内的QQ账号体系，用户主要是查看自己在QQ的相册。而在18年5月，做了从QQ分享到微信的照片由小程序来承载这个功能后，数据量才开始爆发性增长。也就是说，从QQ分享照片到微信这个核心使用场景中，用户原来的路径是直接分享照片即可，不会是进入小程序再去分享，这个路径反而变长。但是用小程序承载后，也就是把小程序这个载体嵌入到用户分享的必经路径中了，使用量比以前自然会有大幅上涨。其负责人曾提到过，腾讯相册小程序的用户增量主要来自于QQ空间用户的分享，在小程序的新用户来源中，80%是分享进入的，也就是说每5个使用用户有4个是通过分享路径进来的。由此可见，一款新产品想要“有用”，必须要嵌入到用户的核心使用路径中。对于保单管理来说，客户在我们公司买完保险后，一定是想要直接能够看到保单的，而不是让保险销售手动发给客户一个文件或者让客户自己登录网站去查看自己的保单。所以这也正是保单管理小程序在业务流程中出现的第一个节点：客户买完保险后，可以直接在微信小程序中查看自己购买的保单，并可以获得一系列的售后服务。2.2 功能范围查看保单功能是保单管理小程序最基础也是最核心的一个功能，但是客户的保单其实分为两部分：在我们自己公司购买的保险和在其他公司购买的保险。在我们公司购买的保险，我们有相关的保险数据，所以可以直接在小程序中展示，那客户在其他公司买的保险，我们也没有相关数据，那该怎么办？尤其是自然流量的用户，不是我们平台的客户，他们又怎样使用保单管理小程序呢？这就是我们产品的另一个核心功能：上传保单。有了上传功能后，不但小程序可以独立使用了，同时，自己平台的保单数据和客户自己上传的保单数据合在一起，构成了客户的完整保单信息。当然，这个功能也应该在客户的核心路径上。客户在做保障规划时，需要纳入客户的已购保险的，不但可以将家庭财务智能规划系统计算出的风险缺口减去客户已有的保额，也可以将客户的已购保险和我们推荐的保险进行对比，最终实现让客户买到性价比最高保险的目的。也就是说，保单管理小程序在业务流程中的位置前置了，不但可以在购买保险后（投后）查看保单，也可以在投前的保障规划阶段起到录入已购保单的作用。至此，可以看到，保单管理小程序需要两个核心功能：查看并分享在我们公司购买的保单和上传在其他地方已经购买的保单。其实，这个也可以类比腾讯相册小程序。对于腾讯来说，一个人的照片分为两部分：一部分是在QQ空间和微信朋友圈的照片，也就是用户在腾讯自己公司的数据；另一部分则是用户在其他平台的照片，可能大部分都是在用户自己的手机相册中。那么腾讯相册小程序的核心功能也需要两个：用户可以查看并分享在QQ空间和微信的照片、用户可以上传手机相册中的照片。这和保单管理小程序的功能逻辑基本相同。明确了产品的核心功能后，再回到最初的问题：第一版要上哪些功能呢？哪些需要后续迭代呢？我们选择了第一版先实现用户可以查看和分享在我们公司购买的保单，也就是将保险业务后台的保单数据同步至小程序。已成交客户作为我们新产品的种子用户，可以先将小程序用起来，检验一下产品的使用效果，并优化使用过程中存在的一些问题。上传保单功能则放在第二个大版本进行迭代，有了上传功能，就不仅是一个内部应用了，可以单独使用，成为一个独立的小程序应用。这样也就有机会去获取自然流量，成为获客的另一个渠道。不过，小程序的核心定位还是形成公司的业务闭环，服务好自有客户，而所谓获客只是锦上添花，其实还是很困难的，只是提供了获客的可能。3. 落地3.1 交互设计明确了业务架构和产品架构后，也确定了产品的迭代路径，接下来就要考虑产品的具体信息架构了。信息架构，也就是界面层，即展现在用户面前的视觉效果，比如不同功能的组织，页面布局等等。经常说小程序的特点是用完即走，那怎么才能达到这样的效果呢？第一原则：使用路径清晰且单一。这样用户一旦进入了小程序，就知道自己要怎么做、下一步点哪里。因为小程序有很强的工具属性，用户在进入小程序前带有明确的目的和预期，那么，好的小程序一定要让用户进入小程序时，就能使他产生一种：“嗯，这就是我想要的。”的感觉，并且顺畅和快速地让用户解决要完成的事。摩拜单车的小程序就是很好的例子：扫一扫、点击解锁、骑车即走，用户只需要三步动作即可完成任务，小程序在整个流程中的存在是完美连接线上和线下的，顺畅无阻塞，甚至是无感知的。不好的做法是，堆砌很多偏离业务主线的功能，找半天才找到能解决自己问题的功能入口，也就是把小程序做成了一个很重的APP。如果业务比较复杂，可以拆分为一个个独立业务或者功能点，做成小程序矩阵，典型如几个互联网巨头，美团、京东、百度等。第二原则：交互方式简单且统一。这里有两个关键词：简单和统一。对于简单而言，最重要的就是不要用太多复杂的交互，更不要用太多页面跳转这么重的交互方式。不用复杂交互可以理解，因为用户打开小程序是为了快速解决问题，如果各种操作使用复杂交互效果，反而会造成使用不便。这个和PPT类似，在做汇报时，如果加入各种动效，不仅会造成喧宾夺主，听众的注意力被动效吸引，而且动效过程也会浪费很多时间。简单直接，往往最有效。那又为什么说页面跳转这种交互比较重，不推荐在小程序中使用呢？原因有两个：一是新页面加载需要等待；尤其是生活中经常会有弱网或者无网的场景出现，比如地铁、电梯、地下停车场等，因此跳转新页面会出现长时间加载情况，所以操作能在现有页面完成就尽量不要跳转。二是过多层级的页面路径会对用户认知造成混乱；本身小程序就属于微信的子页面，至少是二级页面，如果在小程序内的页面也有很多层级或者是要经常跳转，就非常容易让用户产生疑惑或者焦虑感。同样，这也违背了第一原则。反面案例就是京东APP，拿签到模块举例，其页面层级有非常多层。关于交互的统一，本身就是一款合格的产品应该具备的。虽然一款产品可能有很多模块、很多业务，可能是由多个产品经理分工负责，但是一定要注意交互一致性、布局一致性、设计一致性。在同一款产品中，如果使用不同的功能或者模块时，发现视觉效果明显不同，那就很可能是不同产品经理做的，也说明没有一个产品负责人去整体把控这款产品。关于小程序，微信本身提供了一套标准的小程序设计规范，比如启动页加载样式、页面下拉刷新样式等等，不但可以减少很多开发量，也提供了一套通用标准，但是依旧要注意交互的一致性问题。建议先通读一下微信小程序关于设计部分的官方文档：在实际的项目中，最好由产品经理和交互设计师或者UI设计师一起基于微信小程序的设计指南，制定好一套适用于自己产品的设计规范。拿微信APP自己举例，对比其设置页的编辑态，会发现复杂的编辑操作或者重要的编辑操作，都会有“完成”按钮进行二次确认，而一般的编辑操作可直接操作。虽然这只是一个简单交互，但是说明其对设计的规范性。小程序中几个典型的交互方式总结一下：能不跳转就不跳转（多用底部弹窗）能不输入就不输入（多用自动填入、勾选等）键盘自动调起（注意不同情况下的不同键盘类型）第三原则：请严格遵守第一原则和第二原则。3.2 数据支撑做功能一定先要考虑到数据从哪里来，能不能支撑功能。很多时候，把功能设计得非常好用，但是往往难以落地或者是实际使用时出现了各种问题，一个很重要的原因就是数据支持没跟上。拿我之前想做的一个关于电商比价产品举例：因为现在电商平台比较多，商家也比较多，我想买一款电视，相同品牌或者相同型号的，在哪里买便宜呢？所以我就会去不同的电商平台看看，比如天猫、京东、苏宁、唯品会、甚至拼多多，在这个过程中，我需要不断切换不同的应用去对比，花费大量的时间。这个场景在生活中经常会出现，我观察到很多人也都有过相似的经历。要是从场景和需求来看，似乎电商比价这个功能非常有用，很多人肯定也非常想用，要是真的做出来了，万一大受欢迎，说不定我还可以去创个业、拿个融资，从此走向人生巅峰。但是，等一下，既然这个功能既然这么有用，为什么没人做呢？我从美好的幻想中被拉了出来，细想后发现，这里存在一个关键的问题几乎难以解决：数据从哪里来？每个电商平台都有自己的价格机制和调控平台，那商品数据和价格数据是否会开放出去呢？显然是不可能的，这些数据是电商自己的数字资产，也是自己的优势，所以一个个电商平台之间树立起了数据壁垒。从这个例子可以看到，不同公司之间的数据打通是极其困难的，不只是技术问题，更多是意愿问题。除了不同公司间的数据壁垒问题，相同公司的不同部门的数据打通同样存在种种困难。拿腾讯相册小程序举例，其功能其实也非常简单，但是难点一定是在数据上：QQ空间相册的数据、微信数据和从本地上传的数据的打通问题。因此，技术不是问题，重点在于不同部门能否通力合作去解决问题。对于腾讯这种巨头公司，经常会出现的大公司病就是“各立山头”，而QQ和微信就隶属于不同的事业群，这大大增加了数据整合、信息流通和资源共享的难度。所以不要把一个公司当做一个整体，也不要觉得一个公司是铁板一块，大家都会优先考虑公司的整体利益，毕竟一个公司是由不同的人组成的，位置不同，利益自然也不同。因此从下往上推动一个项目往往是很难的，只能从上往下去贯彻一个目标，由更高层的人去牵头才有可能成事。说完公司管理层面的问题，回到数据打通本身，真正在落地时，很难处理的是数据格式问题。虽然对于保险业务，数据格式相对来说已经比较规范了，但是依旧存在一些细微的差别。就拿我们公司叫的“保障期限”来说，也就是买一个保险能保障你多长时间，行业中不同公司的叫法有：保障期限、保险期限、保险期间、保障年限等，那么来自不同公司的保险产品数据在打通时就会存在问题。因此，数据格式统一是数据打通的第一原则。尤其是现在我们做的这个微信小程序，是一款新产品，需要使用保险业务后台的现有数据，那么在新产品中的数据字段名称和格式，一定要与原系统保持一致。在实际的工作中，数据格式这一块儿就耗费了我们非常多的精力，因为原有业务后台也存在诸多问题，很多地方的数据格式也没有统一，或者现有的数据格式不规范，因此需要先梳理现有系统的数据格式，并纠正其中的一些数据问题。数据格式问题解决之后，然后还要依照不同的维度解决接下来的一系列数据问题：数据来源：数据都是由哪些人或者系统产生的，可以分为线上系统同步和线下人工录入，只有搭建起自动收集数据的自循环，才有对数据分析和应用的可能；数据查看：不同的数据都是有哪些角色查看、不同角色的数据权限有哪些、查看的终端有哪些、目前查看数据的流程和方式是怎样的；数据应用：数据可以用到哪些具体的功能中，比如数据异常预警机制、数据展板等；数据更新：目前不同类型的数据是怎么更新的、更新频率是多久、有哪些数据长期未更新、未更新的原因是什么、未来建立的数据系统需要怎样支持数据更新（频次、实时性等）。3.3 用户授权在以前，进入一个APP时，需要输入账号和密码进行登录，即使是现在，主流的也是输入手机号，然后通过短信验证码登录，没有注册时还经常要先去注册，整个路径非常长。但是在微信生态中就不一样了，进入小程序时是静默登录的，在小程序后台直接完成了登录操作，企业可以获取到用户在此应用中的唯一标识OpenID，用户不需要进行任何操作。这个也好理解，用户进入微信APP时，已经进行过一次登录，那再使用微信内的应用时自然不需要登录。那我们为什么还会在各种小程序中看到“登录”按钮呢？其实，这里的“登录”本质是授权，是为了获取你的各种信息，因此是两回事。可能许多应用为了延续用户在APP生态中的使用习惯，所以依旧使用“登录”这种叫法。微信本身就有你的手机号、身份证、年龄、性别、地域等关键信息，但是不会直接开放给其他企业，需要用户手动授权。其中，手机号信息又从用户信息中抽离出来，需要用户单独授权，毕竟手机号是一个非常关键的用户信息，可谓是现在的互联网通行证。所以，微信的信息授权分为两种：一种是手机号授权、另一种是用户其他信息授权。这两种授权非常简单，只需要一步点击操作，即可触发微信登录底部弹窗，直接授权手机号或者用户基本信息，比传统的登录操作要便捷很多，这也正是微信生态的优势所在。但是出于对用户信息保护的考虑，也为了避免打扰用户，微信对用户信息授权的触发方式做了各种限制。这不得不提微信的审核机制。微信的小程序生态和苹果的应用生态非常类似，新开发的应用都需要审核通过，才能上架开放出去。开发iOS版本的应用时，很多开发者经常会遇到审核不通过的情况，因为苹果制定了一套审核标准，必须符合苹果的设计规范和基本要求才能通过，否则要被打回修改。微信沿用了苹果的审核机制，同样制定了一系列的标准。我们在这个项目中就遇到审核不通过的情况，被打回的原因就是：授权方式不规范。“你好，小程序帐号登录功能暂未符合规范要求，请在用户了解体验小程序功能后，再要求用户进行帐号登录。请整改后再重新提交审核，具体登录规范及整改可参考：https://developers.weixin.qq.com/community/operate/doc/000640bb8441b82900e89f48351401请根据上述原因对小程序进行修改，并重新提交代码审核。若对上述原因无法理解，可前往反馈页面进行反馈。我们原来的设计方案是：用户进入小程序后，会显示启动页，手机号和用户基本信息授权成功后才能进入小程序主页面。但这是微信不允许的，简单说，就是不能一进入小程序就直接弹窗提示用户登录，必须要让用户看到小程序的主体内容后，并手动点击按钮去触发登录弹窗。就连我们这种用启动页过渡的方式也是不允许的，必须要进入小程序并看到一级页面才行。最后我们不得不临时改动产品方案，在首页和“我的”页中分别增加了授权手机号、授权用户信息两个触发按钮。3.4 用户标识用户授权的底层是和用户标识有关。为什么我们需要用户标识呢？有两方面作用：一是微信用户数据与外部数据的打通，也就是与自己的已有业务数据打通，比如某个用户已经在我们的后台有了购买数据，那么我们只要确定了他的身份，然后和我们后台的客户标识进行对比，就可以知道他到底是不是我们的已有客户。目前用户唯一性的通用标识是手机号，因为手机号是实名的，与身份证绑定在一起。确定了一个用户是我们后台的已有客户时，就可以直接把他的购买数据推到小程序端，这个用户也就可以看到自己的保单数据了。二是微信内部不同应用数据之间的打通，确定了用户的唯一性后，其在不同微信应用的行为数据或业务数据就可以串在一起了，比如在订阅号的阅读数据、在小程序中的行为数据等。每一个人都是一个数据源，无时无刻不在创造着各种数据，只不过这些数据要么没有被收集到、要么散落在不同的应用中，所以我们若能收集到这些在不同场景中的碎片化数据，并想办法归类到创造这些数据的同一个人身上，我们就能更加全面的和深刻地了解这个人。这也就是所谓用户画像的由来，只不过现在大多数的用户画像还非常单薄，可能只有性别、年龄、地域、手机设备型号等属性数据，而没有更加深入的、更加细节的信息。比如从一个人的外卖数据中可以了解到他的饮食习惯，也可以知道他的长住地，公司或者家庭地址等；从一个人的购物数据中可以获取到他的最近生活方式变化，像开始买纸尿布，推测其有了孩子，后来又买了童装，则说明他的孩子长大了；从一个人的聊天记录数据和通信录数据中可以抽离出更多的有效信息，这个人的说话方式、关系网、最近的心理状态等等。唯一的问题就是这些不同场景的数据在不同的平台中，而且是非格式化的数据，包括文字、视音频等主动数据和点击查看等被动数据。那么我们就需要每个用户都有唯一的标识，并将其在不同的应用中的不同唯一标识串起来。在一个应用内，比如小程序、订阅号或服务号，每个用户都会打上唯一标识，这个就是OpenID，为什么叫Open呢？因为这个ID会提供给应用所属的企业，但是为了保护用户隐私，也是为了保护自己的数据资产，微信肯定不会直接把手机号、微信号等重要信息给其他企业，所以这个公开的ID是经过特殊规则转换过的一个特殊字符串，不包含任何明文信息。但此时也会出现问题，要是一个企业有多个小程序，还有订阅号或服务号，那一个用户在同时使用这些应用时，在每个应用内都有一个唯一标识，也就是会有多个OpenID，那到底有多少真实用户呢？而且单个用户在不同应用中的行为数据怎么串起来呢？总不能一个用户在订阅号中标识为用户A，跳转到小程序后，就标识成用户B，然后数据也就被割裂开吧？于是，便有了UnionID，就像字面上的意思，联合的标识。有了UnionID，同一用户在不同应用中的不同OpenID就可以映射到唯一的UnionID上了。简单总结：OpenID是同一用户同一应用的唯一标识。UnionID是同一用户不同应用的唯一标识。OpenID是不需要授权的，在公众号中，关注公众号时企业可以获取用户的OpenID，在小程序中，进入小程序时即可直接获取。但是UnionID则不同，在公众号中，不仅需要用户关注我们的公众号，还需要开发者去微信开放平台绑定公众号后，才可以获取UnionID；小程序获取UnionID的规则更复杂一些，用户进入小程序时，如果用户已经关注了与小程序同一主体的公众号，而且公众号已经获取了用户的UnionID，而不需再次授权，否则的话，需要在小程序中单独授权才能获取UnionID。3.5 数据埋点在项目完成到最后阶段时，数据指标一定不能忘，数据指标是量化评估你所做需求的实际效果的关键。关于数据埋点，分两种情况：一种公司和产品已经比较成熟，也比较稳定，也有现成的数据分析工具，有完善的数据埋点规范，埋点的成本比较低，那就可以全面埋点；另一种是公司处于草莽时期，只是想赶紧迭代，赶紧推上线，关于数据埋点没有统一规范，但此时依旧不能没有数据支撑，因为没有设置好基本的监控数据就上线产品，就像飞机的盲飞，你可能飞起来了，却不知道还有多少油、数据情况怎么样、是变好还是变差，如果要改动，要改哪里。事无巨细地追踪所有用户行为，需要全面铺上数据埋点，工作量巨大，对于正在快速迭代的初创企业确实不太现实，可能几个月后才能看到数据，所以建议采取分级分步的方法，优先定义出最重要的几个事件追踪，然后再做其次重要的事件。不过好在微信小程序本身就提供了基本的数据统计，而且还有直接配置的埋点方式，无需代码，这样就简单很多了。在微信小程序后台，整体可分为常规分析和自定义分析。常规分析就是不需要自己数据埋点，微信直接就能收集到的数据，分为三类：（1）新增、活跃、留存等概况数据，对应“使用分析”模块（2）页面流量数据，又分成了实时和非实时，分别在“使用分析中的页面分析”和“实时分析”两个模块（3）用户画像数据，包括性别、年龄、地区和终端机型自定义分析也就是数据埋点，分了两种方式：直接配置和API上报。1）直接配置只需要填写事件名称、触发动作和页面元素的ID即可，不需要添加代码，也不需要上线，这种埋点方式适合统计功能的使用情况，比如多少人点击了签到按钮、多少人进入设置页面等。2）API上报适用于收集事件下的具体属性数据，比如点击商品这个事件，如果我们想要知道用户具体点击了什么商品、商品的价格是多少等信息，就需要这种添加代码的数据埋点方式了。从另一个维度看，数据又可以分为两大类： 用户数据和业务数据。用户数据包括用户画像和行为数据，业务数据则是和业务直接相关的数据，比如购买金额、购买频率等。对不同类型数据的分析要在不同平台处理，微信小程序提供的数据分析更多是集中在用户数据部分，业务数据则主要在公司自己的业务后台。“如果你从头开始建立用户行为追踪计划，建议先找到3个最重要的一级事件，这3个一级事件，应该代表了用户从初次接触产品到最终成功使用产品的最重要的里程碑。”这是我之前在书中看到的埋点理论，把这个理论用到我们的产品中，最关键的3个一级事件是：进入小程序（PV/UV）、关键功能1的按钮点击（PV/UV）、关键功能2的按钮点击（PV/UV）。当我按照之前在书中看到的这套理论梳理了三个关键指标后，才发现实际情况没有这么简单。先是leader直接就发现了问题：这不是关键指标，应该和业务结合，目前最重要的是要让保险销售知道自己名下哪个客户有没有使用小程序，然后推动客户去使用，如果用简单的PV、UV、按钮点击等等，对业务没有什么帮助，适合后期再去完善。之后又深入思考了现状：我们现在有2个微信公众号和即将上线的2个小程序，已经构建起了一个微信生态服务矩阵，因此要考虑到4个应用之间的互联互通，而不只是我现在负责的这个小程序需要收集使用情况的数据，其他两个公众号和另一个小程序同样需要。那我们怎么把这几个微信生态应用的数据使用情况集合到一起呢？我们了解到另一个产品经理正在保险业务系统中做用户行为轨迹模块，即收集一个用户从接触到我们的品牌、到使用我们的服务、再到满足需求，整个业务流程的数据。这两个小程序的使用数据也正是整个业务流程中的一部分，他现在已经收集了公众号的使用情况，因此可以把两个小程序的使用情况也放到这个模块中。也就是说，我们把我们想要的数据需求提交给另一个负责用户行为轨迹的产品经理，把数据融合在他所做的模块中，然后我们这边再做一个用户是否使用小程序的提醒功能即可，这就实现了一个新小程序的初步数据统计需求，之后再按正常流程提数据埋点需求，把核心页面和关键流程都铺上点。我们产品内部策划好这个需求后，再与程序员沟通时，又遇到了一个问题。因为没有事前规划好，已经临近小程序上线，即使需求较小，现在再改代码会打乱发版节奏，所以开发建议在上线后一周内紧接着迭代一个小版本，把一些上线后暴露出来的问题和这个埋点需求整合在一版中。经过评估，这也在可接受的范围内，所以就按照这个节奏执行了。这才是实际业务场景中遇到的真实情况，而不是书上讲的那么清晰和简单。所以，并不是知道了一个方法论或者一个道理就可以直接套用，而是要结合实际的业务再次深入思考，并根据实际情况及时调整才能真正解决问题。总结从定位、到规划、再到落地，一款微信小程序历经打磨后终于上线了。根据线上的数据和用户反馈，然后开始进行下一版的迭代，不但要解决线上的一些问题，还有可能要修正原来的规划方向，毕竟真实的效果和自己最初的设想常常会有非常大的出入。目前这个项目已经迭代了两个大版本。真实的项目不是闭门造车，在实操的过程中一定会有大量的细节问题和业务问题，所以我梳理了整个项目后，在这里写下的文字略去了诸多细节，只保留了整体的框架、核心的流程和关键的问题。如果问我在这个项目中收获最大的是什么？还是最开始时说的：首先是从0到1做了一款新产品，这让我对整个产品的规划能力有了很大提升，也对公司内部不同系统之间的协同与配合有了更深的理解；其次才是做了一款微信小程序，对微信生态有了更多的思考，对小程序的特点有了更多了解，只有先掌握好小程序这个工具，才能更好地服务实际业务。做产品，和拍电影或写东西一样，形式与内容，两者不可偏废。本文由 @岳小鱼 原创发布于人人都是产品经理，未经许可，禁止转载。题图来自 Unsplash，基于CC0协议"}
{"title": "张小龙与其说是“未完成”，不如说是“没想好” ", "author": "Rolan", "push_time": "2020-1-14 00:04", "content": "题图｜虎嗅“公开课”这个古典互联网时代的名字，如果不是微信，可能早就寿终正寝了。同样的，“微信公开课Pro”如果没有张小龙加持，可能也无法Pro了。1月9日的2020微信公开课Pro，主题叫“未完成”。尽管张小龙“故意”缺席了这场微信每年最隆重的开发者大会，这几天还是获得了各媒体同仁从产业、行业、产品、人性等各方面、各种姿势的赞美，篇篇貌美如花。有人赞美张小龙的克制，有人盛赞微信取得的成绩，有人说他说了12分钟的视频丝毫不亚于去年4个小时的演讲，有人把他捧成了“上帝”，亦有人说张小龙进化了……我先旗帜鲜明地表明我的态度：他们的观点我都举双手认同。根据微信2019年度报告，微信月活跃用户数突破11.5亿，同比增长6%。在这个庞大的数据支撑下，在克制的张小龙故意没来的情况下，微信公开课的各个讲师轮流上阵，从小程序到小游戏，从微信AI到微信支付，交上了一份让人亢奋的答卷——小程序。小程序的活跃用户数突破了3亿，用户人均使用小程序的个数增加了1倍，2019小程序累计创造了8000亿交易总额，同比去年的数额增长160%。小游戏。微信表示，小游戏平台累计注册量超过10亿，小游戏平台商业规模的总量相较于2018年增长35%。经过一年的时间，创意小游戏已有47款通过，其中14款产品MAU峰值超过100万，4款产品累计流水过千万，创意小游戏开发者多获得了超过6000万的现金激励，其中优秀产品《消灭病毒》开发者分成超过2亿，《动物餐厅》累计用户和流水均破亿。微信支付。主要讲了微信支付分——类似于支付宝芝麻信用分，主要功能是免押金——微信表示，2019年微信支付分服务了1亿的用户，原本的押金用户中80%的用户再也不用使用押金服务，这一年微信支付分为用户减少了押金千亿。尽管如此，我依然认为，今年的腾讯公开课Pro是最平庸的一届，或者说乏善可陈。开场前的前菜依然是小游戏。工作人员提示连接现场Wi-Fi下载最新版微信7.0.10抢先体验最新功能，但现场Wi-Fi根本连不上，由于人群密度极高，连4G下都扫不了二维码，向来以注重用户体验为荣的微信，奉献了一场让人恍惚回到2G时代的开场。张小龙在开场视频结束后，很多慕名而来的观众就带着失落走了。现场不到11点就有不少人陆续离场，11点半后会场最后面那些座位几乎都空了。显然，张小龙的缺席还是让那些来“朝圣”的人失望了，本以为花了钱买了门票可以隔着人山人海看张小龙本尊一眼，结果这个中国最牛的产品经理任性地没来。不过这倒是没影响堵着会场门口卖票的黄牛们。在会场入口处，十几个黄牛大哥不停地问路人买不买门票，价格好商量，“没有门票进不去晚上的微信之夜”，据说门票价格1699元一张。有一位黄牛以为我在拍他，跑过来要看我手机，嘱咐我千万别拍，他们这些人每年都会准时出现在微信公开课的门口，有的已经连续好几年了。相比往年微信公开课Pro推出小程序和小游戏等产品，今年没有什么新东西，几乎都是更新最新的数据来吸引开发者。但虎嗅作者南七道在《 6人年入2.6亿，但微信小游戏创业者却不开心 》一文里指出，微信小游戏抄袭成风——“没有版权的概念，所以现在是小游戏一大抄。国内的抄国外的，国外的也彼此抄袭。国内没火的，抄火了的。如果小团队被大团队抄了，基本上就是等死。”这是李超入行之后最大的感受。即使最火的小游戏“消灭病毒“，也是在国外热门游戏《Ball Blast》上进行了二次改编。这款游戏一年的分成高达2.6亿。成为了整个微信小游戏的头部标杆。创始人周巍曾经分析这款游戏诞生的过程，“看看市场上哪些产品表现比较好，做二次加工，产生新的玩法。像《消灭病毒》的商业化模型就是《Ball Blast》。”“基于《Ball Blast》的核心玩法，我们在操作，题材、手感和目标设计上做了大量的二次加工。”……即使抄好了，游戏上架，能不能火，谁都不知道。因为微信小游戏，是一个完全去中心化的平台，没有入口，没有推荐位，完全靠用户搜索和开发者自己推广。从好的一面来看，就是没有人工干预，很难舞弊，但从坏的一面来看，即使很好的游戏，也没法得到推荐，要看运气了。希望微信重视这个现象。下午4点多，我走进搭建的“未完城”闲逛，依然是白色的统一风格，除了微信官方的We Store展区，其他各厂商的展区门可罗雀。本来想在We Store买点儿东西，但发现无论是卫衣、T恤还是各种玩偶、配件都跟去年展出的一模一样，没有更新，手机壳是iPhone 8的，有一套公仔套装还是猪年的。张小龙说：“微信作为一个基础的信息传递的工具或者说平台，我们一个不经意的动作，可能会引起信息洪流的流向的变化。”深以为然。大家应该还记得2019年12月26日微信公众号后台出现故障，导致无法登录后台、亦无法打开公众号文章给人带来的短暂“恐惧”。感佩张小龙的谨慎，但显然他也在谨慎地妥协。在微信公开课开始前的2019年12月23日，微信按照惯例更新到7.0.9版，支持朋友圈评论区发布自定义表情包，结果很快有人发现有些不可描述的表情包陆续出现，两天后微信官方宣布此为灰度测试，随之关闭。还有人在微信公开课前发现，微信好友上限已经允许突破5000个，不过超过5000后再加别人微信好友则只允许聊天，无法查看对方朋友圈等正常功能，这显然对新“好友”不友好。“之前我们限定一个人最多5000个好友，现在有将近一百万人已经接近5000好友。虽然不是真正意义上的好友，但也促使我们要扩大好友数目了。”张小龙在视频里隐隐不安地说，“我们扩大5000好友这个限定非常容易，但是对于它带来的影响，说实话诚惶诚恐，我们会反复思考。”显而易见，张小龙还没想好要不要讨好用户。所以，与其说微信公开课今年的主题是“未完成”，不如说是“没想好”。"}
{"title": "微信小程序搜索优化指南 ", "author": "Rolan", "push_time": "2020-1-14 00:12", "content": "有流量抢夺的的地方就会自然有战场，小程序搜索能力升级后，现在用户可通过关键词的搜索即可直达小程序页面内的服务，这将缩短用户使用小程序所提供的服务之间的时间，提升搜索效率的同时也帮助优质的小程序获得更多的曝光。微信在2019年重点对搜索进行了升级，开放了小程序基于页面的搜索，搜索将不再局限于搜索具体的某一个小程序名称，“小程序名称”的优势已经下落神坛。目前搜索是当下小程序唯一的自然流量来源，用户在使用搜索的情况下用户需求十分精准，所以搜索场景的流量价值非常高，带来的用户在后续的留存的表现中也会高出其他场景很多。有流量抢夺的的地方就会自然有战场，小程序搜索能力升级后，现在用户可通过关键词的搜索即可直达小程序页面内的服务，这将缩短用户使用小程序所提供的服务之间的时间，提升搜索效率的同时也帮助优质的小程序获得更多的曝光。微信公开课PRO 张小龙也说道，做小程序希望是搜索能进入到每一个小程序内部，这样海量的小程序可以支撑起各种长尾的搜索需求。下面一起来看看微信近期最新发布的小程序页面收录规则，希望能够助你瓜分部分流量。一、利用配置文件引导爬虫抓取小程序页面收录通过管理后台页面收录开关，来配置其小程序页面是否允许微信索引。后续小程序相关页面内容可以通过 sitemap.json文件进行配置，该文件用来配置小程序及其页面是否允许被微信索引。如果小程序目录没有该文件，打开“页面收录”后就会默认小程序所有页面都可以被索引。微信会通过爬虫的形式，为小程序的页面内容建立索引，同时会带上1129的场景值。当用户的搜索词条触发该索引时，小程序的页面将可能展示在搜索结果中。如果直接关闭收录能力，微信将不会进一步收录你小程序内的任何内容，意味着你的小程序内容（包含已收录内容）无法在搜索和扫条码场景下展现，这将减少你的小程序曝光机会。当存在不便于被微信收录的页面时，也可利用sitemap文件进行配置，将一些用户个人信息、通信信息、商业秘密等敏感内容，设置成不允许索引状态。sitemap文件配置目前包含以下5种规则：特指某个页面不索引，其余页面均允许被索引；特指某个页面被索引，其余页面不被索引；包含 a 和 b 参数的 页面会被优先索引，其他页面都会被索引；包含 a 和 b 参数的 页面会被优先索引，其他页面不被索引；不做其它设置时，默认情况下所有页面都会被微信索引。如果小程序想突出一些主打的价值页面，可利用页面路径推送能力，让部分页面被优先且及时的收录，进而提高小程序内容的曝光机会，并且缩短用户体验路径。二、设置清晰的标题和页面缩略图页面标题和缩略图对于微信理解页面和提高曝光转化有重要的作用，那么何为“清晰的标题”，个人猜测是根据页面标题进行语义识别，分词后划分各词权重配合缩略图来进行收录以及搜索结果展示。比如页面标题为“精选日签推荐”，假设分词结果为“精选”、“日签”、“推荐”，那么假设“日签”的权重为88，其余为45、33。使用页面路径推送能力，直接搜索关键词“日签”，搜索结果就有可能包含该页面。以上个人猜测是头部流量的情况，根据关键词权重进行收录及优先排序。还有一种情况是尾部流量，微信公开课PRO 张小龙也说道，做小程序希望是搜索能进入到每一个小程序内部，这样海量的小程序可以支撑起各种长尾的搜索需求。尾部流量指的是一些流量比较低的一些关键词，但尽管这些关键词搜索量很低，但它们加起来的可能占总数的一大半。比如做的是一款“壁纸类小程序”，发现“新年壁纸”以及一些“娱乐明星壁纸”占据很多搜索量。对于一些初创企业，想竞争一些头部关键词比较难。但如果利用尾部浏览比如聚焦于“NBA球星”，就有可能撕开一个口子。当然，以上例子仅供参考，微信并没有明确的公布搜索结果排序规则，只能靠猜。实际情况最好配合“微信指数”以及小程序页面访问情况来进行优化，如果发现局部页面比起其他页面访问量明显高一个档次，该页面对应的微信指数又不是很高的情况下，那么我认为可以使用该策略。如果不自定义转发图片的情况下，默认会取当前页面从顶部开始，高度为 80% 屏幕宽度的图像作为页面缩略图转发出去。个人建议小程序核心页面还是自定义为佳，因为微信默认截取的部分很可能缺失部分画面。其次用户转发时，缩略图也有刺激用户打开的欲望，通过好友转发打开是目前小程序流量top3的来源。此外最好也给 video、audio 组件补齐视频封面属性，用于给搜索等场景作为视频封面展示，建议使用无播放 icon 的视频封面图，微信之所以要求没有播放icon应该是避免icon的遮挡，导致视频封面的识别不佳。三、合理的微信授权微信一直提倡的“一切以用户价值为依归”，所谓合理即在必要的时候才要求用户授权，比如浏览动态可以匿名，而发表评论需要留名，从而用户在发表评论时才请求授权。如果某类小程序一启动就必须注册成功后才能使用，从业务上考虑注册操作不能滞后，那么大概率该类型小程序与收录无缘，因为可能会发生收录错误。四、微信不收录web-view如果小程序某些页面是嵌入web-view，而不是小程序原生页面，无法收录里面的任何内容，微信团队称目前做法做到，长期来看也可能做不到。毕竟还是把时间和力气花在刀刃上，从布局和趋势来看，猜测小程序还有更多有价值的事情值得去做。比如“在微信搜索商品”，这些功能可以很好的满足微信用户对商品的信息获取诉求，同时也能为商家小程序带来曝光流量和建立用户品牌认知的机会。五、微信其它收录规则规则1：小程序里跳转的页面 (url) 可被直接打开小程序页面内的跳转url是微信爬虫发现收录页面的重要来源，且搜索引擎召回的结果页面 (url) 是必须能直接打开，不依赖上下文状态的。特别建议页面所需的参数都包含在url，以保证每个独立页面能够打开，便于爬虫收录。规则2：清晰简洁的页面参数结构清晰、简洁、参数有含义的 querystring 对抓取以及后续的分析都有很大帮助，但是将 JSON 数据作为参数的方式是比较糟糕的实现。这里是建议不要将json作为url的参数，过于冗长，但是和第一条是有点相互矛盾，即想页面跳转不依赖上下文，又想参数简洁。多的不说，抽屉多准备点零食给研发大佬吧。规则3：页面跳转优先采用navigator组件微信建议页面之间的跳转使用navigator组件，目前小程序提供了两种页面路由方式。第一种就是navigator 组件第二种是路由 API，包括 navigateTo / redirectTo / switchTab / navigateBack / reLaunch。微信所提倡的是使用 第一种navigator 组件。两种的区别应该就是我骑着自行车和开一辆大奔回丈母娘家，开大奔必然要走机动车道，走机动车道必然会被摄像头捕捉，而骑自行车可以走胡同小道，胡同小道难以被摄像头捕捉。第一种更方便微信爬虫捕捉。参考资料：https://developers.weixin.qq.com/community/develop/doc/000a0a1191c3a817e7a9c6f1e51409?page=1#comment-list#专栏作家#动物园园长，微信公众号：首席吹牛官，人人都是产品经理专栏作家。互联网圈十八线作词人，国家一级退堂鼓表演艺术家。颜良而文丑，欢迎交流。本文原创发布于人人都是产品经理。未经许可，禁止转载题图来自Unsplash，基于CC0协议"}
{"title": "小程序中设置缓存过期 ", "author": "Rolan", "push_time": "2020-1-15 00:23", "content": "需求是两张图片在这个时间段内交替显示，当天只弹一次图片。\r\n后端返回的数据格式：\r\n{\r\n    \"start\": \"2019/10/08 00:00:00\",\r\n    \"end\": \"2019/10/30 23:59:59\",\r\n    \"ads\": [\r\n        {\r\n            \"image\": \"xxxx\",\r\n            \"uri\": \"wechat:zhizhuxy666\"\r\n        },\r\n        {\r\n            \"image\": \"xxx\",\r\n            \"uri\": \"wechat:zhizhuxy666\"\r\n        }\r\n    ]\r\n}\r\n复制代码小程序中缓存没有过期时间，也就是说存储进去的缓存要自己手动清除，那么如何保证两张图片能够交替显示呢？\r\n需求分析\r\n\r\n一天只弹一次广告\r\n图片轮流显示\r\n只在时间范围内显示\r\n\r\n这里有个关键是，如何知道时间有没有到第二天？\r\n思路\r\n需要用到两个缓存：\r\n\r\nshowAdvert：用于检测弹窗时间是否在有效期内\r\nshowAdvert${currentDay}：用于检测当天是否弹过弹窗\r\n\r\n为什么要用到两个？\r\n因为这里有两个状态检测：一个是否在有效期内，一个是当天是否弹过弹窗。\r\n如何判断时间有没有到第二天？\r\n将所有天数的时间戳加上一天保存起来（ps：这个方法很蠢）。然后每次进入小程序都获取下当前的时间，对比下当天的时间是否大于保存的时间戳。如果超过就说明已经到了第二天。\r\n为什么要加上一天？\r\n因为后端返的开始时间是当天的凌晨，而真正要过完这一天是24点之后。一天的毫秒数：24 * 60 * 60 * 1000。\r\n代码实现\r\n变量的声明\r\n声明需要使用的时间戳\r\nconst startTempStamp = new Date(item.start).getTime()       \r\nconst endTempStamp = new Date(item.end).getTime()\r\nconst oneDayTempStamp = 24 * 60 * 60 * 1000     // 一天的时间戳\r\nconst now = (new Date('2019/09/28 00:00:01')).getTime()\r\n复制代码声明需要一共多少天，以及当天是第几天；这里使用Math.ceil()向上取整\r\nconst allDay = Math.ceil((endTempStamp - startTempStamp) / oneDayTempStamp)\r\nconst currentDay = Math.ceil((now - startTempStamp) / oneDayTempStamp)\r\n复制代码判断当前时间是否在时间有效期内内，如果在时间有效期内，就弹弹窗，如果不在就不弹\r\nif (now > startTempStamp && now < endTempStamp) {\r\n    ... //下面弹窗逻辑的实现\r\n}else {\r\n    this.setData!({showAdvert: false})\r\n    wx.setStorageSync('showAdvert', false) \r\n}\r\n复制代码接下来开始写弹出弹窗的逻辑。\r\n弹窗逻辑的实现\r\n首先判断当天的时间戳是否大于前一天的时间戳，如果大于就说明到第二天了，如果小于说明今天还没有过去。\r\n然后清除前一天的缓存\r\nconst table = []\r\nfor (let i = 1; i <= allDay; i++) {\r\n    table.push(startTempStamp + oneDayTempStamp * i)\r\n}\r\nif (now > table[currentDay - 2]) {\r\n    wx.removeStorageSync(`showAdvert${table[currentDay - 2]}`)\r\n}\r\n复制代码图片交替显示\r\nlet n = 0\r\nif (currentDay % item.ads.length === 0) {\r\n    n = 1\r\n} else if (currentDay % item.ads.length === 1) {\r\n    n = 0\r\n}\r\n复制代码检查当天广告是否弹出过\r\nconst advert = wx.getStorageSync(`showAdvert${table[currentDay - 1]}`) || false       \r\nif (!advert) {\r\n    this.setData!({showAdvert: true})\r\n    wx.setStorageSync('showAdvert', true)\r\n}\r\n复制代码弹出广告，并设置缓存\r\nconst timeStamp = Math.floor(new Date().getTime() / 10000).toString()\r\nthis.setData!({\r\n    advertLink: item.ads[n].image + `?timeStamp=${timeStamp}`,\r\n    copyWechat: item.ads[n].uri,\r\n}, () => {\r\n    wx.setStorageSync(`showAdvert${table[currentDay - 1]}`, true)\r\n})\r\n复制代码一进入页面读下本地缓存，是否要弹出弹窗。\r\nonShow(){\r\n    const showAdvert = wx.getStorageSync('showAdvert')\r\n    this.setData!({showAdvert})\r\n}\r\n复制代码总结\r\n这里最大的问题是如何判断当前的时间有没有过24点，自己一直没有想到比较好的解决方法，限于自己的水平，没有更好的方案，这里我只是记录下实现的过程，不喜勿喷，如果有更好的方案，欢迎指点。\r\n另外可添加微信ttxbg180218交流"}
{"title": "腾讯上线新冠肺炎症状自查工具并开放接入 ", "author": "Rolan", "push_time": "2020-2-5 00:27", "content": "腾讯科技讯 继1月27日国家卫生健康委宣传司联合腾讯，发布“新型冠状病毒感染的肺炎医疗救治定点医院和发热门诊导航地图”后，腾讯再上线新冠肺炎症状自查工具，帮助遇到发热、咳嗽等症状的用户自我评估病情，做出合理的就医安排。打开微信“支付”页，进入“医疗健康”服务，或者长按二维码，即可找到这个“发热自查”工具。这个“发热自查”小工具使用了腾讯AI能力，严格遵照国家卫生健康委员会办公厅和国家中医药管理局办公室联合印发的《新型冠状病毒感染的肺炎诊疗方案(试行第四版)》，为用户提供风险评估。按照系统提示，用户只需要回答相应的问题，并会持续根据权威指南等知识更新。如是否有发热、咳嗽等不适症状，或者近期是否到过武汉等信息，“发热自查”工具即可给出风险评估。针对患新冠肺炎风险较低的情况，依照《诊疗方案》，“发热自查”工具会给出居家观察、自主报备等指引。遇到风险较高时，则会建议建议用户前往发热门诊就诊，结合“新型冠状病毒感染的肺炎医疗救治定点医院和发热门诊导航地图”，为用户推荐并导航到距离最近的门诊。而随着“发热自查”工具的上线，腾讯此前与国家卫生健康委宣传司联合发布的“新型冠状病毒感染的肺炎医疗救治定点医院和发热门诊导航地图”也进入了2.0版本的升级：除了实现“发热自查”和就诊指南外，还可查看部分医院的实时详情，包括医院实时人流查询，找出附近排队最快的医院；查看医院开诊时间及动态公告，方便用户规划自己的就诊安排。这两项查询能力也同时向医院开放，有意接入向群众提供便捷查询服务的医院可联系liamzhou@tencent.com，或者zeyusun@tencent.com，提出接入申请。此外，“发热自查”工具也公布了开放接入指南，方便各地卫健委、医院等机构，以及各类资讯服务商，通过便捷的微信公众号、小程序等方式，为更广泛的用户提供智慧自查，帮助降低因求诊不当而引起交叉感染的风险。按照以下指南即可接入“发热自查”工具。一、公众号接入1、关联腾讯健康小程序关联小程序的两种方式方式1：搜索“腾讯健康”方式2：输入Appid：wxb032bc789053daf42、关联后在自定义菜单或公众号推文中添加链接1）自定义菜单：选择跳转小程序-选择腾讯健康-输入小程序路径小程序路径：pages/index/home/main?chanel=AAFM0zwA4qJjIx6syQ6q0JAz&navigate_uri=%2Fpages%2Fwebview%2Fmain%3Fsrc%3Dhttps%253A%252F%252Ffeiyan.wecity.qq.com%252Fwuhan%252Fdist%252Findex.html%2523%252Fselftest%253Ffrom%253Dlung%2526channel%253DAAFM0zwA4qJjIx6syQ6q0JAz%2526_scope%253Dsnsapi_base备用网页（可使用自定链接或使用如下链接）：https://card.wecity.qq.com/v2/social-insurance/base-info?channel=AAEngZ_b9-g2Na-G2sT6HH4n&cityCode=4403002、小程序接入微信官方接口文档链接：https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.htmlappId：wxb032bc789053daf4小程序路径：pages/index/home/main?chanel=AAFM0zwA4qJjIx6syQ6q0JAz&navigate_uri=%2Fpages%2Fwebview%2Fmain%3Fsrc%3Dhttps%253A%252F%252Ffeiyan.wecity.qq.com%252Fwuhan%252Fdist%252Findex.html%2523%252Fselftest%253Ffrom%253Dlung%2526channel%253DAAFM0zwA4qJjIx6syQ6q0JAz%2526_scope%253Dsnsapi_base此外，我们还支持对新冠肺炎自查工具中部分组件进行自定义配置，适配各类应用场景，如需个性化配置，请发送邮件至 helenlu@tencent.com或1870316620@qq.com申请, 我们将尽快处理配置需求。"}
{"title": "支付宝刚刚发布的“抗疫召集令”，开发者能“捞到”啥好处？ ... ", "author": "Rolan", "push_time": "2020-2-8 00:40", "content": "线下门店门可罗雀，线上数据却一路飙升。在疫情的影响之下，这句话成为不少零售企业逆流而上的真实写照。2月1日，绫致集团零售线上小程序交易额为141万；2月2日，涨至272万；2月5日，增至641万。甚至线上交易总额已经超过线下门店交易额的3倍。此时，由线下转至线上这早已不是秘密，而无论是企业还是政府，在线上化的道路上，都“心照不宣”的选择了小程序作为服务的载体。在疫情爆发的第二天，武汉、杭州、广州这些疫情严重的地区，就开始率先推出了官方小程序用于疫情信息的收集和科普。显然，小程序已经成为了这场疫情中救急的“解药”。作为小程序的平台方，微信和支付宝都陆续推出了相应的扶持政策：2月3日，腾讯宣布设立2亿元资金池，发起“战疫开发者公益联盟”，并在微信开放社区上线了服务专区，连接服务商、开发者的资源，为政府部门、医疗机构等快速开发小程序。而支付宝却采用了截然不同的思路，昨天，支付宝发起了“阿里小程序开发者召集令”，不同于微信的平台模式，而是利用阿里生态的力量，为开发者提供“实在”的资源和各激励措施：对于疫情急需的小程序，免费提供的特色开发技术支持和专属的服务通道；阿里平台内亿级的流量支持，提供携手阿里云“繁星计划”，开发者小程序同步投放到阿里生态内的多个平台；此外，还为每个优秀的疫情小程序提供最高50万元的现金奖励。 这种差异化打法引来各路开发者纷纷打call：一方面，开发者们虽“受困”于家中，但仍需要资金保证正常的生活，支付宝此时发起的招募令，可谓是“授人以渔”；另一方面，不少互联网平台也都在做资源对接的服务，而散落在开发者、企业、服务商中的大量潜力未被挖掘，以这种方式调动开发者与资源方的积极性，能够实现快速响应和高效的资源对接；当然，对于整个阿里生态来说，通过这种方式，让更多人看到阿里生态的能力和创造力，也是对外“秀肌肉”的好机会。不过这种方式到底能否切实满足开发者当下的需求？又有哪些具体的政策和规则需要注意？对此，晓程序观察（yinghoo-tech）与支付宝深刻聊了聊关于此次“支付宝疫情小程序开发激励计划”的那些事。___1__最高50万元奖励，能吸引开发者吗？“最高50万元奖励、支付宝特色能力和技术支持、费用全免。”这是支付宝此次“抗疫小程序激励计划”的主要关键词，昨天，支付宝也公布具体的激励细则，支付宝方面告诉晓程序观察（yinghoo-tech），扶持主要将集中在技术支持方面和资金奖励上，当然，流量扶持也包含在内。开发是小程序的第一步，该计划中，支付宝给予开发者的支持可以分成两块。一是阿里云的资源：小程序云资源包3个月免费使用，支持用于开发疫情相关小程序所需的后端云资源；小程序云Serverless不限规格不限量免费使用，为开发者提供的一键构建后端应用运行环境、后端服务部署、运维监控等能力的一站式小程序部署服务。二是支付宝特色能力的免费开放使用。主要包括：疫情开发者可以通过绿色通道入驻能力实验室，使用音视频、蚂蚁森林、AR等特色能力；天猫精灵AI能力，免费提供人机语音交互、视觉识别能力，音视频播放能力，及专项技术接入支持；友盟+提供免费小程序数据统计及专业数据支持服务，帮助开发者洞察用户数据波动和行为变化；蚂蚁区块链资源，提供开放联盟链上链资源，免费GAS资源以及专门接入技术支持服务；值得一提的是，支付宝还为此设置了专属极速审核通道：疫情类小程序1小时急速审核、提供官方1对1技术支持服务，支付宝的to B服务能力也是其优势所在。 除了技术上的支持，在“钱”方面，支付宝也有相应的激励，其由两部分组成，一方面是刚刚提到的，小程序云资源和特色能力上的费用减免；另一方面则是“实打实”的现金奖励，最高可达50万元。1、针对非模板小程序：单个小程序上线后使用MAU大于5万人，每个小程序奖励5万元；若服务上线后，被政府、医疗卫生机构、交通枢纽作为官方服务进行使用和推广等，奖励还会加码；2、针对小程序模板生成的商家小程序：服务商开发小程序模板上架服务市场后，被商家订购后，单个小程序使用MAU大于200人，且至少有3个商家订购并上线，每个奖励300元，单个服务商奖励上限50万元。不过，想要获得这些奖励，除了要达到以上这些要求，从审核上看，依然有门槛存在。虽然此次计划是面向所有的开发者和服务商，但对不同的小程序类型也会存在着不同的门槛和政策，某些特定的功能与服务，其实还是有相关的资质。比如，关于一些疫情数据披露的小程序，是需要有媒体资质和医疗资质的，或者买菜类小程序就需要卫生许可证、营业执照等，这就不建议个人开发者开发。除了资质的审核外，支付宝平台对疫情相关服务的质量也有所把控，设有专门的保障团队和数据监控，在事前、事中、事后三个阶段进行防控：事前进行安全合规、业务合规、技术质量的三个维度并行审核，通过智能自检、自动化图文识别等审核产品；上线后会有成长扶持和健康分评估等机制保障，结合用户反馈、资金监控等保障消费者服务体验；事后有体系化很多客诉处理保障、风险处置和小程序多手段处置等。“从费用减免这一点来看，支付宝的激励计划还是非常有吸引力的”，有开发者告诉晓程序观察（yinghoo-tech）,“不过，即使支付宝没有发布这样一个计划，也有大量疫情相关的小程序上线，竞争还是很大，所以支付宝能给怎样的流量倾斜，也是我们开发者关注的。”可见，对于开发者而言，虽然技术和资金能够吸引开发者入驻，但是他们更关注，仍是流量。实际上，我们也能看到社会层面对于疫情相关小程序的需求，所以，流量上扶持力度有多大，才是更为现实的问题。___2__有待完善的流量扶持政策流量怎么扶持？如图，支付宝会在支付宝首页、疫情服务专题页、小程序发现页、搜索等多入口推荐疫情相关小程序。不仅如此，“繁星计划”也来帮忙，即“一云多端”，开发者只要一次开发，就可以在钉钉、高德、手淘等阿里系其他App上同步上线，并且可以获得这些平台的入口推荐。当然，想要获得推荐，“抗疫”小程序需要满足优质小程序的条件：经支付宝开放平台审核，有助于疫情防控和疫中疫后恢复运营及便民生活的优质生态小程序，具体包括十大类目：口罩预约、疫情上报、在线问诊、代跑腿、社区出入管理、餐饮外卖、送药品、果蔬配送、在线教育、运动健身；小程序性能和服务质量满足用户诉求，小程序基础分≥6分：总分0-10；激励期间无严重违规（单次扣分12分及以上的处罚）和重大舆情。目前，支付宝尚未公布具体的“推荐标准”。不过我们从多位支付宝相关人士那里了解到，虽然支付宝会联合阿里资源为“抗疫”小程序流量开闸，但具体的“推荐标准”仍离不开小程序性能和服务质量、用户访问量、用户的喜爱程度等多维度。从开发者的角度，想要在众多竞争者中脱颖而出，“霸占”支付宝首页，除了做好小程序的本身的服务之外，运营手段也必不可少，比如：1、善用搜索入口，比如，接入“服务直达”功能。开发者配置支付宝小程序“服务直达”时，如果某关键词仅有一家小程序成功申请，该卡片位置将由该小程序独占。比如，某小程序申请“预约口罩”这个关键词，它就会独享该词条的搜索流量。2、用生活号构建消费场景，此次开放的十大类目中，对于在线教育、运动健身这样的服务场景，生活号就是长期培养用户心智的最佳场所。3、收藏获利法。支付宝官方为开发者还提供了“收藏有礼”的能力，只要用户收藏小程序，就可以获得打折券或者优惠券，代跑腿、餐饮外卖、送药品、果蔬配送等服务场景的小程序，就可以使用这种方式。在支付宝发布这项计划后，我们也第一时间了解了开发者的看法，几位开发者都抱着观望态度，支付宝的流量扶持一直是优势，对于开发者来说，很具有吸引力。但这次激励计划中的流量扶持还不够清晰，尤其是但在众多同类服务的开放者竞争之下，支付宝的流量扶持能给有多大影响还不好说。文章开始我们提到，支付宝发布这项“激励计划”，可以以这种方式调动开发者与资源方的积极性，还能够壮大自己的开发者队伍，丰富自己的开发者生态。但是，对于支付宝来说，开发者能够获得哪些实质性的“好处”，才是决定其能否借助这次机会丰富生态的关键。"}
{"title": "支付宝英雄帖发布首周超1200位开发者报名：首批181款小程序已开发或上线 ... ", "author": "Rolan", "push_time": "2020-2-16 00:02", "content": "全民积极响应国家抗击新冠肺炎疫情的号召，正催生出越来越多新的互联网服务缺口。基于对用户、政府、企事业单位抗疫服务需求的紧缺情况调查，支付宝于2月6日面向社会各界开发者发布“10大疫情期最急需服务开发清单”，号召更多开发者投入进来开发更多服务，解决社会问题。今日支付宝官方发布消息称， 发布“英雄帖”不到一周的时间，已有超过1200位个人开发者和服务商报名参战，投入开发用户和机构急需的疫情服务相关小程序。其中，首批报名者开发的服务中已有181款疫情小程序进入开发流程或已上线，开始为用户和机构需求方提供疫情信息智能问答、疫情统计、心理咨询、紧急物资调度等服务。支付宝相关人士表示，抗击疫情期间，优质服务商的自研小程序和小程序模板，在帮助政府和企事业单位迅速上线疫情服务上发挥了巨大的价值。 经筛选，初期已有58家优质服务商的抗疫小程序已进入了开发流程，服务涵盖了政务民生类、法律服务、医疗类、公益类、疫中便民生活类、物流配送类、疫中疫后恢复商家经营类等几大刚需场景。 服务商开发的小程序模板，可以让机构需求方经过简单配置就上线一款自己的小程序。1月27日，支付宝推出“疫情服务直通车”，整合了疫情直播、紧急寻人、谣言粉粹机、权威解读等功能和“问查看吃买办”6大类不出门就可以使用的刚需服务。 目前累计已有近3亿人通过“疫情直通车”获取疫情相关服务。目前支付宝“英雄帖”还在持续招募疫情相关服务相关的开发者和服务商，并提供亿级流量和技术资源扶持及现金奖励，有意参与共抗疫情解决社会需求缺口的开发者可登录“支付宝开发者中心”疫情专题页面报名。"}
{"title": "国务院推荐微信到家业务，微信预告新能力协助零售行业商家战“疫” ... ", "author": "Rolan", "push_time": "2020-2-16 00:12", "content": "近日，国务院联防联控机制召开新闻发布会，介绍疫情防控中重要生活物资生产保供有关情况。会上，国务院商务部市场运行司副司长王斌向全国市民发出倡议：大家尽量少出门，生鲜物资可以在微信下单购买。疫情阴影下，微信下单生鲜到家，已经成为了市民在家隔离购买基础物资的首选，也成为商家做线上经营的标配。并且，目前大部分生鲜到家业务都支持送货上门到小区“无接触配送”，不需要到店自取。据微信官方数据显示，从除夕到2020年大年初七，小程序生鲜果蔬业态交易笔数同比增长149%，社区电商业态交易笔数同比增长322%。目前，数据还在持续增长中。诸多零售品牌如步步高、永辉、每日优鲜、天虹、兴盛优选、百果园等都通过小程序到家业务，获得了不错的经营效益。微信官方也为零售行业商家准备了小程序到家业务经营的十二个武器。小程序到家必用的六大免费流量疫情之下，微信平台积极为用户提供战“疫”服务，同时也帮助更多商家做好经营，2月15日，微信梳理了目前零售商家可用的六大免费流量入口，并宣布小程序搜索专区和支付后直达到家小程序能力将在近期上线。1、小程序搜索多个专区微信官方表示，为了帮助用户更方便地在微信内找到生鲜到家商品、疫情紧缺物资，将在下周上线微信小程序搜索“到家自提专区”、“疫情紧缺物资专区”及“滞销农产品专区”，直接展示相关小程序。如果商家提供了生鲜食品、口罩、消毒液、消毒酒精等疫情防控商品或滞销农产品，可留意微信开放社区的报名通知，也可通过微信行业助手公众号，留下小程序资料及联系方式，入选的小程序将会被展示。2、支付后直达到家小程序微信支付即将针对各行业到家服务小程序推出快速触达能力，用户在线下商户微信支付后，可快捷进入该商户到家小程序，引导用户使用无接触的购物方式。除了2个即将上线的新能力，微信官方还有这4个现有的免费流量入口，可以助力零售行业商家发展到家业务：3、附近的小程序基于地理位置，微信“附近的小程序”能力可以让商家的小程序直接免费曝光在用户的“附近的小程序”入口，拉新能力强。用户往往会选择周边的商户来下单，商家通过在微信公众号后台将已有的小程序设置到“附近的小程序”，即可为门店5公里的用户提供服务，还可以通过“优惠券”来吸引用户促成交易。4、我的小程序“我的小程序”不需要成本，是用户所有使用的小程序中，留存最高的一个入口，商家可以重点关注。餐饮、到家业务的商家，可以引导用户将小程序添加到“我的小程序”，即可实现用户在微信首页下拉窗口中，直达“我的小程序”，实现快速访问。5、搜索微信搜索是小程序非常有潜力的一个入口。餐饮、到家业务的商家，可通过后台的搜一搜入口配置品牌官方区及服务，即可被用户搜索，直接获得曝光与交易的机会，还能强化用户对品牌的认知。6、企业微信与微信互通能力企业微信已经与微信小程序打通，注册了企业微信的企业可通过「客户联系」「客户群」等互通能力，将到家服务等小程序一键转发给微信里的顾客，直接触达为顾客提供专业、有温度服务。小程序到家的五大运营工具面对商家使用到家小程序存在的一些运营问题，微信官方也给出了五大运营工具，希望可以帮助商家提高经营效益，提升到家业务能力。1、微信群微信群+小程序，让微信群可直接帮小程序转化。商家可以通过团长与门店附近的小区住户快速建立微信群，提供定时在线点餐、发起团购食材、推送优惠信息、推出速食食品等服务，还能根据不同区域和用户属性推荐不同商品，拉动交易。2、小程序订阅消息及时性强、留存高的小程序订阅消息可将点餐配餐进程信息、送餐及配送信息、优惠券过期提醒等重要信息，便捷有效地通知用户。3、微信物流助手-即时配送能力微信官方表示，商家可通过此能力统一对接顺丰同城急送、闪送、达达快送和美团配送四家配送公司，节省工作量。还可通过微信物流服务通知给用户发送配餐情况、配送员实时位置信息，提供回访小程序能力。4、微信导购助手微信导购助手可以帮助商家主动向服务号粉丝发起一对一的沟通，更有温度、人性化，还可以盘活现有服务号粉丝，精准实现转化。5、微信行业助手微信官方推出的微信行业助手小程序，可以帮助商家免费学习运营工具、全方位提升经营能力。商家的小程序管理者、运营者、开发者都可使用，可以对比自己的小程序与同行业的情况，了解行业最新的玩法。到家小程序助力零售业务提升线上经营效率，高效战“疫”作为参考，微信官方也公布了一批通过到家业务提升了经营效率的品牌运营数据，并提供了相对应的业务模式，希望可以给广大商家提供业务经营上的借鉴。1、小程序名称：步步高better购业务模式：超市+微信群+小程序运营效果：1月29日，步步高超市正式上线“小步到家”服务，采取微信社群集单，在小程序下单、商品由步步高总仓直发模式，目前已在长沙、株洲、湘潭、益阳等城市开团。2020年1月，步步高到家的多业态订单量环比增长3倍，同比增长10多倍。2、小程序名称：YH永辉生活+、永辉买菜业务模式：超市+小程序“无接触配送”+订单集中配送运营效果：疫情期间，永辉超市到家服务在全国门店上线“无接触配送”，以小区为单位集中配送订单。除夕到初六，永辉生活·到家福州地区订单同比增长率超过450%，销售额同比增长超过600%。2月8日单日，永辉超市包括小程序在内的多平台到家服务全国订单量首次突破30万单。3、小程序名称：每日优鲜水果生鲜买菜外卖业务模式：生鲜O2O平台+小程序+微信群+腾讯智慧零售圈层咨询运营效果：每日优鲜运用大数据能力提前做好配送资源和运力的调配，同步调整商品供应信息，保障配送。疫情期间，每日优鲜小程序到家和社群下单交易额同比增长300%以上，用户还通过微信群帮助小程序自发传播。4、小程序名称：天虹业务模式：超市+小程序+社区接龙购物运营效果：天虹在配送方式上新增“一对多”配送方式，按社区分类配送，用户下楼自提。同时与多个超市周边物业推进社区接龙购物服务，提前对接购物清单。春节期间各门店销售占比比平时提升了1倍以上，部分门店达到40-50%。广东地区天虹超市到家订单量增加近3倍，销售增长超2.5倍。5、小程序名称：兴盛优选业务模式：小程序+社区电商运营效果：兴盛优选和部分武汉小区物业合作，召集团长后发货到小区，由顾客按号码上提取点自提。目前兴盛优选已经完成300个社区的配送服务，覆盖近30万户社区家庭。不少门店单日的订单量突破3000单。其中武汉万科金域蓝湾中央花园店单日订单达到了6300单。6、小程序名称：百果园+业务模式：门店+微信群+小程序+会员码运营效果：百果园在微信群内实现活动触达、商品接龙；同时使用微信小程序到家+会员码+微信群完成转化。目前百果园小程序到家渠道同比增长5倍。社区接龙到点促进交易，部分单店一天能够通过社群卖出一两万元的商品。除了以上案例，微信开放社区的服务平台最新上线了“餐饮零售”疫情专区，商家可前往了解更多案例详情，商家也可以在疫情专区与服务商快速对接，完成到家自提小程序的上线。同时，微信也欢迎更多服务商入驻微信服务平台。未来，微信将密切关注疫情和零售到家业务的发展，持续推出新能力新措施协助零售行业商家提供优质的小程序到家服务，共同战“疫”！"}
{"title": "微信开放“智慧零售”入口，每日优鲜、优衣库等商家接入 ", "author": "Rolan", "push_time": "2020-2-18 00:02", "content": "36氪从知情人士处获悉，2月18日起，微信支付页面中间栏将开放“智慧零售”入口，\t深圳地区用户可通过微信客户端“我-支付-腾讯服务-智慧零售”访问腾讯智慧零售小程序，已接入商家包括每日优鲜、永辉、优衣库、沃尔玛等。智慧零售入口的放量是逐步扩大的，\t今日起在深圳落地，此后陆续在北京、上海、广州、成都、重庆等地上线。 据了解，腾讯智慧零售微信入口曾在2019年11月福州地区小范围测试。从小范围测试到逐步全量开放，腾讯智慧零售开始全面发力。以每日优鲜为例，用户进入微信支付页面，可在腾讯服务入口点击“智慧零售”，进入后可浏览距离最近的前置仓商品及活动信息，并在微信内完成购物闭环。据知情人士透露，这一入口还将给优质零售企业更多的展示机会，\t为腾讯智慧零售的线上线下合作伙伴带来更多流量利好。值得一提的是，在微信这一波流量到达之前，入驻商家中生鲜到家类服务（每日优鲜、永辉）在疫情期间，已经出现了订单量的高速增长。据微信官方数据，除夕到初六，永辉生活到家业务福州地区订单同比增长率超过450%，销售额同比增长超过600%。2月1日，永辉超市到家服务全国订单量春节期间首次突破20万单，销售额突破2000万元。同一时段，每日优鲜小程序相比去年同期的订单量则增长309%，实收交易额增长465%，客单价上涨至120元。仅初一当天订单量较去年涨幅增加227%。永辉早在2018年9月就是腾讯智慧零售的样本，每日优鲜和腾讯智慧零售的合作也已有开端。2019年6月，腾讯智慧零售及每日优鲜共同启动每日优鲜“智鲜千亿计划”——\t计划在2021年实现千亿GMV 。这是一个不小的挑战。除了智慧零售入口逐步开放带来的微信流量，永辉及每日优鲜还共同应用了腾讯智慧零售的开放能力——包括营销能力，通过圈层视图工具实现精准投放和社交裂变；物流助手，帮助精准选址及优化配送路径；以及通过消费大数据指导上游选品。这不是微信第一次开放入口直连商家。2019年10月底，微信一级购物入口切换为京东社交电商“京喜”，2020年京喜的目标是“大几千万的月活用户数”。据了解，在切换到微信一级购物入口的两个多月，京喜的复购率较以往已提升不少。社交电商之后，\t腾讯智慧零售入口增加了极速到家、大牌好店、出门逛街等类目 。智慧零售板块进入微信支付入口，也是微信生态服务体系的进一步完善。2020年微信释放的一系列信号及能力都围绕连接内容及服务展开。\t在微信2020年展望中已有分析 ：在内容生态上，公众号求变、视频号补位；而在服务生态上，一个区别于早期淘宝的电商交易体系正在形成，一个更具象的描述是，一个以消费者和零售企业本身为核心的社交电商体系也在逐步建立。"}
{"title": "微信小程序直播能力开启公测 疫情下助推商家卖货 ", "author": "Rolan", "push_time": "2020-2-18 00:07", "content": "新浪科技讯 2月17日下午消息，据商家爆料，收到小程序直播公测邀请，相关邀请站内信显示，小程序直播组件是微信官方提供的商家经营工具，商家通过直播组件，可以在小程序中实现直播互动与商品销售的闭环。　　在2020年1月9日的微信公开课PRO上，微信小程序交出三周年成绩单： 2019年小程序日活超3亿，累计创造8000多亿交易额，同时预告即将推出最新的官方小程序直播组件。　　通过商家爆料信息可知，直播组件是微信向B端商家提供的一项能力。新浪科技了解到，微信小程序直播画面为竖屏观看形态，画面内提供了展示商品、点赞、评论、抽奖、优惠券、购买、数据展示等能力，而目前收到公测邀请的商户可以在小程序后台直接开通直播能力。　　综合来看，微信小程序直播的主要优势除了庞大的微信用户体量和社交优势外，还有一个重点：流程在商家小程序内闭环，无需跳转其他小程序或App。据了解，小程序直播支持最快一天开发完成、免资质申请。疫情爆发以来，已有商家通过公众号+群+小程序直播的方式进行社群粉丝直播营销。　　新冠肺炎疫情爆发以来，为抗击疫情，各行各业纷纷推出“无接触服务”，直播受到较大关注。2月15日，商务部办公厅发布的《关于进一步做好疫情防控期间农产品产销对接工作的通知》就鼓励电商企业通过直播等带动农产品销售。在疫情背景下，小程序直播的推出成为商家发展的新机遇，同时也会助推小程序电商生态的进一步扩张。　　今日早些时候，微信发布了《微信战“疫”数据报告》，涉及从小程序到家业务、无接触服务、疫情动态、远程办公、在线教育等多方面数据。当中披露，截至2月14日，小程序超市业态访问量同比增长115%，生鲜果蔬业态访问量同比增长168%，社区电商业态同比增长83%。复工后，物流行业小程序访问量环比上涨68%。（李楠）"}
{"title": "“回家”上市的阿里，核心业务暗藏礁石 ", "author": "Rolan", "push_time": "2019-11-27 00:02", "content": "今天上午，随着阿里巴巴正式在港交所挂牌交易，阿里终于“圆梦”了。为了圆这个梦，阿里走了数年：2007年11月，阿里巴巴以B2B业务作为主体于港交所上市，市盈率曾一度超300倍，但随之而来的金融危机使其在第二年6月便黯然撤离港股；2013年10月，阿里巴巴再战港股，却因“同股不同权”失之交臂，无论是阿里还是港交所都为此颇为遗憾，港交所甚至还进行了“同股不同权”等一系列大刀阔斧的改革。6年后的今天，阿里巴巴终于以4万亿港币的市值重返港交所。阿里如此大费周章的原因并不难理解。回归港股，意味着多一个募资渠道，跟内地巨大的投资市场也可以产生直接联系，因为香港有着既贴近业务主要市场、又可对接国际资本的独特优势，这同时也符合阿里的全球化策略。另一方面，阿里巴巴的关联公司如阿里健康、阿里影业等皆已在香港上市，这次回归也能同时盘活这些资源。不仅如此，这还可以使阿里巴巴的股票在亚洲交易时段也可以进行交易，加强流动性和吸引力。也就是说，无论是股票交易层面还是业务推进层面，回归港交所都是必然选择。阿里巴巴对港交所的浓浓渴望尽在掌舵人张勇今天的致辞中：“我们5年前曾经做出的承诺‘如果条件允许，香港，我们一定会回来”。股价似乎也在回应张勇：阿里巴巴本次发行价为176港元，开盘股价大涨7.39%。投资市场看好的无疑是阿里的赚钱能力，我们不妨来看看，其在港股上市后的其核心业务将会面临怎样的发展和挑战。1核心商业势头强劲的背后，暗藏焦虑阿里招股书中披露的信息显示，主要业务包括核心商业、数字媒体及娱乐、创新业务及云计算四块。2019年财年（2018年4月1日—2019年3月31日），阿里巴巴共实现收入3768.4亿元，净利润802.3亿元。其中，核心商业业务依旧为阿里巴巴最主要的收入来源，2019财年共实现收入3234亿元，占总营收比例为85.82%。结合阿里Q3财报可以发现，除了核心业务电商，其他三块业务都处于亏损状态。虽然核心电商的势头依然强劲，但阿里的焦虑在刚刚过去的双十一里已经有所端倪。从结果来看，双十一阿里总交易额2684亿元，比去年继续增长了549亿元。优秀成绩的背后，阿里的双十一早就从最早期的全场五折演变成了长达20多天轰轰烈烈的套路游戏，拉人盖楼、开喵铺升级，都是为了抢夺用户的使用时长和存量带增量。这背后的原因是整个互联网都进入后流量红利时代，超级App们的增量市场基本到达了天花板。在转入存量市场后，更重要的课题是如何把这些流量运营起来。在这个大背景下，支付宝、饿了么、优酷等纷纷成为双十一玩法的一部分，比如想获得喵币就得去支付宝使用一下金融业务，通过红包优惠为支付宝的部分业务带带量，通过这种方式，阿里旗下多个超级App互相导流量。而另一方面，老对手京东、新对手拼多多也都在持续发力。前不久，京东披露双十一平台总下单金额——超过2044亿元，这是京东这么多年来首次披露下单金额，昭示了京东对业绩的愈发自信，并且，强调强势增长离不开下沉市场的开发，就在双十一之后，京东发布Q3业绩财报，主要核心业绩指标远超市场预期；（图片来源于Quest Mobile）在两个“老大哥”的辉煌战绩下，拼多多没有披露更多数据，并且Q3财报也并未交出令人满意的成绩，但拼多多对用户增长的渴望依旧旺盛，财报发布后，拼多多表示在下一季度会继续百亿补贴战略，希望借此稳住下沉市场，并向京东和阿里所占据多年的一二线市场渗透。当然，在电商业务这个阿里最拿手的领域，它不会轻易被超越。我们看到阿里还在持续尝试创新，比如手淘小程序经过一年的沉淀，终于要推出，这或许会为阿里带来一波新的想象力。2阿里云腹背受敌，如何度过“瓶颈”期？阿里云是阿里巴巴集团一个很特殊的存在：当其他板块都在平稳发展时，阿里云在快速“迈进”，Q3财报中，阿里云的营收已经超过数字娱乐，成为第二大营收板块，尽管其仍处于长期亏损状态。财报显示，今年第三季度，阿里云营收同比增长64%至92.9亿元人民币，延续了增速历年下降的趋势。与此同时，亏损也在扩大，阿里云EBITDA亏损5.21亿元，为近两年的最高值。 （图片来源于亿欧网）这表明阿里云业务正进入瓶颈期，而随着华为稳步前进、腾讯to B业务的发展，在接下来的云战场上，阿里也将和电商业务一样，迎来新老对手的挑战。作为老牌云玩家，华为云与阿里云的总体实力可以说是不分伯仲。华为更注重在AI方面的发展，而阿里更深耕与物联网。单从 IaaS 和 PaaS 整体市场份额来看，阿里遥遥领先，份额接近 50%；但华为云在今年Q2季度中，整体市场增长超过350%，在Top厂商中增长最快，依然不容小觑。虽说腾讯是阿里的老对手，但腾讯云却是阿里云的新对手，虽然腾讯云早就存在，但其真正开始受到万众瞩目还是在去年9月30日腾讯组织架构大调整，CSIG的诞生象征腾讯to B业务的开始。经过一年的沉淀，今年Q3，腾讯云一跃成为一大亮点，收入同比增长80%至47亿元。虽然总额只相当于阿里云的一半，但增速迅猛，不得忽视。老对手毫不让步、新对手步步紧逼，阿里云想在这场对抗中处于不败之地，一方面要加强技术“修炼”的“内功”，另一方面则是借助阿里经济体的发展，覆盖更多B级市场。在阿里经济体中，阿里云扮演的角色是底层基础设施，系统性向企业输出完备的云端数字化解决方案。显然阿里云也深谙此道，今年年初，阿里云推出繁星计划，为阿里巴巴旗下超级App包括支付宝、钉钉、高德、手淘等提供一站式小程序开发工具。这么做的思路非常清晰：借助阿里系旗下超级App们的小程序生态，切中企业对高效开发的需求，将一众来阿里“淘金”的开发者、企业，变为自己的“用户”。综合来看，在云计算这条赛道上，阿里虽然腹背受敌，但此番上市之后，随着阿里对旗下资源的进一步整合，或许会为阿里云带来更多B端资源，从而突破“瓶颈”。3阿里大文娱亏损还在持续，“明天”能盈利吗？阿里大文娱的恐怕是阿里四大营收版块中最尴尬的那个了。阿里大文娱就是阿里巴巴的数字媒体及娱乐业务，其下业务具体包含优酷、UC浏览器、大麦、阿里音乐、阿里影业、阿里文学6项。 为了让这些业务独立发展得更好，并互相联动把资源盘起来，成立至今，阿里大文娱共更换了三任总裁、十位核心高管，职业经理人、阿里元老等轮番上阵，烧掉百亿现金。无论高管怎么变、业务怎么调整，始终不变的是亏损。2019年Q3财报显示，阿里大文娱亏损达到33.27亿元。但好消息也有，第三季度，大文娱总营收72.96亿元，同比增长23%。即便如此，依然未能扭亏为盈。之所以营收增长，是因为一方面“烧钱大户”优酷在购买内容上的支出减少，而阿里影业的财务数据并入大文娱，直接推动总营收增长。事实上，大文娱持续亏损的“罪魁祸首”正是优酷在版权上的投入。下图显示，相比于去年，大文娱今年以来的亏损要低不少，这背后其实就是得益于优酷在购买内容的支出上有所减少，而转向原创内容制作，但具体金额多少，尚没有详细透露。从结果来看，原创内容的思路显然是正确的。今年Q3，优酷第三季度的日均用户数同比增长了47%，原创剧集《长安十二时辰》功不可没。正因如此，优酷接下来将增加对原创内容的投入。但对于整个视频行业而言，采购版权这件事一直都很重要，因为“爆款”越来越多，错过爆款，则意味着用户可能去其他平台，无疑是更大的隐患。所以优酷的竞争者们，无论是腾讯视频还是爱奇艺，买版权上不遗余力：腾讯视频2018年全年花了646.77亿元买内容，2019年仅三个季度就花了558.93亿元；爱奇艺则“稍逊”一些，2019年前三季度，内容支出达到165亿元。但爱奇艺的营收却相当可观，今年Q3，营收达到74 亿元，超过了阿里大文娱的总营收。优酷想和多位对手的角逐中博出彩，前途漫漫。与此同时，大文娱的营收功臣阿里影业，情况却不容乐观，截至目前，2019财年亏损仍达到2.54亿元。事实上，阿里影业就像阿里大文娱的一个缩影，四年换过三任CEO，战略也是多次调整。今年，阿里影业动作不断相继投资了多部高票房电影，甚至通过《绿皮书》牵手了奥斯卡，近期热门电影《少年的你》也获得了15亿的票房，这或许会扭转阿里影业亏损的态势。4创新业务劲敌在前，御敌策略逐渐清晰在阿里生态布局中，创新业务囊括了我们耳熟能详的各业界翘楚，如高德地图、钉钉、天猫精灵，但据其财报显示，这些高名气APP所带来的营收却仅为12.1亿元，占比1%。 知名度与营收数据的冲突昭示着这些业务线（App）都在各自的领域一边风光无限一边继续探索更多的盈利方式，在发展的同时也在奋力御敌。 其中高德地图和钉钉尤为如此。1、高德地图：用小程序延伸服务场景作为最早进入行业的“龙头老大”，其优秀的导航功能与广泛的覆盖范围，是有车人士和路痴的C端用户的不二之选。但随着5G风口的到来，以移动地图为基础设施建设的车联网将被推上巨大的风口。 在这一方面，高德竞争对手百度地图，借着百度在车联网领域的战略布局，百度地图作为百度阿波罗计划关键的底层设施，在5G风口下，将获得更多的机会。 虽然没有百度地图的天然优势，但高德也摆好了应对姿势。今年在高德APP中上线了“高德小程序”，高德通过小程序去延展车主和用户的出行服务，并和阿里系旗下的超级APP联动，打通更多场景。更好的联动阿里服务于C端用户，或许能够成为高德的突破口。2、钉钉：打造企业级生态平台与高德一样，钉钉也是办公领域的最早入局者和佼佼者。自2014年12月以来，一路演变，目前的钉钉已不只是一个办公工具，而是帮助企业提供系统化的解决方案。截至目前，钉钉平台上已有20万开发者入驻，企业应用数达30万，用户数超过2亿。但其身后依然不乏很多后来者“快马加鞭”追赶，企业微信就是其中之一。与钉钉的打法不同，企业微信推出企业微信与微信消息互通、关联小程序等能力，帮助企业实现内外部连接、及线上线下的打通，以提升转化与复购。由此可见，企业微信的思路是，基于庞大的C端用户量优势去做业务延伸，打通B端与C端场景。钉钉的发展思路也是基于自身优势——企业级消费市场，打造企业级生态，此前，钉钉上线了自己的小程序平台，吸引企业服务领域的开发者和服务商入局。此外，钉钉未来与手机淘宝、饿了么等平台全线打通也是一个重要方向，把超级App们连接在一起，最终形成一套操作系统。而小程序可以在超级App之间跳转，不仅可以进行场景切换，再加上后端数据的打通，从生态整合角度看，小程序让超级App之间发挥了最大的协同效应。阿里巴巴今日“回家”后，收盘价是187.6港元，涨幅6.59%，看起来市场反响不错。但是，目前的阿里已经不再是一家电商公司，而是服务于万千企业的商业基础设施，其面临的挑战也会更大。"}
